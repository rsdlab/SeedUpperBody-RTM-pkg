/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-11-16 11:50:10.372744
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[1]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=IKsin(j[6]);
x13=IKcos(j[6]);
x14=((0.035)*x0);
x15=((1.0)*x2);
x16=((1.0)*x1);
x17=((0.279642)*x2);
x18=((0.035)*x2);
x19=((0.035)*x1);
x20=((0.279642)*x1);
x21=((0.275358)*x6);
x22=(x6*x7);
x23=(x3*x7);
x24=(x0*x3);
x25=(x5*x6);
x26=((-1.0)*x10);
x27=(x1*x3);
x28=((-1.0)*x7);
x29=(x0*x4);
x30=((-1.0)*x11);
x31=(x4*x6);
x32=(x3*x5);
x33=(x1*x15);
x34=(x19*x4);
x35=(x14*x4);
x36=((1.0)*x32);
x37=((1.0)*x0*x25);
x38=(x14*x2*x3);
x39=(x18*x27);
x40=((((-1.0)*x15*x27))+x29);
x41=(((x2*x25))+x23);
x42=((((-1.0)*x36))+((x2*x22)));
x43=((((-1.0)*x15*x24))+(((-1.0)*x16*x4)));
x44=(x38+x34);
x45=(x11*x42);
x46=(x43*x7);
x47=(((x1*x22))+((x40*x5)));
x48=(((x31*x9))+((x41*x8)));
x49=(((x41*x9))+(((-1.0)*x31*x8)));
x50=((((-1.0)*x1*x25))+((x40*x7)));
x51=(((x0*x22))+((x43*x5)));
x52=(x10*x48);
x53=(((x47*x9))+((x8*((((x27*x4))+((x0*x2)))))));
x54=(((x51*x9))+((x8*(((((-1.0)*x33))+((x24*x4)))))));
x55=(((x9*(((((-1.0)*x0*x15))+(((-1.0)*x16*x3*x4))))))+((x47*x8)));
x56=(((x51*x8))+((x9*(((((-1.0)*x24*x4))+x33)))));
eerot[0]=(((x13*x54))+((x12*((((x11*(((((-1.0)*x37))+x46))))+((x10*x56)))))));
eerot[1]=(((x11*x56))+((x10*((((x28*x43))+x37)))));
eerot[2]=(((x12*x54))+((x13*((((x26*x56))+((x30*(((((-1.0)*x0*x25))+x46)))))))));
eetrans[0]=((((0.279642)*x0*x25))+(((-1.0)*x44))+((x7*((((x17*x24))+((x20*x4))))))+((x0*x21))+(((0.01)*x24))+(((-1.0)*x14*x22))+((x44*x5))+(((-0.028046)*x0)));
eerot[3]=(((x13*x53))+((x12*((((x11*x50))+((x10*x55)))))));
eerot[4]=(((x10*((((x28*x40))+((x16*x25))))))+((x11*x55)));
eerot[5]=(((x12*x53))+((x13*((((x26*x55))+((x30*x50)))))));
eetrans[1]=((((-1.0)*x39))+((x1*x21))+(((0.01)*x27))+(((-1.0)*x19*x22))+((x7*((((x17*x27))+(((-0.279642)*x29))))))+x35+((x5*(((((-1.0)*x35))+x39))))+(((-0.028046)*x1))+((x20*x25)));
eerot[6]=(((x12*((x45+x52))))+((x13*x49)));
eerot[7]=(((x11*x48))+((x10*(((((-1.0)*x15*x22))+x36)))));
eerot[8]=(((x13*(((((-1.0)*x45))+(((-1.0)*x52))))))+((x12*x49)));
eetrans[2]=((0.054778)+((x18*x6))+(((0.279642)*x32))+(((-0.01)*x6))+(((-0.035)*x23))+(((-1.0)*x18*x25))+(((-1.0)*x17*x22))+(((0.275358)*x3)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r02);
new_r02=r01;
new_px=px;
new_r10=r10;
new_r11=((-1.0)*r12);
new_r12=r11;
new_py=py;
new_r20=r20;
new_r21=((-1.0)*r22);
new_r22=r21;
new_pz=((-0.054778)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x57=((1.0)*px);
IkReal x58=((1.0)*pz);
IkReal x59=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x59))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x58)));
rxp0_2=((((-1.0)*r10*x57))+((py*r00)));
rxp1_0=((((-1.0)*r21*x59))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x58)));
rxp1_2=((((-1.0)*r11*x57))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x59)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x58)));
rxp2_2=((((-1.0)*r12*x57))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x60=((0.056092)*px);
IkReal x61=((1.0)*pp);
IkReal x62=((0.0014)*sj2);
IkReal x63=((((0.07)*cj2))+(((-1.0)*py)));
IkReal x64=((0.307338421884)+(((-1.0)*x61))+(((-1.0)*x60)));
IkReal x65=((0.307338421884)+x60+(((-1.0)*x61)));
IkReal x66=(x60+x61);
IkReal x67=((0.00423177454)+(((-1.0)*x62))+(((-1.0)*x66)));
IkReal x68=((0.00423177454)+x60+(((-1.0)*x62))+(((-1.0)*x61)));
IkReal gconst0=x63;
IkReal gconst1=x64;
IkReal gconst2=x67;
IkReal gconst3=x63;
IkReal gconst4=x64;
IkReal gconst5=x67;
IkReal gconst6=x65;
IkReal gconst7=x68;
IkReal gconst8=x65;
IkReal gconst9=x68;
IkReal x69=py*py;
IkReal x70=cj2*cj2;
IkReal x71=sj2*sj2;
IkReal x72=px*px;
IkReal x73=py*py*py;
IkReal x74=((0.312798592656)*gconst4);
IkReal x75=(gconst0*px);
IkReal x76=((0.0350909973185207)*py);
IkReal x77=(gconst5*py);
IkReal x78=(gconst7*py);
IkReal x79=(gconst3*gconst4);
IkReal x80=(px*py);
IkReal x81=(gconst2*gconst5);
IkReal x82=(gconst0*gconst4);
IkReal x83=(gconst6*gconst8);
IkReal x84=(cj2*px);
IkReal x85=((4.0)*px);
IkReal x86=((0.0434563668)*cj2);
IkReal x87=(gconst0*gconst8);
IkReal x88=(gconst7*gconst8);
IkReal x89=((0.01251194370624)*sj2);
IkReal x90=(cj2*py);
IkReal x91=((1.0)*gconst1);
IkReal x92=(gconst0*sj2);
IkReal x93=(gconst4*py);
IkReal x94=(gconst0*py);
IkReal x95=((0.0004379180297184)*sj2);
IkReal x96=((2.0)*gconst2);
IkReal x97=(gconst1*gconst5);
IkReal x98=((0.003476509344)*sj2);
IkReal x99=(gconst2*gconst4);
IkReal x100=(gconst8*py);
IkReal x101=(gconst2*py);
IkReal x102=((0.012585249856)*gconst3);
IkReal x103=(gconst2*gconst3);
IkReal x104=((0.224368)*gconst1);
IkReal x105=(cj2*gconst8);
IkReal x106=((0.312798592656)*gconst8);
IkReal x107=(gconst1*gconst4);
IkReal x108=(gconst6*gconst9);
IkReal x109=((0.006953018688)*sj2);
IkReal x110=(gconst0*gconst1);
IkReal x111=((0.00603729)*x69);
IkReal x112=((0.0004226103)*x90);
IkReal x113=((0.00603729)*x94);
IkReal x114=(gconst7*x70);
IkReal x115=((0.0002502388741248)*x71);
IkReal x116=((1.0)*x69);
IkReal x117=((0.00625597185312)*cj2*sj2);
IkReal x118=((0.07)*cj2*gconst1);
IkReal x119=((0.112184)*x69);
IkReal x120=(gconst4*x70);
IkReal x121=((0.112184)*x73);
IkReal x122=((1.0)*x101);
IkReal x123=((4.0)*x72);
IkReal x124=((0.0001251194370624)*x71);
IkReal x125=(gconst2*x70);
IkReal x126=(gconst8*x70);
IkReal x127=((0.0005004777482496)*x71);
IkReal x128=((1.0)*gconst0*gconst6);
IkReal x129=(px*x69);
IkReal x130=(cj2*x69);
IkReal x131=((2.0)*gconst1*px);
IkReal x132=(py*x70);
IkReal x133=((0.00012167782704)*sj2*x90);
IkReal x134=(x78*x86);
IkReal x135=((0.001738254672)*sj2*x69);
IkReal x136=((0.001738254672)*py*x92);
IkReal x137=(x101*x86);
IkReal x138=(sj2*x130);
IkReal x139=(x124*x69);
IkReal x140=(x117*x78);
IkReal x141=((8.758360594368e-6)*x71*x90);
IkReal x142=((0.00625597185312)*gconst2*sj2*x90);
IkReal x143=(x124*x94);
IkReal x144=(x137+x136);
IkReal x145=(x135+x134+x133);
IkReal x146=(x142+x143+x113);
IkReal x147=(x140+x141+x139+x112+x111);
op[0]=((((-1.0)*x147))+((x100*x86))+(((-0.0049)*x70*x83))+(((0.07)*x105*x78))+(((-0.14)*x83*x90))+(((0.003041945676)*x126))+x145+(((-0.312798592656)*x70*x88))+((x108*x69))+(((-0.00625597185312)*gconst8*sj2*x90))+((x69*x88))+(((-1.0)*gconst7*gconst9*x116))+(((-1.0)*x126*x95))+(((-1.0)*x116*x83))+(((0.07)*x108*x90)));
op[1]=((((0.00024335565408)*sj2*x84))+(((-0.000341257633716384)*x132))+(((0.0356406989185207)*x100*x70))+(((-1.0)*x127*x80))+(((0.0005497016)*gconst6*x132))+(((-0.0097502181061824)*x130))+(((-1.0)*gconst9*x78*x85))+(((0.14)*x108*x84))+(((0.00785288)*x105*x69))+(((0.00785288)*gconst6*x130))+(((-0.02414916)*x80))+(((4.9127396245929e-5)*sj2*x132))+(((-0.00785288)*gconst9*x130))+(((-1.7516721188736e-5)*x71*x84))+(((-0.0008452206)*x84))+(((0.0869127336)*gconst8*x84))+(((-0.28)*x83*x84))+(((0.00140363989274083)*x138))+((x109*x80))+(((-1.0)*gconst8*x84*x89))+(((-1.0)*gconst7*x84*x89))+((gconst8*x78*x85))+(((-4.0)*x80*x83))+(((-0.00785288)*gconst7*x130))+(((0.0869127336)*gconst7*x84))+(((0.14)*x84*x88))+(((4.0)*x108*x80))+((x114*x76)));
op[2]=((((0.001738254672)*gconst0*py*sj2))+(((-0.0049)*gconst1*gconst8*(cj2*cj2)))+(((-0.0195004362123648)*cj2*px*py))+(((-0.14)*cj2*gconst1*gconst8*py))+(((0.00012167782704)*cj2*py*sj2))+(((-0.0004226103)*cj2*py))+(((-0.00603729)*gconst0*py))+(((-8.758360594368e-6)*cj2*py*(sj2*sj2)))+(((-0.312798592656)*gconst4*gconst7*(cj2*cj2)))+(((-0.01570576)*cj2*gconst7*px*py))+(((0.0434563668)*cj2*gconst7*py))+(((-1.0)*gconst6*gconst9*(py*py)))+(((-0.00399831616747533)*(cj2*cj2)*(py*py)))+(((0.07)*cj2*gconst4*gconst7*py))+(((-1.0)*gconst2*gconst9*(py*py)))+(((-0.0005004777482496)*(px*px)*(sj2*sj2)))+(((-1.0)*gconst1*gconst8*(py*py)))+(((-0.07)*cj2*gconst6*gconst9*py))+(((-1.0)*gconst4*gconst6*(py*py)))+(((-0.07)*cj2*gconst0*gconst6*gconst8))+(((-1.0)*gconst0*gconst6*gconst8*py))+((gconst3*gconst7*gconst8*py))+(((-1.0)*gconst7*gconst8*(py*py)))+((gconst0*gconst6*gconst9*py))+(((0.00280727978548166)*cj2*px*py*sj2))+(((4.0)*gconst6*gconst9*(px*px)))+(((0.006083891352)*gconst8*(cj2*cj2)))+(((-0.00625597185312)*cj2*gconst4*py*sj2))+(((4.0)*gconst7*gconst8*(px*px)))+(((-0.0001251194370624)*(py*py)*(sj2*sj2)))+(((-0.00625597185312)*cj2*gconst0*gconst8*sj2))+(((-1.0)*gconst3*gconst6*gconst8*py))+(((0.001738254672)*sj2*(py*py)))+(((-0.00625597185312)*cj2*gconst7*py*sj2))+(((0.003041945676)*gconst4*(cj2*cj2)))+((gconst1*gconst9*(py*py)))+(((0.0869127336)*cj2*gconst8*py))+(((-0.0008758360594368)*gconst8*sj2*(cj2*cj2)))+(((-0.14)*cj2*gconst4*gconst6*py))+(((-0.625597185312)*gconst7*gconst8*(cj2*cj2)))+(((0.006953018688)*sj2*(px*px)))+(((0.0434563668)*cj2*gconst2*py))+(((0.07)*cj2*gconst1*gconst9*py))+((gconst4*gconst7*(py*py)))+(((-0.07)*cj2*gconst3*gconst6*gconst8))+(((-0.312798592656)*gconst2*gconst8*(cj2*cj2)))+(((0.0434563668)*cj2*gconst4*py))+(((-0.0001251194370624)*gconst0*py*(sj2*sj2)))+(((-0.07)*cj2*gconst7*gconst8*py))+(((-0.0004379180297184)*gconst4*sj2*(cj2*cj2)))+(((2.0)*gconst7*gconst9*(py*py)))+(((0.01570576)*cj2*gconst6*px*py))+((gconst2*gconst8*(py*py)))+(((-0.02414916)*(px*px)))+(((-0.0049)*gconst4*gconst6*(cj2*cj2)))+((gconst5*gconst6*(py*py)))+(((-1.0)*gconst5*gconst7*(py*py)))+(((-0.01251194370624)*cj2*gconst8*py*sj2))+(((0.0434563668)*cj2*gconst0*gconst8))+(((0.07)*cj2*gconst2*gconst8*py))+(((-0.01570576)*cj2*gconst9*px*py))+(((-0.00603729)*(py*py)))+(((-0.00625597185312)*cj2*gconst2*py*sj2))+(((0.07)*cj2*gconst5*gconst6*py))+(((0.01570576)*cj2*gconst8*px*py))+(((-4.0)*gconst7*gconst9*(px*px)))+(((-4.0)*gconst6*gconst8*(px*px))));
op[3]=((((-0.02502388741248)*cj2*gconst8*px*sj2))+(((0.000701819946370414)*cj2*gconst0*py*sj2))+(((-2.0)*gconst6*gconst9*px*py))+(((-0.02502388741248)*cj2*gconst7*px*sj2))+(((-4.0)*gconst4*gconst6*px*py))+(((2.0)*gconst3*gconst7*gconst8*px))+(((-4.0)*gconst2*gconst9*px*py))+(((0.0350909973185207)*gconst2*py*(cj2*cj2)))+(((-0.28)*cj2*gconst4*gconst6*px))+(((0.0356406989185207)*gconst4*py*(cj2*cj2)))+(((0.00785288)*cj2*gconst0*gconst8*py))+(((-0.112184)*gconst9*(py*py*py)))+(((-2.0)*gconst7*gconst8*px*py))+(((0.00785288)*cj2*gconst6*(py*py)))+(((-0.000682515267432768)*py*(cj2*cj2)))+(((0.00048671130816)*cj2*px*sj2))+(((0.112184)*gconst6*(py*py*py)))+(((0.0701819946370414)*gconst8*py*(cj2*cj2)))+(((0.003476509344)*gconst0*px*sj2))+(((0.14)*cj2*gconst5*gconst6*px))+(((4.0)*gconst4*gconst7*px*py))+(((0.00785288)*cj2*gconst1*(py*py)))+(((0.00785288)*cj2*gconst7*(py*py)))+(((4.0)*gconst5*gconst6*px*py))+(((4.0)*gconst7*gconst9*px*py))+(((0.0005497016)*gconst1*py*(cj2*cj2)))+(((-4.0)*gconst5*gconst7*px*py))+(((0.00785288)*cj2*gconst9*(py*py)))+(((-0.0048751090530912)*cj2*gconst0*py))+(((-0.0146253271592736)*cj2*(py*py)))+(((2.0)*gconst0*gconst6*gconst9*px))+(((-3.5033442377472e-5)*cj2*px*(sj2*sj2)))+(((0.112184)*gconst8*(py*py*py)))+(((0.1738254672)*cj2*gconst8*px))+(((0.00785288)*cj2*gconst8*(py*py)))+(((-0.0007507166223744)*px*py*(sj2*sj2)))+(((0.14)*cj2*gconst2*gconst8*px))+(((-0.03622374)*px*py))+(((-0.01251194370624)*cj2*gconst2*px*sj2))+(((-0.0016904412)*cj2*px))+(((0.010429528032)*px*py*sj2))+(((0.0869127336)*cj2*gconst2*px))+(((0.00210545983911124)*cj2*sj2*(py*py)))+(((-0.00785288)*cj2*gconst2*(py*py)))+(((0.00785288)*cj2*gconst0*gconst6*py))+(((-0.28)*cj2*gconst1*gconst8*px))+(((0.1738254672)*cj2*gconst7*px))+(((-0.112184)*gconst3*gconst7*(py*py)))+(((-4.0)*gconst1*gconst8*px*py))+(((-0.0002502388741248)*gconst0*px*(sj2*sj2)))+(((0.14)*cj2*gconst1*gconst9*px))+(((4.0)*gconst1*gconst9*px*py))+(((-0.01207458)*gconst0*px))+(((0.00785288)*cj2*gconst4*(py*py)))+(((-0.00785288)*cj2*gconst5*(py*py)))+(((0.112184)*gconst3*gconst6*(py*py)))+(((-2.0)*gconst0*gconst6*gconst8*px))+(((0.00785288)*cj2*gconst3*gconst6*py))+(((-0.112184)*gconst7*(py*py*py)))+(((0.14)*cj2*gconst4*gconst7*px))+(((9.8254792491858e-5)*py*sj2*(cj2*cj2)))+(((4.0)*gconst2*gconst8*px*py))+(((0.0701819946370414)*gconst7*py*(cj2*cj2)))+(((0.00785288)*cj2*gconst3*gconst8*py))+(((0.0869127336)*cj2*gconst4*px))+(((-0.112184)*gconst0*gconst9*(py*py)))+(((-2.0)*gconst3*gconst6*gconst8*px))+(((0.112184)*gconst0*gconst8*(py*py)))+(((-0.01251194370624)*cj2*gconst4*px*sj2)));
op[4]=((((0.013906037376)*sj2*(px*px)))+(((0.001738254672)*gconst0*py*sj2))+(((-0.07)*cj2*gconst0*gconst4*gconst6))+(((-0.01251194370624)*cj2*gconst4*py*sj2))+(((-0.0004379180297184)*gconst8*sj2*(cj2*cj2)))+(((0.07)*cj2*gconst1*gconst5*py))+(((-1.0)*gconst7*gconst9*(py*py)))+(((-0.00012167782704)*cj2*py*sj2))+((gconst0*gconst1*gconst9*py))+(((-0.001738254672)*sj2*(py*py)))+(((0.224368)*gconst0*gconst8*px*py))+(((-1.0)*gconst1*gconst9*(py*py)))+(((-0.14)*cj2*gconst1*gconst4*py))+(((4.0)*gconst5*gconst6*(px*px)))+(((-0.00603729)*gconst0*py))+(((-1.0)*gconst1*gconst4*(py*py)))+(((0.006083891352)*gconst4*(cj2*cj2)))+(((-1.0)*gconst1*gconst3*gconst8*py))+(((-4.0)*gconst2*gconst9*(px*px)))+(((2.0)*gconst2*gconst9*(py*py)))+(((-0.07)*cj2*gconst1*gconst3*gconst8))+(((0.0869127336)*cj2*gconst0*gconst8))+(((-0.07)*cj2*gconst4*gconst7*py))+(((-0.0010009554964992)*(px*px)*(sj2*sj2)))+(((0.01570576)*cj2*gconst1*px*py))+(((-1.0)*gconst5*gconst6*(py*py)))+(((-0.00625597185312)*cj2*gconst8*py*sj2))+(((-0.0049)*gconst1*gconst4*(cj2*cj2)))+(((-1.0)*gconst0*gconst1*gconst8*py))+(((-0.00176193497984)*cj2*(py*py*py)))+(((-0.07)*cj2*gconst1*gconst9*py))+((gconst0*gconst5*gconst6*py))+(((-1.0)*gconst2*gconst8*(py*py)))+(((0.224368)*gconst6*px*(py*py)))+((gconst1*gconst5*(py*py)))+(((-4.0)*gconst1*gconst8*(px*px)))+(((4.0)*gconst2*gconst8*(px*px)))+(((0.0001251194370624)*(py*py)*(sj2*sj2)))+(((0.00603729)*(py*py)))+(((-0.625597185312)*gconst2*gconst8*(cj2*cj2)))+(((-0.0008758360594368)*gconst4*sj2*(cj2*cj2)))+(((-0.07)*cj2*gconst0*gconst1*gconst8))+(((0.07)*cj2*gconst2*gconst4*py))+(((4.0)*gconst1*gconst9*(px*px)))+(((-0.00625597185312)*cj2*gconst0*gconst4*sj2))+(((-1.0)*gconst4*gconst7*(py*py)))+(((0.224368)*gconst8*px*(py*py)))+(((-1.0)*gconst3*gconst4*gconst6*py))+(((-0.0390008724247296)*cj2*px*py))+(((-0.625597185312)*gconst4*gconst7*(cj2*cj2)))+(((-1.0)*gconst0*gconst6*gconst9*py))+(((4.0)*gconst4*gconst7*(px*px)))+(((-4.0)*gconst4*gconst6*(px*px)))+(((0.0434563668)*cj2*gconst2*py))+(((-0.224368)*gconst7*px*(py*py)))+(((-1.0)*gconst0*gconst3*gconst6*gconst8))+(((-1.0)*gconst0*gconst4*gconst6*py))+(((0.00625597185312)*cj2*gconst7*py*sj2))+(((-0.01570576)*cj2*gconst5*px*py))+(((-0.0001251194370624)*gconst0*py*(sj2*sj2)))+(((8.758360594368e-6)*cj2*py*(sj2*sj2)))+(((-0.0434563668)*cj2*gconst7*py))+(((-0.07)*cj2*gconst5*gconst6*py))+(((2.0)*gconst5*gconst7*(py*py)))+(((-0.07)*cj2*gconst2*gconst8*py))+(((-0.312798592656)*gconst7*gconst8*(cj2*cj2)))+(((-0.01251194370624)*cj2*gconst0*gconst8*sj2))+(((-0.224368)*gconst9*px*(py*py)))+(((0.224368)*gconst3*gconst6*px*py))+(((0.00561455957096331)*cj2*px*py*sj2))+(((-0.04829832)*(px*px)))+(((-0.00088096748992)*cj2*gconst3*(py*py)))+((gconst2*gconst4*(py*py)))+(((-0.07)*cj2*gconst3*gconst4*gconst6))+(((-1.0)*gconst3*gconst7*gconst8*py))+(((0.0004226103)*cj2*py))+(((0.0434563668)*cj2*gconst8*py))+(((0.01570576)*cj2*gconst4*px*py))+(((-0.01570576)*cj2*gconst2*px*py))+(((0.0434563668)*cj2*gconst0*gconst4))+(((-4.0)*gconst5*gconst7*(px*px)))+((gconst3*gconst4*gconst7*py))+(((-0.312798592656)*gconst2*gconst4*(cj2*cj2)))+(((-0.224368)*gconst0*gconst9*px*py))+((gconst2*gconst3*gconst8*py))+(((-0.00625597185312)*cj2*gconst2*py*sj2))+(((0.0869127336)*cj2*gconst4*py))+(((-0.00787329688636185)*(cj2*cj2)*(py*py)))+(((-0.00088096748992)*cj2*gconst0*(py*py)))+(((-0.224368)*gconst3*gconst7*px*py))+(((-1.0)*gconst2*gconst5*(py*py)))+(((0.003041945676)*gconst8*(cj2*cj2))));
op[5]=((((0.00140363989274083)*cj2*gconst0*py*sj2))+(((4.0)*gconst2*gconst4*px*py))+(((4.9127396245929e-5)*py*sj2*(cj2*cj2)))+(((-2.0)*gconst3*gconst4*gconst6*px))+(((2.0)*gconst0*gconst5*gconst6*px))+(((-2.0)*gconst1*gconst3*gconst8*px))+(((0.0350909973185207)*gconst8*py*(cj2*cj2)))+(((-0.112184)*gconst2*gconst3*(py*py)))+(((-2.0)*gconst5*gconst6*px*py))+(((-0.0005004777482496)*gconst0*px*(sj2*sj2)))+(((0.14)*cj2*gconst2*gconst4*px))+(((0.0350909973185207)*gconst7*py*(cj2*cj2)))+(((0.112184)*gconst7*(py*py*py)))+(((0.112184)*gconst0*gconst4*(py*py)))+(((0.14)*cj2*gconst1*gconst5*px))+(((0.112184)*gconst4*(py*py*py)))+(((-0.02502388741248)*cj2*gconst4*px*sj2))+(((0.00785288)*cj2*gconst1*(py*py)))+(((0.112184)*gconst0*gconst3*gconst6*py))+(((-0.0008452206)*cj2*px))+(((4.0)*gconst5*gconst7*px*py))+(((0.112184)*gconst0*gconst9*(py*py)))+(((0.112184)*gconst1*(py*py*py)))+(((0.112184)*gconst9*(py*py*py)))+(((0.112184)*gconst1*gconst3*(py*py)))+(((2.0)*gconst0*gconst1*gconst9*px))+(((0.112184)*gconst3*gconst8*(py*py)))+(((0.00785288)*cj2*gconst1*gconst3*py))+(((-0.02502388741248)*cj2*gconst2*px*sj2))+(((0.0869127336)*cj2*gconst8*px))+(((0.00785288)*cj2*gconst0*gconst4*py))+(((0.00785288)*cj2*gconst3*gconst4*py))+(((2.0)*gconst3*gconst4*gconst7*px))+(((-1.7516721188736e-5)*cj2*px*(sj2*sj2)))+(((0.1738254672)*cj2*gconst2*px))+(((-0.000341257633716384)*py*(cj2*cj2)))+(((4.0)*gconst1*gconst5*px*py))+(((-2.0)*gconst1*gconst9*px*py))+(((4.0)*gconst2*gconst9*px*py))+(((-0.02414916)*gconst0*px))+(((-0.01251194370624)*cj2*gconst7*px*sj2))+(((0.00024335565408)*cj2*px*sj2))+(((0.0701819946370414)*gconst2*py*(cj2*cj2)))+(((-0.112184)*gconst2*(py*py*py)))+(((0.00785288)*cj2*gconst5*(py*py)))+(((-4.0)*gconst1*gconst4*px*py))+(((-0.0097502181061824)*cj2*gconst0*py))+(((0.00785288)*cj2*gconst4*(py*py)))+(((0.112184)*gconst0*gconst3*gconst8*py))+(((-0.28)*cj2*gconst1*gconst4*px))+(((0.00785288)*cj2*gconst0*gconst1*py))+(((0.0701819946370414)*gconst4*py*(cj2*cj2)))+(((-0.112184)*gconst0*gconst5*(py*py)))+(((0.112184)*gconst0*gconst6*(py*py)))+(((2.0)*gconst2*gconst3*gconst8*px))+(((0.00785288)*cj2*gconst2*(py*py)))+(((0.112184)*gconst3*gconst7*(py*py)))+(((0.1738254672)*cj2*gconst4*px))+(((0.0869127336)*cj2*gconst7*px))+(((0.006953018688)*gconst0*px*sj2))+(((-0.01251194370624)*cj2*gconst8*px*sj2))+(((-4.0)*gconst2*gconst5*px*py))+(((-0.112184)*gconst5*(py*py*py)))+(((-2.0)*gconst0*gconst1*gconst8*px))+(((-2.0)*gconst0*gconst4*gconst6*px))+(((-2.0)*gconst4*gconst7*px*py))+(((-2.0)*gconst2*gconst8*px*py)));
op[6]=((((-1.0)*x144))+(((-1.0)*x145))+(((-0.0195004362123648)*cj2*x80))+(((-0.224368)*gconst2*x129))+(((-1.0)*x118*x79))+(((-1.0)*x118*x77))+(((-0.224368)*x75*x77))+((gconst3*x104*x80))+((x110*x77))+(((0.224368)*x75*x93))+(((0.00280727978548166)*cj2*sj2*x80))+(((-1.0)*gconst5*x69*x91))+(((-0.224368)*x103*x80))+(((-0.00625597185312)*gconst4*sj2*x90))+(((-1.0)*x78*x79))+(((-1.0)*x106*x125))+(((-1.0)*gconst2*gconst9*x116))+(((-1.0)*gconst0*x102*x69))+(((-1.0)*x118*x82))+((x86*x93))+(((0.224368)*gconst4*x129))+(((-1.0)*x128*x79))+(((-1.0)*x128*x77))+((x86*x87))+(((0.003041945676)*x120))+(((-1.0)*py*x82*x91))+(((-1.0)*x127*x72))+(((-0.012585249856)*gconst0*x73))+((x101*x79))+x146+x147+(((-1.0)*gconst9*x91*x94))+(((-1.0)*cj2*x82*x89))+(((-1.0)*x107*x123))+(((-1.0)*py*x79*x91))+(((-0.625597185312)*x70*x99))+(((-0.00393664844318093)*x69*x70))+(((-1.0)*x117*x87))+((x104*x129))+(((-0.02414916)*x72))+(((-1.0)*x116*x99))+(((-1.0)*gconst5*gconst7*x116))+(((2.0)*x69*x81))+(((-0.224368)*gconst5*x129))+((x109*x72))+(((-1.0)*x100*x103))+(((-0.07)*x90*x99))+(((-1.0)*x114*x74))+(((-0.012585249856)*(x69*x69)))+(((0.0869127336)*cj2*x82))+(((-1.0)*gconst3*x87*x91))+((x123*x99))+((x123*x97))+(((-1.0)*x120*x95))+(((-1.0)*x123*x81))+(((-1.0)*x102*x73)));
op[7]=(((x110*x119))+((gconst2*x121))+(((0.0869127336)*gconst2*x84))+(((0.112184)*x79*x94))+(((0.112184)*gconst1*gconst3*x94))+(((-1.0)*gconst2*x84*x89))+(((-1.0)*x80*x98))+((px*x79*x96))+(((-0.01207458)*x75))+(((0.0869127336)*gconst4*x84))+((gconst5*x121))+((x103*x119))+((x120*x76))+((gconst2*x77*x85))+(((0.01207458)*x80))+((x119*x79))+((x75*x98))+((x125*x76))+(((0.0048751090530912)*x130))+(((2.0)*x75*x97))+(((-1.0)*gconst4*x80*x96))+(((-0.000701819946370414)*x138))+(((-1.0)*x115*x75))+(((0.000701819946370414)*x90*x92))+((x115*x80))+(((-1.0)*gconst4*x84*x89))+(((-1.0)*x131*x79))+(((-1.0)*x131*x77))+((gconst0*gconst5*x119))+(((-2.0)*x107*x75))+(((-0.0048751090530912)*gconst0*x90)));
op[8]=((((-1.0)*x144))+(((-1.0)*x122*x79))+(((-1.0)*gconst0*x79*x91))+((x82*x86))+x146+(((-1.0)*x125*x74))+(((-1.0)*x117*x82))+(((-1.0)*gconst0*x77*x91))+(((-1.0)*x116*x81)));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j3eval[2];
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x148=cj0*cj0;
IkReal x149=py*py;
IkReal x150=px*px;
IkReal x151=pz*pz;
IkReal x152=((1271.32954713426)*cj2);
IkReal x153=(py*sj0);
IkReal x154=((0.550716)*cj2);
IkReal x155=(cj0*cj2*px);
IkReal x156=(x148*x149);
IkReal x157=(x148*x150);
j1eval[0]=(((x149*x152))+cj2+((x152*x157))+((x151*x152))+(((-1.0)*x152*x156))+(((71.311416957855)*cj2*x153))+(((2542.65909426852)*x153*x155))+(((71.311416957855)*x155)));
j1eval[1]=IKsign((((x149*x154))+(((-1.0)*x154*x156))+(((0.000433181153731056)*cj2))+(((1.101432)*x153*x155))+((x151*x154))+(((0.030890761872)*x155))+((x154*x157))+(((0.030890761872)*cj2*x153))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((-0.995135273204809)+(((0.359925798082159)*cj0*px))+(((6.41670466523139)*pp))+(((0.359925798082159)*py*sj0)))) < -1-IKFAST_SINCOS_THRESH || (((-0.995135273204809)+(((0.359925798082159)*cj0*px))+(((6.41670466523139)*pp))+(((0.359925798082159)*py*sj0)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x158=IKasin(((-0.995135273204809)+(((0.359925798082159)*cj0*px))+(((6.41670466523139)*pp))+(((0.359925798082159)*py*sj0))));
j3array[0]=((-1.78585154383919)+(((1.0)*x158)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.3557411097506)+(((-1.0)*x158)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j1eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x159=(cj0*px);
IkReal x160=((0.035)*sj3);
IkReal x161=(py*sj0);
IkReal x162=(pz*sj3);
IkReal x163=((35.6557084789275)*sj3);
IkReal x164=((284.880960870407)*cj3);
IkReal x165=((0.279642)*cj3);
IkReal x166=(cj3*pz);
j1eval[0]=((-7.86737142857143)+((x161*x163))+sj3+(((-1.0)*x159*x164))+(((-1.0)*x161*x164))+(((25.4683631992339)*pz))+(((-35.6557084789275)*x166))+(((-280.516702152586)*x161))+(((-280.516702152586)*x159))+(((-7.98977142857143)*cj3))+((x159*x163))+(((-284.880960870407)*x162)));
j1eval[1]=IKsign(((-0.007722690468)+(((0.025)*pz))+(((-0.279642)*x162))+(((-1.0)*x159*x165))+(((-0.007842839532)*cj3))+(((0.00098161)*sj3))+(((-1.0)*x161*x165))+(((-0.035)*x166))+((x159*x160))+((x160*x161))+(((-0.275358)*x161))+(((-0.275358)*x159))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x167=(cj0*px);
IkReal x168=((49.9179918704985)*cj3);
IkReal x169=((398.833345218569)*sj3);
IkReal x170=(py*sj0);
IkReal x171=(cj3*pz);
IkReal x172=(pz*sj3);
IkReal x173=((0.279642)*sj3);
IkReal x174=((0.035)*cj3);
j1eval[0]=((-1.0)+(((11.18568)*sj3))+((x168*x170))+((x169*x170))+(((-392.72338301362)*pz))+(((-35.6557084789275)*x167))+(((-35.6557084789275)*x170))+((x167*x168))+((x167*x169))+(((-398.833345218569)*x171))+(((49.9179918704985)*x172))+(((1.4)*cj3)));
j1eval[1]=IKsign(((-0.00070115)+(((-0.279642)*x171))+(((0.035)*x172))+(((-0.275358)*pz))+(((0.007842839532)*sj3))+((x167*x173))+((x167*x174))+(((0.00098161)*cj3))+(((-0.025)*x170))+(((-0.025)*x167))+((x170*x174))+((x170*x173))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x175=cj0*cj0;
IkReal x176=py*py;
IkReal x177=pz*pz;
IkReal x178=px*px;
IkReal x179=(py*sj0);
IkReal x180=(cj0*px);
IkReal x181=((1271.32954713426)*x176);
IkReal x182=(x175*x178);
j1eval[0]=((1.0)+(((1271.32954713426)*x177))+x181+(((2542.65909426852)*x179*x180))+(((71.311416957855)*x180))+(((-1.0)*x175*x181))+(((71.311416957855)*x179))+(((1271.32954713426)*x182)));
j1eval[1]=IKsign(((0.000786578116)+(((0.056092)*x180))+x177+x176+x182+(((2.0)*x179*x180))+(((-1.0)*x175*x176))+(((0.056092)*x179))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x183=cj0*cj0;
IkReal x184=py*py;
IkReal x185=((0.035)*sj3);
IkReal x186=(cj0*px);
IkReal x187=(py*sj0);
IkReal x188=((0.279642)*cj3);
IkReal x189=((0.279642)*sj3);
IkReal x190=((0.035)*cj3);
CheckValue<IkReal> x191 = IKatan2WithCheck(IkReal(((0.007722690468)+(((0.025)*pz))+((x186*x188))+(((-1.0)*pz*x190))+(((-1.0)*pz*x189))+((x187*x188))+(((0.007842839532)*cj3))+(((0.275358)*x186))+(((0.275358)*x187))+(((-1.0)*x185*x186))+(((-1.0)*x185*x187))+(((-0.00098161)*sj3)))),IkReal(((-0.00070115)+((pz*x188))+((x186*x189))+((x186*x190))+(((0.007842839532)*sj3))+((x187*x190))+(((-1.0)*pz*x185))+((x187*x189))+(((0.275358)*pz))+(((0.00098161)*cj3))+(((-0.025)*x186))+(((-0.025)*x187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x191.valid){
continue;
}
CheckValue<IkReal> x192=IKPowWithIntegerCheck(IKsign(((0.000786578116)+(((0.056092)*x187))+(((0.056092)*x186))+(((2.0)*x186*x187))+x184+(pz*pz)+(((-1.0)*x183*x184))+((x183*(px*px))))),-1);
if(!x192.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x191.value)+(((1.5707963267949)*(x192.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x193=IKsin(j1);
IkReal x194=IKcos(j1);
IkReal x195=((0.279642)*sj3);
IkReal x196=((0.035)*cj3);
IkReal x197=(py*sj0);
IkReal x198=((0.279642)*cj3);
IkReal x199=(cj0*px);
IkReal x200=((0.035)*sj3);
IkReal x201=(pz*x193);
IkReal x202=(pz*x194);
IkReal x203=((0.550716)*x193);
IkReal x204=(x194*x199);
evalcond[0]=((-0.275358)+((x193*x197))+((x193*x199))+(((-1.0)*x198))+(((0.028046)*x193))+x202+x200);
evalcond[1]=((0.025)+(((-1.0)*x195))+(((-1.0)*x196))+(((0.028046)*x194))+x204+((x194*x197))+(((-1.0)*x201)));
evalcond[2]=(((x193*x195))+((x193*x196))+(((-1.0)*x194*x198))+((x194*x200))+pz+(((-0.025)*x193))+(((-0.275358)*x194)));
evalcond[3]=((-0.028046)+((x193*x198))+(((-1.0)*x197))+(((-1.0)*x199))+((x194*x196))+((x194*x195))+(((-0.025)*x194))+(((-1.0)*x193*x200))+(((0.275358)*x193)));
evalcond[4]=((0.002191041884)+(((-0.0014023)*x194))+(((-0.056092)*x197))+(((-0.056092)*x199))+(((0.05)*x201))+(((0.015445380936)*x193))+((x197*x203))+(((-1.0)*pp))+(((-0.05)*x204))+(((-0.05)*x194*x197))+(((0.550716)*x202))+((x199*x203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1004=cj3*cj3;
IkReal x1005=(cj3*sj3);
IkReal x1006=(py*sj0);
IkReal x1007=((0.279642)*sj3);
IkReal x1008=((0.035)*cj3);
IkReal x1009=(cj0*px);
IkReal x1010=((1.0)*pz);
CheckValue<IkReal> x1011 = IKatan2WithCheck(IkReal(((-0.01667142)+(((-0.028046)*pz))+(((-1.0)*x1009*x1010))+(((0.076974648164)*x1005))+(((-1.0)*x1006*x1010))+(((0.077876661836)*sj3))+(((0.01957494)*x1004))+(((0.00264648)*cj3)))),IkReal(((0.078824648164)+(((-1.0)*pz*x1010))+(((0.01957494)*x1005))+(((-0.076974648164)*x1004))+(((-0.00175)*cj3))+(((-0.0139821)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1011.valid){
continue;
}
CheckValue<IkReal> x1012=IKPowWithIntegerCheck(IKsign(((-0.00070115)+((x1008*x1009))+(((-0.275358)*pz))+(((0.007842839532)*sj3))+(((-0.279642)*cj3*pz))+(((-0.025)*x1006))+(((-0.025)*x1009))+(((0.00098161)*cj3))+((x1006*x1007))+((x1006*x1008))+((x1007*x1009))+(((0.035)*pz*sj3)))),-1);
if(!x1012.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1011.value)+(((1.5707963267949)*(x1012.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1013=IKsin(j1);
IkReal x1014=IKcos(j1);
IkReal x1015=((0.279642)*sj3);
IkReal x1016=((0.035)*cj3);
IkReal x1017=(py*sj0);
IkReal x1018=((0.279642)*cj3);
IkReal x1019=(cj0*px);
IkReal x1020=((0.035)*sj3);
IkReal x1021=(pz*x1013);
IkReal x1022=(pz*x1014);
IkReal x1023=((0.550716)*x1013);
IkReal x1024=(x1014*x1019);
evalcond[0]=((-0.275358)+x1020+x1022+(((-1.0)*x1018))+((x1013*x1019))+((x1013*x1017))+(((0.028046)*x1013)));
evalcond[1]=((0.025)+((x1014*x1017))+x1024+(((-1.0)*x1021))+(((-1.0)*x1016))+(((-1.0)*x1015))+(((0.028046)*x1014)));
evalcond[2]=((((-0.275358)*x1014))+(((-1.0)*x1014*x1018))+((x1014*x1020))+(((-0.025)*x1013))+((x1013*x1016))+((x1013*x1015))+pz);
evalcond[3]=((-0.028046)+((x1014*x1016))+((x1014*x1015))+(((-0.025)*x1014))+((x1013*x1018))+(((0.275358)*x1013))+(((-1.0)*x1013*x1020))+(((-1.0)*x1017))+(((-1.0)*x1019)));
evalcond[4]=((0.002191041884)+((x1017*x1023))+(((0.550716)*x1022))+(((-0.0014023)*x1014))+(((-0.05)*x1014*x1017))+(((-1.0)*pp))+((x1019*x1023))+(((-0.05)*x1024))+(((0.015445380936)*x1013))+(((-0.056092)*x1017))+(((-0.056092)*x1019))+(((0.05)*x1021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1025=cj3*cj3;
IkReal x1026=((0.035)*sj3);
IkReal x1027=(cj0*px);
IkReal x1028=(cj3*sj3);
IkReal x1029=(py*sj0);
IkReal x1030=((0.279642)*cj3);
IkReal x1031=((1.0)*pz);
CheckValue<IkReal> x1032=IKPowWithIntegerCheck(IKsign(((-0.007722690468)+(((-1.0)*x1027*x1030))+(((0.025)*pz))+(((-0.007842839532)*cj3))+(((-1.0)*x1029*x1030))+(((0.00098161)*sj3))+((x1026*x1029))+((x1026*x1027))+(((-0.279642)*pz*sj3))+(((-0.035)*cj3*pz))+(((-0.275358)*x1029))+(((-0.275358)*x1027)))),-1);
if(!x1032.valid){
continue;
}
CheckValue<IkReal> x1033 = IKatan2WithCheck(IkReal(((-0.077047028164)+(((0.01927506)*sj3))+(((-0.154003323672)*cj3))+(((-0.076974648164)*x1025))+(((0.01957494)*x1028))+(pz*pz))),IkReal(((0.01667142)+(((-1.0)*x1027*x1031))+(((-0.028046)*pz))+(((-0.077876661836)*sj3))+(((-1.0)*x1029*x1031))+(((-0.076974648164)*x1028))+(((-0.01957494)*x1025))+(((-0.00264648)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1033.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1032.value)))+(x1033.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1034=IKsin(j1);
IkReal x1035=IKcos(j1);
IkReal x1036=((0.279642)*sj3);
IkReal x1037=((0.035)*cj3);
IkReal x1038=(py*sj0);
IkReal x1039=((0.279642)*cj3);
IkReal x1040=(cj0*px);
IkReal x1041=((0.035)*sj3);
IkReal x1042=(pz*x1034);
IkReal x1043=(pz*x1035);
IkReal x1044=((0.550716)*x1034);
IkReal x1045=(x1035*x1040);
evalcond[0]=((-0.275358)+(((-1.0)*x1039))+((x1034*x1040))+x1043+x1041+((x1034*x1038))+(((0.028046)*x1034)));
evalcond[1]=((0.025)+(((-1.0)*x1036))+(((-1.0)*x1037))+x1045+(((-1.0)*x1042))+(((0.028046)*x1035))+((x1035*x1038)));
evalcond[2]=((((-1.0)*x1035*x1039))+(((-0.275358)*x1035))+((x1035*x1041))+(((-0.025)*x1034))+pz+((x1034*x1037))+((x1034*x1036)));
evalcond[3]=((-0.028046)+(((-1.0)*x1038))+(((-0.025)*x1035))+(((-1.0)*x1040))+((x1034*x1039))+((x1035*x1036))+((x1035*x1037))+(((-1.0)*x1034*x1041))+(((0.275358)*x1034)));
evalcond[4]=((0.002191041884)+((x1038*x1044))+(((-0.0014023)*x1035))+((x1040*x1044))+(((-0.056092)*x1040))+(((0.05)*x1042))+(((-1.0)*pp))+(((0.015445380936)*x1034))+(((0.550716)*x1043))+(((-0.05)*x1035*x1038))+(((-0.056092)*x1038))+(((-0.05)*x1045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((-0.995048667237095)+(((0.35667466410794)*cj0*px))+(((0.35667466410794)*py*sj0))+(((6.35874392262605)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-0.995048667237095)+(((0.35667466410794)*cj0*px))+(((0.35667466410794)*py*sj0))+(((6.35874392262605)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1046=IKasin(((-0.995048667237095)+(((0.35667466410794)*cj0*px))+(((0.35667466410794)*py*sj0))+(((6.35874392262605)*pp))));
j3array[0]=((-1.85730050909461)+(((1.0)*x1046)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((1.28429214449518)+(((-1.0)*x1046)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j1eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1047=cj3*cj3;
IkReal x1048=(cj3*sj3);
IkReal x1049=((284.880960870407)*sj3);
IkReal x1050=(cj0*px);
IkReal x1051=(py*sj0);
IkReal x1052=((35.6557084789275)*cj3);
IkReal x1053=(cj3*pz);
IkReal x1054=((0.279642)*sj3);
IkReal x1055=((0.035)*cj3);
IkReal x1056=(pz*sj3);
j1eval[0]=((-1.28571428571429)+(((284.880960870407)*x1053))+cj3+(((-35.6557084789275)*x1056))+(((280.516702152586)*pz))+(((7.98977142857143)*sj3))+(((-45.843053758621)*x1050))+(((-45.843053758621)*x1051))+((x1050*x1052))+((x1051*x1052))+((x1049*x1050))+((x1049*x1051)));
j1eval[1]=IKsign(((-0.00126207)+(((-0.035)*x1056))+(((0.007842839532)*sj3))+(((0.279642)*x1053))+((x1050*x1054))+((x1050*x1055))+(((0.275358)*pz))+((x1051*x1055))+((x1051*x1054))+(((0.00098161)*cj3))+(((-0.045)*x1050))+(((-0.045)*x1051))));
j1eval[2]=((IKabs(((-0.02217858)+(((0.01957494)*x1047))+((pz*x1051))+((pz*x1050))+(((-0.00294636)*cj3))+(((0.078576661836)*sj3))+(((0.028046)*pz))+(((0.076974648164)*x1048)))))+(IKabs(((-0.080224648164)+(((-0.01957494)*x1048))+(((0.02516778)*sj3))+(pz*pz)+(((0.076974648164)*x1047))+(((0.00315)*cj3))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1057=(cj0*px);
IkReal x1058=((0.035)*sj3);
IkReal x1059=(py*sj0);
IkReal x1060=(pz*sj3);
IkReal x1061=((35.6557084789275)*sj3);
IkReal x1062=((284.880960870407)*cj3);
IkReal x1063=(cj3*pz);
IkReal x1064=((0.279642)*cj3);
j1eval[0]=((-7.86737142857143)+sj3+(((284.880960870407)*x1060))+(((-1.0)*x1059*x1062))+(((-45.843053758621)*pz))+((x1057*x1061))+(((-1.0)*x1057*x1062))+(((-280.516702152586)*x1057))+(((-280.516702152586)*x1059))+(((35.6557084789275)*x1063))+(((-7.98977142857143)*cj3))+((x1059*x1061)));
j1eval[1]=IKsign(((-0.007722690468)+(((-0.045)*pz))+(((-1.0)*x1059*x1064))+(((-0.275358)*x1057))+(((-0.275358)*x1059))+(((-0.007842839532)*cj3))+(((0.279642)*x1060))+((x1057*x1058))+(((0.00098161)*sj3))+(((-1.0)*x1057*x1064))+((x1058*x1059))+(((0.035)*x1063))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1065=((284.880960870407)*sj3);
IkReal x1066=(cj0*px);
IkReal x1067=(py*sj0);
IkReal x1068=(cj3*pz);
IkReal x1069=((35.6557084789275)*cj3);
IkReal x1070=((0.279642)*sj3);
IkReal x1071=((0.035)*cj3);
IkReal x1072=(pz*sj3);
j1eval[0]=((1.28571428571429)+(((-7.98977142857143)*sj3))+(((45.843053758621)*x1067))+(((45.843053758621)*x1066))+(((35.6557084789275)*x1072))+(((-1.0)*x1066*x1069))+(((-1.0)*x1067*x1069))+(((-284.880960870407)*x1068))+(((-1.0)*x1065*x1067))+(((-1.0)*x1065*x1066))+(((-1.0)*cj3))+(((-280.516702152586)*pz)));
j1eval[1]=IKsign(((0.00126207)+(((0.045)*x1066))+(((0.045)*x1067))+(((-0.275358)*pz))+(((-0.279642)*x1068))+(((-1.0)*x1067*x1071))+(((-1.0)*x1067*x1070))+(((-0.00098161)*cj3))+(((-1.0)*x1066*x1071))+(((-1.0)*x1066*x1070))+(((-0.007842839532)*sj3))+(((0.035)*x1072))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1073=cj0*cj0;
IkReal x1074=py*py;
IkReal x1075=cj3*cj3;
IkReal x1076=(cj3*sj3);
IkReal x1077=(py*sj0);
IkReal x1078=(cj0*px);
IkReal x1079=((0.279642)*sj3);
IkReal x1080=((0.035)*cj3);
IkReal x1081=((1.0)*pz);
CheckValue<IkReal> x1082=IKPowWithIntegerCheck(IKsign(((0.00126207)+(((-1.0)*x1077*x1079))+(((-0.275358)*pz))+(((-1.0)*x1078*x1079))+(((-0.279642)*cj3*pz))+(((-1.0)*x1078*x1080))+(((-0.00098161)*cj3))+(((-1.0)*x1077*x1080))+(((-0.007842839532)*sj3))+(((0.035)*pz*sj3))+(((0.045)*x1078))+(((0.045)*x1077)))),-1);
if(!x1082.valid){
continue;
}
CheckValue<IkReal> x1083 = IKatan2WithCheck(IkReal(((0.02217858)+(((-0.01957494)*x1075))+(((-0.076974648164)*x1076))+(((-0.028046)*pz))+(((-1.0)*x1078*x1081))+(((0.00294636)*cj3))+(((-0.078576661836)*sj3))+(((-1.0)*x1077*x1081)))),IkReal(((-0.076260450048)+(((-0.076974648164)*x1075))+(((0.01927506)*sj3))+x1074+(((-0.154003323672)*cj3))+(((2.0)*x1077*x1078))+((x1073*(px*px)))+(((0.056092)*x1077))+(((0.056092)*x1078))+(((0.01957494)*x1076))+(((-1.0)*x1073*x1074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1083.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1082.value)))+(x1083.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1084=IKsin(j1);
IkReal x1085=IKcos(j1);
IkReal x1086=((0.279642)*sj3);
IkReal x1087=(cj0*px);
IkReal x1088=((0.035)*cj3);
IkReal x1089=(py*sj0);
IkReal x1090=((0.279642)*cj3);
IkReal x1091=((0.035)*sj3);
IkReal x1092=((1.0)*x1085);
IkReal x1093=((0.09)*x1085);
IkReal x1094=(pz*x1084);
IkReal x1095=(pz*x1085);
IkReal x1096=((0.550716)*x1084);
evalcond[0]=((-0.275358)+x1095+x1091+(((-1.0)*x1090))+(((0.028046)*x1084))+((x1084*x1087))+((x1084*x1089)));
evalcond[1]=((0.045)+x1094+(((-1.0)*x1089*x1092))+(((-1.0)*x1087*x1092))+(((-1.0)*x1086))+(((-1.0)*x1088))+(((-0.028046)*x1085)));
evalcond[2]=((((0.045)*x1084))+((x1085*x1091))+(((-0.275358)*x1085))+(((-1.0)*x1085*x1090))+pz+(((-1.0)*x1084*x1088))+(((-1.0)*x1084*x1086)));
evalcond[3]=((-0.028046)+(((0.045)*x1085))+((x1084*x1090))+(((-1.0)*x1084*x1091))+(((0.275358)*x1084))+(((-1.0)*x1089))+(((-1.0)*x1087))+(((-1.0)*x1085*x1088))+(((-1.0)*x1085*x1086)));
evalcond[4]=((0.000791041884)+((x1087*x1093))+((x1087*x1096))+(((0.00252414)*x1085))+(((0.550716)*x1095))+(((0.015445380936)*x1084))+(((-0.056092)*x1089))+(((-0.056092)*x1087))+((x1089*x1093))+((x1089*x1096))+(((-0.09)*x1094))+(((-1.0)*pp)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1097=cj3*cj3;
IkReal x1098=((0.035)*sj3);
IkReal x1099=(cj0*px);
IkReal x1100=(cj3*sj3);
IkReal x1101=(py*sj0);
IkReal x1102=((0.279642)*cj3);
IkReal x1103=((1.0)*pz);
CheckValue<IkReal> x1104=IKPowWithIntegerCheck(IKsign(((-0.007722690468)+(((-0.045)*pz))+(((0.279642)*pz*sj3))+((x1098*x1101))+(((-0.007842839532)*cj3))+(((0.00098161)*sj3))+(((-1.0)*x1099*x1102))+((x1098*x1099))+(((-0.275358)*x1101))+(((0.035)*cj3*pz))+(((-0.275358)*x1099))+(((-1.0)*x1101*x1102)))),-1);
if(!x1104.valid){
continue;
}
CheckValue<IkReal> x1105 = IKatan2WithCheck(IkReal(((-0.077047028164)+(((0.01957494)*x1100))+(((0.01927506)*sj3))+(((-0.154003323672)*cj3))+(((-0.076974648164)*x1097))+(pz*pz))),IkReal(((-0.02217858)+(((-0.028046)*pz))+(((0.01957494)*x1097))+(((-0.00294636)*cj3))+(((0.078576661836)*sj3))+(((-1.0)*x1099*x1103))+(((0.076974648164)*x1100))+(((-1.0)*x1101*x1103)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1105.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1104.value)))+(x1105.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1106=IKsin(j1);
IkReal x1107=IKcos(j1);
IkReal x1108=((0.279642)*sj3);
IkReal x1109=(cj0*px);
IkReal x1110=((0.035)*cj3);
IkReal x1111=(py*sj0);
IkReal x1112=((0.279642)*cj3);
IkReal x1113=((0.035)*sj3);
IkReal x1114=((1.0)*x1107);
IkReal x1115=((0.09)*x1107);
IkReal x1116=(pz*x1106);
IkReal x1117=(pz*x1107);
IkReal x1118=((0.550716)*x1106);
evalcond[0]=((-0.275358)+x1113+x1117+(((0.028046)*x1106))+(((-1.0)*x1112))+((x1106*x1109))+((x1106*x1111)));
evalcond[1]=((0.045)+x1116+(((-1.0)*x1109*x1114))+(((-0.028046)*x1107))+(((-1.0)*x1108))+(((-1.0)*x1110))+(((-1.0)*x1111*x1114)));
evalcond[2]=((((0.045)*x1106))+(((-1.0)*x1107*x1112))+pz+(((-1.0)*x1106*x1110))+(((-1.0)*x1106*x1108))+(((-0.275358)*x1107))+((x1107*x1113)));
evalcond[3]=((-0.028046)+(((0.275358)*x1106))+(((-1.0)*x1109))+(((-1.0)*x1111))+(((0.045)*x1107))+(((-1.0)*x1107*x1110))+(((-1.0)*x1107*x1108))+(((-1.0)*x1106*x1113))+((x1106*x1112)));
evalcond[4]=((0.000791041884)+((x1109*x1118))+((x1109*x1115))+((x1111*x1115))+((x1111*x1118))+(((0.015445380936)*x1106))+(((-1.0)*pp))+(((0.550716)*x1117))+(((0.00252414)*x1107))+(((-0.09)*x1116))+(((-0.056092)*x1109))+(((-0.056092)*x1111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1119=cj3*cj3;
IkReal x1120=(cj3*sj3);
IkReal x1121=(py*sj0);
IkReal x1122=((0.279642)*sj3);
IkReal x1123=((0.035)*cj3);
IkReal x1124=(cj0*px);
CheckValue<IkReal> x1125 = IKatan2WithCheck(IkReal(((-0.02217858)+(((0.076974648164)*x1120))+(((0.01957494)*x1119))+((pz*x1124))+((pz*x1121))+(((-0.00294636)*cj3))+(((0.078576661836)*sj3))+(((0.028046)*pz)))),IkReal(((-0.080224648164)+(((-0.01957494)*x1120))+(((0.02516778)*sj3))+(pz*pz)+(((0.076974648164)*x1119))+(((0.00315)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1125.valid){
continue;
}
CheckValue<IkReal> x1126=IKPowWithIntegerCheck(IKsign(((-0.00126207)+(((0.007842839532)*sj3))+((x1121*x1122))+((x1121*x1123))+(((-0.035)*pz*sj3))+(((0.275358)*pz))+(((0.00098161)*cj3))+((x1122*x1124))+(((-0.045)*x1124))+(((-0.045)*x1121))+((x1123*x1124))+(((0.279642)*cj3*pz)))),-1);
if(!x1126.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1125.value)+(((1.5707963267949)*(x1126.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1127=IKsin(j1);
IkReal x1128=IKcos(j1);
IkReal x1129=((0.279642)*sj3);
IkReal x1130=(cj0*px);
IkReal x1131=((0.035)*cj3);
IkReal x1132=(py*sj0);
IkReal x1133=((0.279642)*cj3);
IkReal x1134=((0.035)*sj3);
IkReal x1135=((1.0)*x1128);
IkReal x1136=((0.09)*x1128);
IkReal x1137=(pz*x1127);
IkReal x1138=(pz*x1128);
IkReal x1139=((0.550716)*x1127);
evalcond[0]=((-0.275358)+x1138+x1134+(((-1.0)*x1133))+(((0.028046)*x1127))+((x1127*x1130))+((x1127*x1132)));
evalcond[1]=((0.045)+x1137+(((-1.0)*x1130*x1135))+(((-1.0)*x1131))+(((-1.0)*x1132*x1135))+(((-1.0)*x1129))+(((-0.028046)*x1128)));
evalcond[2]=((((-1.0)*x1127*x1131))+(((0.045)*x1127))+(((-1.0)*x1127*x1129))+pz+(((-0.275358)*x1128))+((x1128*x1134))+(((-1.0)*x1128*x1133)));
evalcond[3]=((-0.028046)+(((0.275358)*x1127))+(((-1.0)*x1127*x1134))+(((0.045)*x1128))+(((-1.0)*x1128*x1129))+(((-1.0)*x1132))+(((-1.0)*x1130))+(((-1.0)*x1128*x1131))+((x1127*x1133)));
evalcond[4]=((0.000791041884)+(((0.015445380936)*x1127))+(((0.00252414)*x1128))+((x1130*x1139))+((x1130*x1136))+(((0.550716)*x1138))+(((-1.0)*pp))+(((-0.056092)*x1132))+(((-0.056092)*x1130))+(((-0.09)*x1137))+((x1132*x1136))+((x1132*x1139)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1140=cj0*cj0;
IkReal x1141=py*py;
IkReal x1142=px*px;
IkReal x1143=((0.550716)*cj2);
IkReal x1144=((0.07)*py);
IkReal x1145=(cj0*pz);
IkReal x1146=(cj2*pz);
IkReal x1147=(px*sj0);
IkReal x1148=(cj0*py);
IkReal x1149=(pz*sj2);
IkReal x1150=((0.00056092)*sj2);
IkReal x1151=(cj2*pp);
IkReal x1152=(cj0*px);
IkReal x1153=((0.056092)*cj2);
IkReal x1154=(py*sj0);
IkReal x1155=((0.030890761872)*cj2);
IkReal x1156=((0.00550716)*cj2);
IkReal x1157=(py*sj2);
IkReal x1158=((0.000117885652)*cj2);
IkReal x1159=((0.015445380936)*sj2);
IkReal x1160=((0.07)*cj0*sj0);
IkReal x1161=(px*x1140);
IkReal x1162=(cj0*sj0*sj2);
IkReal x1163=(x1140*x1142);
IkReal x1164=(x1140*x1141);
CheckValue<IkReal> x1165 = IKatan2WithCheck(IkReal(((((-1.0)*x1154*x1158))+((x1153*x1163))+((x1141*x1153))+(((0.00196322)*x1147))+(((-0.02)*px*x1157))+(((-0.00550716)*x1146))+(((0.112184)*cj2*x1147*x1148))+(((0.04)*x1157*x1161))+(((-1.0)*x1153*x1164))+(((-1.0)*x1147*x1150))+(((0.550716)*x1145*x1157))+(((-0.02)*x1142*x1162))+(((-1.0)*x1152*x1158))+((x1151*x1154))+((x1151*x1152))+((x1142*x1160))+(((0.02)*x1141*x1162))+((x1148*x1150))+(((-0.14)*py*x1161))+((px*x1144))+(((-0.550716)*x1147*x1149))+(((-0.00196322)*x1148))+(((0.028046)*x1151))+(((-1.0)*x1141*x1160))+(((-4.7426960678664e-5)*cj2)))),IkReal(((((0.02)*x1145*x1157))+((pp*x1146))+(((0.550716)*px*x1157))+(((-0.001691041884)*x1146))+(((-0.02)*x1147*x1149))+(((-0.550716)*x1141*x1162))+((x1152*x1156))+(((0.07)*pz*x1147))+(((0.056092)*x1146*x1154))+((x1147*x1159))+(((0.550716)*x1142*x1162))+(((-1.101432)*x1157*x1161))+(((-1.0)*x1148*x1159))+(((0.00015445380936)*cj2))+((px*x1145*x1153))+(((-1.0)*x1144*x1145))+((x1154*x1156)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1165.valid){
continue;
}
CheckValue<IkReal> x1166=IKPowWithIntegerCheck(IKsign(((((0.000433181153731056)*cj2))+((x1141*x1143))+((x1143*(pz*pz)))+((x1152*x1155))+((x1143*x1163))+(((1.101432)*cj2*x1147*x1148))+(((-1.0)*x1143*x1164))+((x1154*x1155)))),-1);
if(!x1166.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1165.value)+(((1.5707963267949)*(x1166.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x1167=IKcos(j1);
IkReal x1168=IKsin(j1);
IkReal x1169=(px*sj2);
IkReal x1170=(cj2*py);
IkReal x1171=((0.07)*cj0);
IkReal x1172=(cj0*px);
IkReal x1173=(py*sj0);
IkReal x1174=(sj2*x1167);
IkReal x1175=((0.02)*x1167);
IkReal x1176=((1.0)*x1167);
IkReal x1177=(pz*x1168);
IkReal x1178=((0.550716)*x1168);
evalcond[0]=((((-1.0)*cj0*py*sj2))+((sj0*x1169))+(((0.01)*cj2))+(((-1.0)*sj0*x1170*x1176))+(((-0.028046)*cj2*x1167))+((cj2*x1177))+(((-1.0)*cj2*x1172*x1176)));
evalcond[1]=((0.001491041884)+(((0.07)*sj2*x1177))+(((-0.07)*x1173*x1174))+((x1173*x1175))+((x1173*x1178))+(((-0.07)*cj2*px*sj0))+(((0.550716)*pz*x1167))+(((0.015445380936)*x1168))+(((0.00056092)*x1167))+(((-0.00196322)*x1174))+(((-1.0)*pp))+((x1172*x1175))+((x1172*x1178))+(((0.0007)*sj2))+(((-0.02)*x1177))+(((-0.056092)*x1173))+(((-0.056092)*x1172))+(((-1.0)*x1167*x1169*x1171))+((x1170*x1171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3eval[2];
j3eval[0]=cj2;
j3eval[1]=IKsign(cj2);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x1179=(cj1*cj2);
j3eval[0]=x1179;
j3eval[1]=IKsign(x1179);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
j3eval[0]=((3.5)+(((-1.0)*sj2)));
j3eval[1]=IKsign(((2779.86268574)+(((-794.24648164)*sj2))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1180=(py*sj0);
IkReal x1181=(cj1*pz);
IkReal x1182=((8.37451868375393)*sj1);
IkReal x1183=(cj0*px);
IkReal x1184=((38.3390615360662)*sj1);
if( IKabs(((0.363649413099974)+(((1.07525731984051)*sj1))+(((-70.4169313844693)*pp))+((x1183*x1184))+((x1180*x1184))+(((-3.94982651521765)*x1183))+(((-3.94982651521765)*x1180))+(((38.3390615360662)*x1181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.939166042802944)+(((0.234871751004563)*sj1))+((x1182*x1183))+(((-0.494360389471602)*x1183))+(((-0.494360389471602)*x1180))+((x1180*x1182))+(((8.37451868375393)*x1181))+(((-8.81338496526424)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.363649413099974)+(((1.07525731984051)*sj1))+(((-70.4169313844693)*pp))+((x1183*x1184))+((x1180*x1184))+(((-3.94982651521765)*x1183))+(((-3.94982651521765)*x1180))+(((38.3390615360662)*x1181))))+IKsqr(((-0.939166042802944)+(((0.234871751004563)*sj1))+((x1182*x1183))+(((-0.494360389471602)*x1183))+(((-0.494360389471602)*x1180))+((x1180*x1182))+(((8.37451868375393)*x1181))+(((-8.81338496526424)*pp))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.363649413099974)+(((1.07525731984051)*sj1))+(((-70.4169313844693)*pp))+((x1183*x1184))+((x1180*x1184))+(((-3.94982651521765)*x1183))+(((-3.94982651521765)*x1180))+(((38.3390615360662)*x1181))), ((-0.939166042802944)+(((0.234871751004563)*sj1))+((x1182*x1183))+(((-0.494360389471602)*x1183))+(((-0.494360389471602)*x1180))+((x1180*x1182))+(((8.37451868375393)*x1181))+(((-8.81338496526424)*pp))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1185=IKsin(j3);
IkReal x1186=IKcos(j3);
IkReal x1187=(cj0*px);
IkReal x1188=(py*sj0);
IkReal x1189=(sj1*x1186);
IkReal x1190=((0.279642)*x1185);
IkReal x1191=(cj1*x1186);
IkReal x1192=((0.035)*x1185);
evalcond[0]=((0.155085098212)+(((-1.0)*pp))+(((-0.03325716)*x1185))+(((-0.056092)*x1187))+(((-0.056092)*x1188))+(((0.152253323672)*x1186)));
evalcond[1]=((-0.275358)+x1192+((sj1*x1187))+((sj1*x1188))+(((0.028046)*sj1))+((cj1*pz))+(((-0.279642)*x1186)));
evalcond[2]=((0.025)+(((-1.0)*x1190))+(((-1.0)*pz*sj1))+(((0.028046)*cj1))+((cj1*x1187))+((cj1*x1188))+(((-0.035)*x1186)));
evalcond[3]=((((-0.025)*sj1))+((sj1*x1190))+(((-0.279642)*x1191))+pz+(((0.035)*x1189))+(((-0.275358)*cj1))+((cj1*x1192)));
evalcond[4]=((-0.028046)+(((-0.025)*cj1))+(((0.275358)*sj1))+(((0.279642)*x1189))+(((-1.0)*x1188))+(((-1.0)*x1187))+((cj1*x1190))+(((-1.0)*sj1*x1192))+(((0.035)*x1191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1193=(cj1*pz);
IkReal x1194=(cj0*px);
IkReal x1195=(py*sj0);
IkReal x1196=(sj1*x1195);
IkReal x1197=(sj1*x1194);
if( IKabs(((0.3107258662938)+(((-39.1205174358163)*pp))+(((0.591872284472822)*sj1))+(((21.1036256319198)*x1193))+(((21.1036256319198)*x1197))+(((21.1036256319198)*x1196))+(((-2.19434806400981)*x1195))+(((-2.19434806400981)*x1194)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.945789955298979)+(((6.21733107729594)*x1197))+(((6.21733107729594)*x1196))+(((6.21733107729594)*x1193))+(((-4.89632498070236)*pp))+(((-0.274644660817557)*x1195))+(((-0.274644660817557)*x1194))+(((0.174371267393842)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.3107258662938)+(((-39.1205174358163)*pp))+(((0.591872284472822)*sj1))+(((21.1036256319198)*x1193))+(((21.1036256319198)*x1197))+(((21.1036256319198)*x1196))+(((-2.19434806400981)*x1195))+(((-2.19434806400981)*x1194))))+IKsqr(((-0.945789955298979)+(((6.21733107729594)*x1197))+(((6.21733107729594)*x1196))+(((6.21733107729594)*x1193))+(((-4.89632498070236)*pp))+(((-0.274644660817557)*x1195))+(((-0.274644660817557)*x1194))+(((0.174371267393842)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.3107258662938)+(((-39.1205174358163)*pp))+(((0.591872284472822)*sj1))+(((21.1036256319198)*x1193))+(((21.1036256319198)*x1197))+(((21.1036256319198)*x1196))+(((-2.19434806400981)*x1195))+(((-2.19434806400981)*x1194))), ((-0.945789955298979)+(((6.21733107729594)*x1197))+(((6.21733107729594)*x1196))+(((6.21733107729594)*x1193))+(((-4.89632498070236)*pp))+(((-0.274644660817557)*x1195))+(((-0.274644660817557)*x1194))+(((0.174371267393842)*sj1))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1198=IKsin(j3);
IkReal x1199=IKcos(j3);
IkReal x1200=(cj0*px);
IkReal x1201=(py*sj0);
IkReal x1202=((1.0)*cj1);
IkReal x1203=(sj1*x1199);
IkReal x1204=((0.279642)*x1198);
IkReal x1205=((0.279642)*x1199);
IkReal x1206=((0.035)*x1199);
IkReal x1207=((0.035)*x1198);
evalcond[0]=((0.156485098212)+(((-1.0)*pp))+(((-0.04444284)*x1198))+(((0.150853323672)*x1199))+(((-0.056092)*x1200))+(((-0.056092)*x1201)));
evalcond[1]=((-0.275358)+x1207+(((0.028046)*sj1))+((cj1*pz))+((sj1*x1200))+((sj1*x1201))+(((-1.0)*x1205)));
evalcond[2]=((0.045)+(((-1.0)*x1200*x1202))+(((-1.0)*x1201*x1202))+((pz*sj1))+(((-1.0)*x1206))+(((-1.0)*x1204))+(((-0.028046)*cj1)));
evalcond[3]=((((-0.035)*x1203))+(((-1.0)*sj1*x1204))+(((0.045)*sj1))+((cj1*x1207))+(((-1.0)*cj1*x1205))+pz+(((-0.275358)*cj1)));
evalcond[4]=((-0.028046)+(((0.045)*cj1))+(((-1.0)*sj1*x1207))+(((-1.0)*cj1*x1204))+(((-1.0)*cj1*x1206))+(((0.275358)*sj1))+(((-1.0)*x1200))+(((-1.0)*x1201))+(((0.279642)*x1203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1208=(pz*sj2);
IkReal x1209=((0.440669248263212)*sj0);
IkReal x1210=(cj2*px);
IkReal x1211=(cj0*px);
IkReal x1212=((3.52084656922346)*sj0);
IkReal x1213=(cj0*cj2*py);
if( IKabs(((0.232212423049293)+((x1210*x1212))+(((-3.52084656922346)*x1213))+(((-0.440669248263212)*x1211))+(((-0.0352084656922346)*sj2))+(((-3.52084656922346)*x1208))+(((-1.0)*py*x1209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.855324183038581)+(((-0.440669248263212)*x1208))+(((-0.440669248263212)*x1213))+(((-0.00440669248263212)*sj2))+(((3.52084656922346)*x1211))+((x1209*x1210))+((py*x1212)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.232212423049293)+((x1210*x1212))+(((-3.52084656922346)*x1213))+(((-0.440669248263212)*x1211))+(((-0.0352084656922346)*sj2))+(((-3.52084656922346)*x1208))+(((-1.0)*py*x1209))))+IKsqr(((-0.855324183038581)+(((-0.440669248263212)*x1208))+(((-0.440669248263212)*x1213))+(((-0.00440669248263212)*sj2))+(((3.52084656922346)*x1211))+((x1209*x1210))+((py*x1212))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.232212423049293)+((x1210*x1212))+(((-3.52084656922346)*x1213))+(((-0.440669248263212)*x1211))+(((-0.0352084656922346)*sj2))+(((-3.52084656922346)*x1208))+(((-1.0)*py*x1209))), ((-0.855324183038581)+(((-0.440669248263212)*x1208))+(((-0.440669248263212)*x1213))+(((-0.00440669248263212)*sj2))+(((3.52084656922346)*x1211))+((x1209*x1210))+((py*x1212))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1214=IKsin(j3);
IkReal x1215=IKcos(j3);
IkReal x1216=(px*sj0);
IkReal x1217=((0.035)*sj2);
IkReal x1218=(py*sj0);
IkReal x1219=(cj0*px);
IkReal x1220=((0.0007)*sj2);
IkReal x1221=((0.279642)*x1214);
IkReal x1222=((0.035)*x1215);
IkReal x1223=((1.0)*cj0*py);
evalcond[0]=((-0.247312)+x1218+x1219+(((0.035)*x1214))+(((-0.279642)*x1215)));
evalcond[1]=((0.01)+((sj2*x1221))+pz+(((-1.0)*x1217))+((x1215*x1217)));
evalcond[2]=(x1216+(((-1.0)*x1223))+(((0.035)*cj2))+(((-1.0)*cj2*x1222))+(((-1.0)*cj2*x1221)));
evalcond[3]=((0.035)+(((-1.0)*x1221))+(((-1.0)*x1222))+(((-0.01)*sj2))+(((-1.0)*pz*sj2))+((cj2*x1216))+(((-1.0)*cj2*x1223)));
evalcond[4]=((0.155785098212)+(((0.151553323672)*x1215))+(((0.00559284)*sj2*x1214))+(((-1.0)*x1220))+(((-1.0)*pp))+(((-0.03885)*x1214))+(((-0.056092)*x1218))+(((-0.056092)*x1219))+((x1215*x1220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1224=(pz*sj2);
IkReal x1225=((0.440669248263212)*sj0);
IkReal x1226=(cj2*px);
IkReal x1227=((3.52084656922346)*cj0);
IkReal x1228=(cj2*py);
IkReal x1229=((0.440669248263212)*cj0);
IkReal x1230=((3.52084656922346)*sj0);
if( IKabs(((0.256930442522873)+((py*x1225))+(((-1.0)*x1227*x1228))+(((-0.0352084656922346)*sj2))+(((3.52084656922346)*x1224))+((x1226*x1230))+((px*x1229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.05281550879946)+(((-1.0)*px*x1227))+((x1225*x1226))+(((-1.0)*py*x1230))+(((-1.0)*x1228*x1229))+(((-0.00440669248263212)*sj2))+(((0.440669248263212)*x1224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.256930442522873)+((py*x1225))+(((-1.0)*x1227*x1228))+(((-0.0352084656922346)*sj2))+(((3.52084656922346)*x1224))+((x1226*x1230))+((px*x1229))))+IKsqr(((-1.05281550879946)+(((-1.0)*px*x1227))+((x1225*x1226))+(((-1.0)*py*x1230))+(((-1.0)*x1228*x1229))+(((-0.00440669248263212)*sj2))+(((0.440669248263212)*x1224))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.256930442522873)+((py*x1225))+(((-1.0)*x1227*x1228))+(((-0.0352084656922346)*sj2))+(((3.52084656922346)*x1224))+((x1226*x1230))+((px*x1229))), ((-1.05281550879946)+(((-1.0)*px*x1227))+((x1225*x1226))+(((-1.0)*py*x1230))+(((-1.0)*x1228*x1229))+(((-0.00440669248263212)*sj2))+(((0.440669248263212)*x1224))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[5];
IkReal x1231=IKsin(j3);
IkReal x1232=IKcos(j3);
IkReal x1233=(px*sj0);
IkReal x1234=((0.035)*sj2);
IkReal x1235=((1.0)*py);
IkReal x1236=(cj0*px);
IkReal x1237=((0.0007)*sj2);
IkReal x1238=((0.279642)*x1231);
IkReal x1239=((0.035)*x1232);
evalcond[0]=((-0.01)+x1234+pz+(((-1.0)*sj2*x1238))+(((-1.0)*x1232*x1234)));
evalcond[1]=((-0.303404)+(((-0.279642)*x1232))+(((0.035)*x1231))+(((-1.0)*x1236))+(((-1.0)*sj0*x1235)));
evalcond[2]=(x1233+(((-1.0)*cj0*x1235))+(((0.035)*cj2))+(((-1.0)*cj2*x1238))+(((-1.0)*cj2*x1239)));
evalcond[3]=((0.035)+((cj2*x1233))+(((-1.0)*x1239))+(((-1.0)*x1238))+(((-0.01)*sj2))+(((-1.0)*cj0*cj2*x1235))+((pz*sj2)));
evalcond[4]=((0.155785098212)+(((0.151553323672)*x1232))+(((-0.03885)*x1231))+(((0.00559284)*sj2*x1231))+(((-1.0)*x1237))+(((-0.056092)*x1236))+(((-0.056092)*py*sj0))+(((-1.0)*pp))+((x1232*x1237)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1240=((350.0)*sj2);
IkReal x1241=(cj1*pz);
IkReal x1242=((2796.42)*sj2);
IkReal x1243=(cj0*px);
IkReal x1244=(sj1*sj2);
IkReal x1245=(py*sj0);
IkReal x1246=(sj1*x1245);
IkReal x1247=(sj1*x1243);
CheckValue<IkReal> x1248=IKPowWithIntegerCheck(IKsign(((2779.86268574)+(((-794.24648164)*sj2)))),-1);
if(!x1248.valid){
continue;
}
CheckValue<IkReal> x1249 = IKatan2WithCheck(IkReal(((916.318167262764)+(((-7842.839532)*x1243))+(((-7842.839532)*x1245))+(((9.8161)*x1244))+(((75776.661836)*x1241))+(((75776.661836)*x1247))+(((75776.661836)*x1246))+((x1240*x1246))+((x1240*x1247))+((x1240*x1241))+(((-139821.0)*pp))+(((-194.25)*sj2))+(((2125.23225785246)*sj1)))),IkReal(((-2622.58993129)+(((757.76661836)*sj2))+(((-17500.0)*pp))+(((-78.42839532)*x1244))+(((544.79355)*sj1))+(((-1.0)*x1242*x1247))+(((-1.0)*x1242*x1246))+(((-1.0)*x1241*x1242))+(((-981.61)*x1243))+(((-981.61)*x1245))+(((19425.0)*x1241))+(((19425.0)*x1247))+(((19425.0)*x1246)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1249.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1248.value)))+(x1249.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1250=IKsin(j3);
IkReal x1251=IKcos(j3);
IkReal x1252=(cj0*px);
IkReal x1253=(py*sj0);
IkReal x1254=(sj1*sj2);
IkReal x1255=(cj1*sj2);
IkReal x1256=((0.0007)*sj2);
IkReal x1257=(px*sj0);
IkReal x1258=((0.035)*x1251);
IkReal x1259=((0.279642)*x1251);
IkReal x1260=((1.0)*cj0*py);
IkReal x1261=((0.035)*x1250);
IkReal x1262=((0.279642)*x1250);
evalcond[0]=(x1257+(((-1.0)*cj2*x1262))+(((-1.0)*cj2*x1258))+(((0.035)*cj2))+(((-1.0)*x1260)));
evalcond[1]=((-0.275358)+(((-1.0)*x1259))+x1261+((sj1*x1253))+((sj1*x1252))+(((0.028046)*sj1))+((cj1*pz)));
evalcond[2]=((0.155785098212)+(((-1.0)*x1256))+(((-0.056092)*x1252))+(((-0.056092)*x1253))+(((-0.03885)*x1250))+(((-1.0)*pp))+((x1251*x1256))+(((0.151553323672)*x1251))+(((0.00559284)*sj2*x1250)));
evalcond[3]=((((-0.035)*x1254))+(((-1.0)*cj1*x1259))+((x1254*x1262))+pz+((x1254*x1258))+((cj1*x1261))+(((0.01)*sj1))+(((-0.275358)*cj1)));
evalcond[4]=((0.035)+(((-1.0)*x1258))+(((-1.0)*pz*x1254))+(((0.028046)*x1255))+(((-1.0)*cj2*x1260))+((cj2*x1257))+((x1253*x1255))+(((-0.01)*sj2))+((x1252*x1255))+(((-1.0)*x1262)));
evalcond[5]=((-0.028046)+(((-0.035)*x1255))+((sj1*x1259))+(((0.01)*cj1))+(((0.275358)*sj1))+(((-1.0)*sj1*x1261))+((x1255*x1262))+((x1255*x1258))+(((-1.0)*x1252))+(((-1.0)*x1253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1263=(sj1*sj2);
IkReal x1264=(cj2*sj1);
IkReal x1265=(cj2*pz);
IkReal x1266=(cj1*cj2);
IkReal x1267=((139821.0)*cj1);
IkReal x1268=(px*sj0);
IkReal x1269=(cj0*py);
IkReal x1270=((17500.0)*x1268);
CheckValue<IkReal> x1271=IKPowWithIntegerCheck(IKsign(x1266),-1);
if(!x1271.valid){
continue;
}
CheckValue<IkReal> x1272 = IKatan2WithCheck(IkReal(((((-17500.0)*x1263*x1269))+(((-1.0)*x1267*x1268))+(((175.0)*x1264))+(((17500.0)*x1265))+((x1263*x1270))+((x1267*x1269))+(((-9712.5)*x1266)))),IkReal(((((-139821.0)*x1263*x1268))+(((-1.0)*cj1*x1270))+(((37888.330918)*x1266))+(((-1398.21)*x1264))+(((17500.0)*cj1*x1269))+(((139821.0)*x1263*x1269))+(((-139821.0)*x1265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1272.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x1271.value)))+(x1272.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1273=IKsin(j3);
IkReal x1274=IKcos(j3);
IkReal x1275=(cj0*px);
IkReal x1276=(py*sj0);
IkReal x1277=(sj1*sj2);
IkReal x1278=(cj1*sj2);
IkReal x1279=((0.0007)*sj2);
IkReal x1280=(px*sj0);
IkReal x1281=((0.035)*x1274);
IkReal x1282=((0.279642)*x1274);
IkReal x1283=((1.0)*cj0*py);
IkReal x1284=((0.035)*x1273);
IkReal x1285=((0.279642)*x1273);
evalcond[0]=(x1280+(((-1.0)*cj2*x1285))+(((-1.0)*cj2*x1281))+(((0.035)*cj2))+(((-1.0)*x1283)));
evalcond[1]=((-0.275358)+x1284+((sj1*x1276))+((sj1*x1275))+(((0.028046)*sj1))+((cj1*pz))+(((-1.0)*x1282)));
evalcond[2]=((0.155785098212)+(((-0.056092)*x1276))+(((-0.056092)*x1275))+(((0.00559284)*sj2*x1273))+(((-1.0)*x1279))+(((-0.03885)*x1273))+((x1274*x1279))+(((-1.0)*pp))+(((0.151553323672)*x1274)));
evalcond[3]=((((-0.035)*x1277))+(((-1.0)*cj1*x1282))+((x1277*x1285))+((x1277*x1281))+pz+(((0.01)*sj1))+((cj1*x1284))+(((-0.275358)*cj1)));
evalcond[4]=((0.035)+((x1276*x1278))+((x1275*x1278))+(((-1.0)*pz*x1277))+(((-1.0)*cj2*x1283))+(((0.028046)*x1278))+(((-0.01)*sj2))+((cj2*x1280))+(((-1.0)*x1281))+(((-1.0)*x1285)));
evalcond[5]=((-0.028046)+((x1278*x1281))+((x1278*x1285))+(((-0.035)*x1278))+(((0.01)*cj1))+(((0.275358)*sj1))+(((-1.0)*x1275))+(((-1.0)*x1276))+(((-1.0)*sj1*x1284))+((sj1*x1282)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1286=((8750000000.0)*cj0);
IkReal x1287=((69910500000.0)*cj0);
IkReal x1288=((69910500000.0)*sj0);
IkReal x1289=(cj2*sj1);
IkReal x1290=((8750000000.0)*sj0);
IkReal x1291=(px*x1289);
IkReal x1292=(cj1*cj2*pz);
CheckValue<IkReal> x1293=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x1293.valid){
continue;
}
CheckValue<IkReal> x1294 = IKatan2WithCheck(IkReal(((((-245402500.0)*x1289))+(((-1.0)*x1286*x1291))+(((4856250000.0)*cj2))+(((-8750000000.0)*x1292))+((px*x1288))+(((-1.0)*py*x1289*x1290))+(((-1.0)*py*x1287)))),IkReal((((x1287*x1291))+((py*x1288*x1289))+(((69910500000.0)*x1292))+(((-18944165459.0)*cj2))+(((-1.0)*py*x1286))+((px*x1290))+(((1960709883.0)*x1289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1294.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1293.value)))+(x1294.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1295=IKsin(j3);
IkReal x1296=IKcos(j3);
IkReal x1297=(cj0*px);
IkReal x1298=(py*sj0);
IkReal x1299=(sj1*sj2);
IkReal x1300=(cj1*sj2);
IkReal x1301=((0.0007)*sj2);
IkReal x1302=(px*sj0);
IkReal x1303=((0.035)*x1296);
IkReal x1304=((0.279642)*x1296);
IkReal x1305=((1.0)*cj0*py);
IkReal x1306=((0.035)*x1295);
IkReal x1307=((0.279642)*x1295);
evalcond[0]=(x1302+(((-1.0)*cj2*x1307))+(((-1.0)*cj2*x1303))+(((-1.0)*x1305))+(((0.035)*cj2)));
evalcond[1]=((-0.275358)+x1306+((sj1*x1297))+((sj1*x1298))+(((-1.0)*x1304))+(((0.028046)*sj1))+((cj1*pz)));
evalcond[2]=((0.155785098212)+(((-0.03885)*x1295))+(((-1.0)*x1301))+(((0.151553323672)*x1296))+(((-1.0)*pp))+(((0.00559284)*sj2*x1295))+((x1296*x1301))+(((-0.056092)*x1297))+(((-0.056092)*x1298)));
evalcond[3]=(((x1299*x1303))+((x1299*x1307))+((cj1*x1306))+pz+(((-1.0)*cj1*x1304))+(((0.01)*sj1))+(((-0.275358)*cj1))+(((-0.035)*x1299)));
evalcond[4]=((0.035)+(((-1.0)*cj2*x1305))+(((-1.0)*x1303))+(((-1.0)*x1307))+(((-0.01)*sj2))+(((-1.0)*pz*x1299))+((cj2*x1302))+(((0.028046)*x1300))+((x1297*x1300))+((x1298*x1300)));
evalcond[5]=((-0.028046)+((x1300*x1303))+((x1300*x1307))+(((0.01)*cj1))+(((0.275358)*sj1))+(((-1.0)*x1298))+(((-1.0)*x1297))+(((-1.0)*sj1*x1306))+(((-0.035)*x1300))+((sj1*x1304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1308=(cj0*py);
IkReal x1309=(px*sj0);
IkReal x1310=((350.0)*sj2);
IkReal x1311=(cj2*pp);
IkReal x1312=((2796.42)*sj2);
IkReal x1313=(cj0*cj2*px);
IkReal x1314=(cj2*py*sj0);
CheckValue<IkReal> x1315=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x1315.valid){
continue;
}
CheckValue<IkReal> x1316 = IKatan2WithCheck(IkReal(((((-75776.661836)*x1308))+(((-17500.0)*x1311))+(((-981.61)*x1314))+(((-981.61)*x1313))+(((-1.0)*x1308*x1310))+((x1309*x1310))+(((5378.42238297)*cj2))+(((75776.661836)*x1309)))),IkReal(((((7842.839532)*x1314))+(((7842.839532)*x1313))+(((19425.0)*x1309))+((x1308*x1312))+(((139821.0)*x1311))+(((-21102.1532171001)*cj2))+(((-19425.0)*x1308))+(((-1.0)*x1309*x1312)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1316.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1315.value)))+(x1316.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x1317=IKcos(j3);
IkReal x1318=IKsin(j3);
IkReal x1319=((0.0007)*sj2);
IkReal x1320=((0.035)*cj2);
evalcond[0]=(x1320+(((-0.279642)*cj2*x1318))+((px*sj0))+(((-1.0)*cj0*py))+(((-1.0)*x1317*x1320)));
evalcond[1]=((0.155785098212)+((x1317*x1319))+(((0.151553323672)*x1317))+(((-1.0)*x1319))+(((-0.056092)*py*sj0))+(((-1.0)*pp))+(((0.00559284)*sj2*x1318))+(((-0.03885)*x1318))+(((-0.056092)*cj0*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[2];
IkReal x1321=((0.035)*sj3);
IkReal x1322=(cj0*px);
IkReal x1323=(py*sj0);
IkReal x1324=((35.6557084789275)*sj3);
IkReal x1325=(pz*sj2);
IkReal x1326=((284.880960870407)*cj3);
IkReal x1327=((0.279642)*cj3);
j1eval[0]=((-7.86737142857143)+sj3+(((-1.0)*x1323*x1326))+(((-284.880960870407)*sj3*x1325))+(((-280.516702152586)*x1323))+(((-280.516702152586)*x1322))+(((-1.0)*x1322*x1326))+((x1323*x1324))+((x1322*x1324))+(((-7.98977142857143)*cj3))+(((35.6557084789275)*x1325))+(((-35.6557084789275)*cj3*x1325))+(((-10.1873452796936)*pz)));
j1eval[1]=IKsign(((-0.007722690468)+(((-0.035)*cj3*x1325))+(((-1.0)*x1323*x1327))+(((-1.0)*x1322*x1327))+(((-0.007842839532)*cj3))+(((0.00098161)*sj3))+(((-0.279642)*sj3*x1325))+(((0.035)*x1325))+(((-0.275358)*x1322))+(((-0.275358)*x1323))+((x1321*x1323))+((x1321*x1322))+(((-0.01)*pz))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1328=(cj0*px);
IkReal x1329=(pz*sj3);
IkReal x1330=(sj2*sj3);
IkReal x1331=(cj3*pz);
IkReal x1332=((124.794979676246)*sj2);
IkReal x1333=((3.5)*sj2);
IkReal x1334=((0.00098161)*sj2);
IkReal x1335=((0.035)*sj2);
IkReal x1336=(py*sj0);
IkReal x1337=(cj3*x1336);
j1eval[0]=((1.0)+(((-997.083363046424)*x1331))+(((997.083363046424)*x1328*x1330))+(((-1.0)*x1328*x1332))+((cj3*x1328*x1332))+(((124.794979676246)*x1329))+((cj3*x1333))+(((997.083363046424)*x1330*x1336))+(((27.9642)*x1330))+(((-1.0)*x1332*x1336))+(((35.6557084789275)*x1336))+(((-981.808457534051)*pz))+(((-1.0)*x1333))+(((35.6557084789275)*x1328))+((x1332*x1337)));
j1eval[1]=IKsign(((0.00028046)+(((-1.0)*x1335*x1336))+(((0.007842839532)*x1330))+(((-0.275358)*pz))+(((-1.0)*x1328*x1335))+(((0.279642)*x1328*x1330))+(((0.01)*x1328))+((x1335*x1337))+((cj3*x1328*x1335))+(((0.279642)*x1330*x1336))+(((0.01)*x1336))+((cj3*x1334))+(((-0.279642)*x1331))+(((0.035)*x1329))+(((-1.0)*x1334))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1338=cj0*cj0;
IkReal x1339=py*py;
IkReal x1340=px*px;
IkReal x1341=pz*pz;
IkReal x1342=(cj0*px);
IkReal x1343=(cj2*x1338);
IkReal x1344=((1271.32954713426)*x1339);
IkReal x1345=(cj2*py*sj0);
IkReal x1346=(cj2*x1341);
j1eval[0]=((((71.311416957855)*cj2*x1342))+(((2542.65909426852)*x1342*x1345))+cj2+(((71.311416957855)*x1345))+(((1271.32954713426)*x1346))+(((-1.0)*x1343*x1344))+(((1271.32954713426)*x1340*x1343))+((cj2*x1344)));
j1eval[1]=IKsign((x1346+(((-1.0)*x1339*x1343))+(((2.0)*x1342*x1345))+((x1340*x1343))+(((0.056092)*cj2*x1342))+((cj2*x1339))+(((0.056092)*x1345))+(((0.000786578116)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1347=(cj0*px);
IkReal x1348=((0.035)*sj3);
IkReal x1349=(py*sj0);
IkReal x1350=(pz*sj3);
IkReal x1351=((35.6557084789275)*sj3);
IkReal x1352=((284.880960870407)*cj3);
IkReal x1353=((0.279642)*cj3);
IkReal x1354=(cj3*pz);
j1eval[0]=((-7.86737142857143)+sj3+(((-280.516702152586)*x1347))+(((-280.516702152586)*x1349))+(((-1.0)*x1347*x1352))+(((25.4683631992339)*pz))+((x1349*x1351))+((x1347*x1351))+(((-7.98977142857143)*cj3))+(((-1.0)*x1349*x1352))+(((-35.6557084789275)*x1354))+(((-284.880960870407)*x1350)));
j1eval[1]=IKsign(((-0.007722690468)+(((0.025)*pz))+(((-0.007842839532)*cj3))+(((-1.0)*x1347*x1353))+(((0.00098161)*sj3))+((x1347*x1348))+((x1348*x1349))+(((-1.0)*x1349*x1353))+(((-0.275358)*x1347))+(((-0.275358)*x1349))+(((-0.035)*x1354))+(((-0.279642)*x1350))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1355=(cj0*px);
IkReal x1356=((49.9179918704985)*cj3);
IkReal x1357=((398.833345218569)*sj3);
IkReal x1358=(py*sj0);
IkReal x1359=(cj3*pz);
IkReal x1360=(pz*sj3);
IkReal x1361=((0.279642)*sj3);
IkReal x1362=((0.035)*cj3);
j1eval[0]=((-1.0)+((x1357*x1358))+((x1355*x1356))+((x1355*x1357))+(((11.18568)*sj3))+(((-392.72338301362)*pz))+(((-398.833345218569)*x1359))+(((49.9179918704985)*x1360))+(((1.4)*cj3))+(((-35.6557084789275)*x1355))+(((-35.6557084789275)*x1358))+((x1356*x1358)));
j1eval[1]=IKsign(((-0.00070115)+(((0.035)*x1360))+((x1355*x1361))+((x1355*x1362))+(((-0.275358)*pz))+(((-0.025)*x1358))+(((-0.025)*x1355))+(((0.007842839532)*sj3))+((x1358*x1361))+((x1358*x1362))+(((0.00098161)*cj3))+(((-0.279642)*x1359))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
IkReal x1363=cj0*cj0;
IkReal x1364=py*py;
IkReal x1365=pz*pz;
IkReal x1366=px*px;
IkReal x1367=(py*sj0);
IkReal x1368=(cj0*px);
IkReal x1369=((1271.32954713426)*x1364);
IkReal x1370=(x1363*x1366);
j1eval[0]=((1.0)+x1369+(((2542.65909426852)*x1367*x1368))+(((1271.32954713426)*x1365))+(((71.311416957855)*x1367))+(((71.311416957855)*x1368))+(((-1.0)*x1363*x1369))+(((1271.32954713426)*x1370)));
j1eval[1]=IKsign(((0.000786578116)+x1364+x1365+x1370+(((2.0)*x1367*x1368))+(((0.056092)*x1368))+(((0.056092)*x1367))+(((-1.0)*x1363*x1364))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1371=cj0*cj0;
IkReal x1372=py*py;
IkReal x1373=((0.035)*sj3);
IkReal x1374=(cj0*px);
IkReal x1375=(py*sj0);
IkReal x1376=((0.279642)*cj3);
IkReal x1377=((0.279642)*sj3);
IkReal x1378=((0.035)*cj3);
CheckValue<IkReal> x1379 = IKatan2WithCheck(IkReal(((0.007722690468)+(((0.025)*pz))+((x1375*x1376))+((x1374*x1376))+(((0.007842839532)*cj3))+(((0.275358)*x1374))+(((0.275358)*x1375))+(((-0.00098161)*sj3))+(((-1.0)*x1373*x1374))+(((-1.0)*x1373*x1375))+(((-1.0)*pz*x1378))+(((-1.0)*pz*x1377)))),IkReal(((-0.00070115)+((x1375*x1377))+((x1375*x1378))+(((0.007842839532)*sj3))+((pz*x1376))+(((-0.025)*x1375))+(((-0.025)*x1374))+((x1374*x1377))+((x1374*x1378))+(((0.275358)*pz))+(((0.00098161)*cj3))+(((-1.0)*pz*x1373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1379.valid){
continue;
}
CheckValue<IkReal> x1380=IKPowWithIntegerCheck(IKsign(((0.000786578116)+x1372+(((2.0)*x1374*x1375))+(((-1.0)*x1371*x1372))+(pz*pz)+(((0.056092)*x1374))+(((0.056092)*x1375))+((x1371*(px*px))))),-1);
if(!x1380.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1379.value)+(((1.5707963267949)*(x1380.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1381=IKsin(j1);
IkReal x1382=IKcos(j1);
IkReal x1383=((0.279642)*sj3);
IkReal x1384=((0.035)*cj3);
IkReal x1385=(py*sj0);
IkReal x1386=((0.279642)*cj3);
IkReal x1387=(cj0*px);
IkReal x1388=((0.035)*sj3);
IkReal x1389=(pz*x1381);
IkReal x1390=(pz*x1382);
IkReal x1391=((0.550716)*x1381);
IkReal x1392=(x1382*x1387);
evalcond[0]=((-0.275358)+(((-1.0)*x1386))+x1388+x1390+((x1381*x1385))+((x1381*x1387))+(((0.028046)*x1381)));
evalcond[1]=((0.025)+(((-1.0)*x1383))+(((-1.0)*x1384))+x1392+(((0.028046)*x1382))+(((-1.0)*x1389))+((x1382*x1385)));
evalcond[2]=(((x1381*x1383))+((x1381*x1384))+(((-0.025)*x1381))+(((-0.275358)*x1382))+(((-1.0)*x1382*x1386))+pz+((x1382*x1388)));
evalcond[3]=((-0.028046)+((x1381*x1386))+(((-0.025)*x1382))+(((0.275358)*x1381))+(((-1.0)*x1381*x1388))+(((-1.0)*x1385))+(((-1.0)*x1387))+((x1382*x1384))+((x1382*x1383)));
evalcond[4]=((0.002191041884)+(((-0.05)*x1382*x1385))+(((-0.056092)*x1385))+(((-0.056092)*x1387))+(((0.550716)*x1390))+(((0.05)*x1389))+(((-1.0)*pp))+(((-0.05)*x1392))+((x1387*x1391))+((x1385*x1391))+(((-0.0014023)*x1382))+(((0.015445380936)*x1381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1393=cj3*cj3;
IkReal x1394=(cj3*sj3);
IkReal x1395=(py*sj0);
IkReal x1396=((0.279642)*sj3);
IkReal x1397=((0.035)*cj3);
IkReal x1398=(cj0*px);
IkReal x1399=((1.0)*pz);
CheckValue<IkReal> x1400 = IKatan2WithCheck(IkReal(((-0.01667142)+(((-0.028046)*pz))+(((-1.0)*x1395*x1399))+(((0.077876661836)*sj3))+(((0.01957494)*x1393))+(((0.00264648)*cj3))+(((-1.0)*x1398*x1399))+(((0.076974648164)*x1394)))),IkReal(((0.078824648164)+(((-0.076974648164)*x1393))+(((0.01957494)*x1394))+(((-0.00175)*cj3))+(((-0.0139821)*sj3))+(((-1.0)*pz*x1399)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1400.valid){
continue;
}
CheckValue<IkReal> x1401=IKPowWithIntegerCheck(IKsign(((-0.00070115)+(((-0.275358)*pz))+(((0.007842839532)*sj3))+(((-0.025)*x1395))+(((-0.025)*x1398))+(((-0.279642)*cj3*pz))+((x1395*x1397))+((x1395*x1396))+((x1396*x1398))+(((0.00098161)*cj3))+((x1397*x1398))+(((0.035)*pz*sj3)))),-1);
if(!x1401.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1400.value)+(((1.5707963267949)*(x1401.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1402=IKsin(j1);
IkReal x1403=IKcos(j1);
IkReal x1404=((0.279642)*sj3);
IkReal x1405=((0.035)*cj3);
IkReal x1406=(py*sj0);
IkReal x1407=((0.279642)*cj3);
IkReal x1408=(cj0*px);
IkReal x1409=((0.035)*sj3);
IkReal x1410=(pz*x1402);
IkReal x1411=(pz*x1403);
IkReal x1412=((0.550716)*x1402);
IkReal x1413=(x1403*x1408);
evalcond[0]=((-0.275358)+(((-1.0)*x1407))+x1411+x1409+(((0.028046)*x1402))+((x1402*x1406))+((x1402*x1408)));
evalcond[1]=((0.025)+(((-1.0)*x1404))+(((-1.0)*x1405))+((x1403*x1406))+x1413+(((0.028046)*x1403))+(((-1.0)*x1410)));
evalcond[2]=((((-0.275358)*x1403))+(((-0.025)*x1402))+((x1403*x1409))+pz+((x1402*x1405))+((x1402*x1404))+(((-1.0)*x1403*x1407)));
evalcond[3]=((-0.028046)+(((-1.0)*x1408))+(((-1.0)*x1406))+(((0.275358)*x1402))+(((-0.025)*x1403))+(((-1.0)*x1402*x1409))+((x1403*x1404))+((x1403*x1405))+((x1402*x1407)));
evalcond[4]=((0.002191041884)+(((0.550716)*x1411))+(((0.015445380936)*x1402))+(((-0.0014023)*x1403))+(((-1.0)*pp))+(((-0.056092)*x1406))+(((-0.056092)*x1408))+((x1406*x1412))+(((-0.05)*x1413))+(((0.05)*x1410))+((x1408*x1412))+(((-0.05)*x1403*x1406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1414=cj3*cj3;
IkReal x1415=((0.035)*sj3);
IkReal x1416=(cj0*px);
IkReal x1417=(cj3*sj3);
IkReal x1418=(py*sj0);
IkReal x1419=((0.279642)*cj3);
IkReal x1420=((1.0)*pz);
CheckValue<IkReal> x1421 = IKatan2WithCheck(IkReal(((-0.077047028164)+(((0.01927506)*sj3))+(((0.01957494)*x1417))+(((-0.154003323672)*cj3))+(pz*pz)+(((-0.076974648164)*x1414)))),IkReal(((0.01667142)+(((-0.028046)*pz))+(((-1.0)*x1416*x1420))+(((-0.077876661836)*sj3))+(((-1.0)*x1418*x1420))+(((-0.076974648164)*x1417))+(((-0.01957494)*x1414))+(((-0.00264648)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1421.valid){
continue;
}
CheckValue<IkReal> x1422=IKPowWithIntegerCheck(IKsign(((-0.007722690468)+((x1415*x1418))+((x1415*x1416))+(((0.025)*pz))+(((-0.007842839532)*cj3))+(((0.00098161)*sj3))+(((-1.0)*x1416*x1419))+(((-0.279642)*pz*sj3))+(((-0.275358)*x1416))+(((-0.275358)*x1418))+(((-1.0)*x1418*x1419))+(((-0.035)*cj3*pz)))),-1);
if(!x1422.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1421.value)+(((1.5707963267949)*(x1422.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1423=IKsin(j1);
IkReal x1424=IKcos(j1);
IkReal x1425=((0.279642)*sj3);
IkReal x1426=((0.035)*cj3);
IkReal x1427=(py*sj0);
IkReal x1428=((0.279642)*cj3);
IkReal x1429=(cj0*px);
IkReal x1430=((0.035)*sj3);
IkReal x1431=(pz*x1423);
IkReal x1432=(pz*x1424);
IkReal x1433=((0.550716)*x1423);
IkReal x1434=(x1424*x1429);
evalcond[0]=((-0.275358)+((x1423*x1429))+((x1423*x1427))+(((0.028046)*x1423))+x1432+x1430+(((-1.0)*x1428)));
evalcond[1]=((0.025)+((x1424*x1427))+(((-1.0)*x1431))+(((0.028046)*x1424))+x1434+(((-1.0)*x1426))+(((-1.0)*x1425)));
evalcond[2]=((((-0.025)*x1423))+((x1423*x1426))+((x1423*x1425))+(((-1.0)*x1424*x1428))+((x1424*x1430))+pz+(((-0.275358)*x1424)));
evalcond[3]=((-0.028046)+((x1424*x1425))+((x1424*x1426))+(((-0.025)*x1424))+((x1423*x1428))+(((-1.0)*x1429))+(((-1.0)*x1427))+(((0.275358)*x1423))+(((-1.0)*x1423*x1430)));
evalcond[4]=((0.002191041884)+((x1429*x1433))+(((-0.056092)*x1429))+(((-0.056092)*x1427))+(((0.550716)*x1432))+((x1427*x1433))+(((-1.0)*pp))+(((0.05)*x1431))+(((-0.05)*x1434))+(((-0.05)*x1424*x1427))+(((0.015445380936)*x1423))+(((-0.0014023)*x1424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[3];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1435=cj3*cj3;
IkReal x1436=(cj3*sj3);
IkReal x1437=((284.880960870407)*sj3);
IkReal x1438=(cj0*px);
IkReal x1439=(py*sj0);
IkReal x1440=((35.6557084789275)*cj3);
IkReal x1441=(cj3*pz);
IkReal x1442=((0.279642)*sj3);
IkReal x1443=((0.035)*cj3);
IkReal x1444=(pz*sj3);
j1eval[0]=((-1.28571428571429)+(((-45.843053758621)*x1438))+(((-45.843053758621)*x1439))+((x1438*x1440))+((x1439*x1440))+(((284.880960870407)*x1441))+cj3+(((-35.6557084789275)*x1444))+(((280.516702152586)*pz))+((x1437*x1439))+((x1437*x1438))+(((7.98977142857143)*sj3)));
j1eval[1]=IKsign(((-0.00126207)+((x1438*x1442))+((x1438*x1443))+((x1439*x1442))+((x1439*x1443))+(((0.007842839532)*sj3))+(((-0.035)*x1444))+(((0.275358)*pz))+(((0.00098161)*cj3))+(((-0.045)*x1438))+(((-0.045)*x1439))+(((0.279642)*x1441))));
j1eval[2]=((IKabs(((-0.080224648164)+(((0.076974648164)*x1435))+(((0.02516778)*sj3))+(pz*pz)+(((-0.01957494)*x1436))+(((0.00315)*cj3)))))+(IKabs(((-0.02217858)+(((0.076974648164)*x1436))+(((0.01957494)*x1435))+((pz*x1439))+((pz*x1438))+(((-0.00294636)*cj3))+(((0.078576661836)*sj3))+(((0.028046)*pz))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1445=(cj0*px);
IkReal x1446=((0.035)*sj3);
IkReal x1447=(py*sj0);
IkReal x1448=(pz*sj3);
IkReal x1449=((35.6557084789275)*sj3);
IkReal x1450=((284.880960870407)*cj3);
IkReal x1451=(cj3*pz);
IkReal x1452=((0.279642)*cj3);
j1eval[0]=((-7.86737142857143)+((x1445*x1449))+(((-280.516702152586)*x1447))+(((-280.516702152586)*x1445))+(((-1.0)*x1447*x1450))+sj3+(((284.880960870407)*x1448))+(((-1.0)*x1445*x1450))+(((-45.843053758621)*pz))+(((35.6557084789275)*x1451))+(((-7.98977142857143)*cj3))+((x1447*x1449)));
j1eval[1]=IKsign(((-0.007722690468)+((x1445*x1446))+(((-0.045)*pz))+(((-1.0)*x1447*x1452))+(((-0.007842839532)*cj3))+(((-1.0)*x1445*x1452))+(((0.00098161)*sj3))+(((0.035)*x1451))+(((-0.275358)*x1447))+(((-0.275358)*x1445))+((x1446*x1447))+(((0.279642)*x1448))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
IkReal x1453=((284.880960870407)*sj3);
IkReal x1454=(cj0*px);
IkReal x1455=(py*sj0);
IkReal x1456=(cj3*pz);
IkReal x1457=((35.6557084789275)*cj3);
IkReal x1458=((0.279642)*sj3);
IkReal x1459=((0.035)*cj3);
IkReal x1460=(pz*sj3);
j1eval[0]=((1.28571428571429)+(((-7.98977142857143)*sj3))+(((-1.0)*x1455*x1457))+(((-1.0)*x1454*x1457))+(((45.843053758621)*x1454))+(((45.843053758621)*x1455))+(((-284.880960870407)*x1456))+(((-1.0)*x1453*x1455))+(((-1.0)*x1453*x1454))+(((-1.0)*cj3))+(((-280.516702152586)*pz))+(((35.6557084789275)*x1460)));
j1eval[1]=IKsign(((0.00126207)+(((-0.275358)*pz))+(((-1.0)*x1455*x1458))+(((-1.0)*x1455*x1459))+(((0.045)*x1455))+(((0.045)*x1454))+(((-1.0)*x1454*x1458))+(((-1.0)*x1454*x1459))+(((0.035)*x1460))+(((-0.00098161)*cj3))+(((-0.007842839532)*sj3))+(((-0.279642)*x1456))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j1]

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1461=cj0*cj0;
IkReal x1462=py*py;
IkReal x1463=cj3*cj3;
IkReal x1464=(cj3*sj3);
IkReal x1465=(py*sj0);
IkReal x1466=(cj0*px);
IkReal x1467=((0.279642)*sj3);
IkReal x1468=((0.035)*cj3);
IkReal x1469=((1.0)*pz);
CheckValue<IkReal> x1470=IKPowWithIntegerCheck(IKsign(((0.00126207)+(((-0.275358)*pz))+(((-0.279642)*cj3*pz))+(((0.045)*x1465))+(((0.045)*x1466))+(((-1.0)*x1466*x1468))+(((-1.0)*x1466*x1467))+(((-0.00098161)*cj3))+(((-0.007842839532)*sj3))+(((-1.0)*x1465*x1467))+(((-1.0)*x1465*x1468))+(((0.035)*pz*sj3)))),-1);
if(!x1470.valid){
continue;
}
CheckValue<IkReal> x1471 = IKatan2WithCheck(IkReal(((0.02217858)+(((-0.028046)*pz))+(((-0.076974648164)*x1464))+(((-1.0)*x1466*x1469))+(((0.00294636)*cj3))+(((-0.078576661836)*sj3))+(((-0.01957494)*x1463))+(((-1.0)*x1465*x1469)))),IkReal(((-0.076260450048)+(((0.01927506)*sj3))+(((-0.154003323672)*cj3))+(((0.056092)*x1466))+(((0.056092)*x1465))+((x1461*(px*px)))+(((0.01957494)*x1464))+(((-0.076974648164)*x1463))+(((2.0)*x1465*x1466))+x1462+(((-1.0)*x1461*x1462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1471.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1470.value)))+(x1471.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1472=IKsin(j1);
IkReal x1473=IKcos(j1);
IkReal x1474=((0.279642)*sj3);
IkReal x1475=(cj0*px);
IkReal x1476=((0.035)*cj3);
IkReal x1477=(py*sj0);
IkReal x1478=((0.279642)*cj3);
IkReal x1479=((0.035)*sj3);
IkReal x1480=((1.0)*x1473);
IkReal x1481=((0.09)*x1473);
IkReal x1482=(pz*x1472);
IkReal x1483=(pz*x1473);
IkReal x1484=((0.550716)*x1472);
evalcond[0]=((-0.275358)+((x1472*x1475))+((x1472*x1477))+(((0.028046)*x1472))+x1479+x1483+(((-1.0)*x1478)));
evalcond[1]=((0.045)+(((-0.028046)*x1473))+(((-1.0)*x1475*x1480))+x1482+(((-1.0)*x1474))+(((-1.0)*x1476))+(((-1.0)*x1477*x1480)));
evalcond[2]=(((x1473*x1479))+pz+(((-0.275358)*x1473))+(((0.045)*x1472))+(((-1.0)*x1472*x1474))+(((-1.0)*x1472*x1476))+(((-1.0)*x1473*x1478)));
evalcond[3]=((-0.028046)+(((-1.0)*x1475))+(((-1.0)*x1477))+((x1472*x1478))+(((0.275358)*x1472))+(((0.045)*x1473))+(((-1.0)*x1472*x1479))+(((-1.0)*x1473*x1474))+(((-1.0)*x1473*x1476)));
evalcond[4]=((0.000791041884)+(((0.550716)*x1483))+((x1477*x1481))+((x1477*x1484))+(((-0.09)*x1482))+(((-1.0)*pp))+(((-0.056092)*x1477))+(((-0.056092)*x1475))+(((0.015445380936)*x1472))+(((0.00252414)*x1473))+((x1475*x1484))+((x1475*x1481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1485=cj3*cj3;
IkReal x1486=((0.035)*sj3);
IkReal x1487=(cj0*px);
IkReal x1488=(cj3*sj3);
IkReal x1489=(py*sj0);
IkReal x1490=((0.279642)*cj3);
IkReal x1491=((1.0)*pz);
CheckValue<IkReal> x1492 = IKatan2WithCheck(IkReal(((-0.077047028164)+(((0.01927506)*sj3))+(((-0.154003323672)*cj3))+(((0.01957494)*x1488))+(((-0.076974648164)*x1485))+(pz*pz))),IkReal(((-0.02217858)+(((-0.028046)*pz))+(((-1.0)*x1487*x1491))+(((0.076974648164)*x1488))+(((0.01957494)*x1485))+(((-0.00294636)*cj3))+(((0.078576661836)*sj3))+(((-1.0)*x1489*x1491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1492.valid){
continue;
}
CheckValue<IkReal> x1493=IKPowWithIntegerCheck(IKsign(((-0.007722690468)+(((-0.275358)*x1489))+(((-0.275358)*x1487))+(((-0.045)*pz))+(((0.279642)*pz*sj3))+(((-1.0)*x1487*x1490))+(((-0.007842839532)*cj3))+(((0.00098161)*sj3))+((x1486*x1489))+((x1486*x1487))+(((0.035)*cj3*pz))+(((-1.0)*x1489*x1490)))),-1);
if(!x1493.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1492.value)+(((1.5707963267949)*(x1493.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1494=IKsin(j1);
IkReal x1495=IKcos(j1);
IkReal x1496=((0.279642)*sj3);
IkReal x1497=(cj0*px);
IkReal x1498=((0.035)*cj3);
IkReal x1499=(py*sj0);
IkReal x1500=((0.279642)*cj3);
IkReal x1501=((0.035)*sj3);
IkReal x1502=((1.0)*x1495);
IkReal x1503=((0.09)*x1495);
IkReal x1504=(pz*x1494);
IkReal x1505=(pz*x1495);
IkReal x1506=((0.550716)*x1494);
evalcond[0]=((-0.275358)+(((-1.0)*x1500))+((x1494*x1499))+((x1494*x1497))+x1501+x1505+(((0.028046)*x1494)));
evalcond[1]=((0.045)+(((-1.0)*x1499*x1502))+(((-1.0)*x1498))+(((-1.0)*x1496))+x1504+(((-0.028046)*x1495))+(((-1.0)*x1497*x1502)));
evalcond[2]=((((0.045)*x1494))+(((-1.0)*x1494*x1498))+(((-1.0)*x1494*x1496))+((x1495*x1501))+pz+(((-1.0)*x1495*x1500))+(((-0.275358)*x1495)));
evalcond[3]=((-0.028046)+(((0.045)*x1495))+((x1494*x1500))+(((-1.0)*x1495*x1496))+(((-1.0)*x1495*x1498))+(((0.275358)*x1494))+(((-1.0)*x1494*x1501))+(((-1.0)*x1499))+(((-1.0)*x1497)));
evalcond[4]=((0.000791041884)+(((-0.09)*x1504))+(((0.015445380936)*x1494))+((x1499*x1506))+((x1499*x1503))+(((-0.056092)*x1497))+(((-0.056092)*x1499))+(((0.00252414)*x1495))+(((-1.0)*pp))+((x1497*x1503))+((x1497*x1506))+(((0.550716)*x1505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1507=cj3*cj3;
IkReal x1508=(cj3*sj3);
IkReal x1509=(py*sj0);
IkReal x1510=((0.279642)*sj3);
IkReal x1511=((0.035)*cj3);
IkReal x1512=(cj0*px);
CheckValue<IkReal> x1513 = IKatan2WithCheck(IkReal(((-0.02217858)+(((0.01957494)*x1507))+(((0.076974648164)*x1508))+(((-0.00294636)*cj3))+(((0.078576661836)*sj3))+(((0.028046)*pz))+((pz*x1509))+((pz*x1512)))),IkReal(((-0.080224648164)+(((0.076974648164)*x1507))+(((0.02516778)*sj3))+(pz*pz)+(((-0.01957494)*x1508))+(((0.00315)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1513.valid){
continue;
}
CheckValue<IkReal> x1514=IKPowWithIntegerCheck(IKsign(((-0.00126207)+((x1509*x1511))+((x1509*x1510))+((x1510*x1512))+(((0.007842839532)*sj3))+(((-0.045)*x1509))+(((-0.045)*x1512))+(((-0.035)*pz*sj3))+(((0.275358)*pz))+(((0.00098161)*cj3))+((x1511*x1512))+(((0.279642)*cj3*pz)))),-1);
if(!x1514.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1513.value)+(((1.5707963267949)*(x1514.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1515=IKsin(j1);
IkReal x1516=IKcos(j1);
IkReal x1517=((0.279642)*sj3);
IkReal x1518=(cj0*px);
IkReal x1519=((0.035)*cj3);
IkReal x1520=(py*sj0);
IkReal x1521=((0.279642)*cj3);
IkReal x1522=((0.035)*sj3);
IkReal x1523=((1.0)*x1516);
IkReal x1524=((0.09)*x1516);
IkReal x1525=(pz*x1515);
IkReal x1526=(pz*x1516);
IkReal x1527=((0.550716)*x1515);
evalcond[0]=((-0.275358)+(((-1.0)*x1521))+x1526+x1522+((x1515*x1518))+(((0.028046)*x1515))+((x1515*x1520)));
evalcond[1]=((0.045)+(((-0.028046)*x1516))+(((-1.0)*x1519))+(((-1.0)*x1517))+(((-1.0)*x1518*x1523))+x1525+(((-1.0)*x1520*x1523)));
evalcond[2]=((((-1.0)*x1515*x1517))+(((-1.0)*x1515*x1519))+(((-0.275358)*x1516))+pz+((x1516*x1522))+(((-1.0)*x1516*x1521))+(((0.045)*x1515)));
evalcond[3]=((-0.028046)+(((-1.0)*x1516*x1519))+(((-1.0)*x1516*x1517))+(((-1.0)*x1518))+(((-1.0)*x1515*x1522))+(((0.275358)*x1515))+((x1515*x1521))+(((-1.0)*x1520))+(((0.045)*x1516)));
evalcond[4]=((0.000791041884)+((x1518*x1527))+((x1518*x1524))+(((0.00252414)*x1516))+((x1520*x1524))+((x1520*x1527))+(((-1.0)*pp))+(((-0.056092)*x1520))+(((-0.056092)*x1518))+(((0.550716)*x1526))+(((0.015445380936)*x1515))+(((-0.09)*x1525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1528=cj0*cj0;
IkReal x1529=px*px;
IkReal x1530=py*py;
IkReal x1531=(cj2*pz);
IkReal x1532=(cj2*cj3);
IkReal x1533=((0.275358)*cj2);
IkReal x1534=(cj0*px);
IkReal x1535=((0.035)*sj3);
IkReal x1536=(cj0*sj2);
IkReal x1537=(py*sj0);
IkReal x1538=((0.01)*cj2);
IkReal x1539=((0.056092)*cj2);
IkReal x1540=((1.0)*x1530);
IkReal x1541=(cj2*x1528);
IkReal x1542=(px*sj0*sj2);
IkReal x1543=(px*py*sj2);
CheckValue<IkReal> x1544 = IKatan2WithCheck(IkReal(((((-0.00098161)*cj2*sj3))+((py*pz*x1536))+(((0.279642)*x1532*x1534))+(((0.279642)*x1532*x1537))+(((-1.0)*pz*x1542))+(((-1.0)*cj2*x1534*x1535))+(((0.007722690468)*cj2))+((x1533*x1534))+((x1533*x1537))+(((-0.01)*x1531))+(((-1.0)*cj2*x1535*x1537))+(((0.007842839532)*x1532)))),IkReal(((((-1.0)*x1531*x1535))+(((0.275358)*x1531))+(((-2.0)*x1528*x1543))+(((-1.0)*sj0*x1536*x1540))+((x1537*x1538))+(((0.00028046)*cj2))+x1543+(((-0.028046)*py*x1536))+(((0.279642)*cj3*x1531))+((x1534*x1538))+((sj0*x1529*x1536))+(((0.028046)*x1542)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1544.valid){
continue;
}
CheckValue<IkReal> x1545=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1540*x1541))+((cj2*x1530))+((x1537*x1539))+((x1529*x1541))+(((2.0)*cj2*x1534*x1537))+(((0.000786578116)*cj2))+((x1534*x1539))+((pz*x1531)))),-1);
if(!x1545.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1544.value)+(((1.5707963267949)*(x1545.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1546=IKsin(j1);
IkReal x1547=IKcos(j1);
IkReal x1548=(px*sj2);
IkReal x1549=((0.035)*sj3);
IkReal x1550=((0.035)*cj3);
IkReal x1551=((0.279642)*sj3);
IkReal x1552=(cj2*py);
IkReal x1553=(py*sj0);
IkReal x1554=((1.0)*cj0);
IkReal x1555=(cj2*px);
IkReal x1556=((0.279642)*cj3);
IkReal x1557=(cj0*px);
IkReal x1558=(cj0*x1547);
IkReal x1559=(sj2*x1547);
IkReal x1560=(sj0*x1547);
IkReal x1561=(sj2*x1546);
IkReal x1562=(pz*x1547);
IkReal x1563=(pz*x1546);
IkReal x1564=((0.550716)*x1546);
evalcond[0]=((-0.275358)+x1562+x1549+((x1546*x1557))+((x1546*x1553))+(((-1.0)*x1556))+(((0.028046)*x1546)));
evalcond[1]=((((0.01)*cj2))+(((-1.0)*x1552*x1560))+(((-0.028046)*cj2*x1547))+((cj2*x1563))+((sj0*x1548))+(((-1.0)*x1547*x1554*x1555))+(((-1.0)*py*sj2*x1554)));
evalcond[2]=(((x1550*x1561))+(((-0.035)*x1561))+((x1547*x1549))+(((-0.275358)*x1547))+(((0.01)*x1546))+pz+(((-1.0)*x1547*x1556))+((x1551*x1561)));
evalcond[3]=((0.035)+((x1553*x1559))+(((-1.0)*x1552*x1554))+(((-1.0)*pz*x1561))+(((-0.01)*sj2))+((sj0*x1555))+((x1548*x1558))+(((-1.0)*x1551))+(((-1.0)*x1550))+(((0.028046)*x1559)));
evalcond[4]=((-0.028046)+((x1551*x1559))+(((-0.035)*x1559))+(((0.275358)*x1546))+(((-1.0)*x1553))+(((-1.0)*x1546*x1549))+((x1550*x1559))+(((-1.0)*px*x1554))+(((0.01)*x1547))+((x1546*x1556)));
evalcond[5]=((0.001491041884)+(((-0.02)*x1563))+(((-0.07)*x1553*x1559))+((x1553*x1564))+(((0.07)*pz*x1561))+(((-0.056092)*x1553))+(((-0.056092)*x1557))+(((0.00056092)*x1547))+(((-1.0)*pp))+((x1557*x1564))+(((0.0007)*sj2))+(((0.015445380936)*x1546))+(((0.550716)*x1562))+(((0.07)*cj0*x1552))+(((0.02)*x1547*x1557))+(((0.02)*x1547*x1553))+(((-0.07)*x1548*x1558))+(((-0.07)*sj0*x1555))+(((-0.00196322)*x1559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1565=cj0*cj0;
IkReal x1566=py*py;
IkReal x1567=cj3*cj3;
IkReal x1568=(cj0*px);
IkReal x1569=(py*sj0);
IkReal x1570=((0.035)*sj2);
IkReal x1571=((0.00098161)*sj2);
IkReal x1572=(sj2*sj3);
IkReal x1573=((1.0)*pz);
CheckValue<IkReal> x1574=IKPowWithIntegerCheck(IKsign(((0.00028046)+(((0.007842839532)*x1572))+(((-0.275358)*pz))+(((-0.279642)*cj3*pz))+((cj3*x1569*x1570))+((cj3*x1571))+(((0.01)*x1569))+(((0.01)*x1568))+(((0.279642)*x1568*x1572))+(((-1.0)*x1568*x1570))+(((-1.0)*x1569*x1570))+(((0.279642)*x1569*x1572))+(((-1.0)*x1571))+(((0.035)*pz*sj3))+((cj3*x1568*x1570)))),-1);
if(!x1574.valid){
continue;
}
CheckValue<IkReal> x1575 = IKatan2WithCheck(IkReal(((0.00275358)+(((-0.028046)*pz))+(((0.01957494)*sj2*x1567))+(((0.00279642)*cj3))+(((-0.00035)*sj3))+(((0.076974648164)*cj3*x1572))+(((-1.0)*x1568*x1573))+(((-1.0)*x1569*x1573))+(((-0.019425)*sj2))+(((0.078226661836)*x1572))+(((-0.00014994)*cj3*sj2)))),IkReal(((-0.076260450048)+(((0.01957494)*cj3*sj3))+(((0.01927506)*sj3))+(((0.056092)*x1569))+(((0.056092)*x1568))+(((-0.154003323672)*cj3))+((x1565*(px*px)))+(((-0.076974648164)*x1567))+x1566+(((2.0)*x1568*x1569))+(((-1.0)*x1565*x1566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1575.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1574.value)))+(x1575.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1576=IKsin(j1);
IkReal x1577=IKcos(j1);
IkReal x1578=(px*sj2);
IkReal x1579=((0.035)*sj3);
IkReal x1580=((0.035)*cj3);
IkReal x1581=((0.279642)*sj3);
IkReal x1582=(cj2*py);
IkReal x1583=(py*sj0);
IkReal x1584=((1.0)*cj0);
IkReal x1585=(cj2*px);
IkReal x1586=((0.279642)*cj3);
IkReal x1587=(cj0*px);
IkReal x1588=(cj0*x1577);
IkReal x1589=(sj2*x1577);
IkReal x1590=(sj0*x1577);
IkReal x1591=(sj2*x1576);
IkReal x1592=(pz*x1577);
IkReal x1593=(pz*x1576);
IkReal x1594=((0.550716)*x1576);
evalcond[0]=((-0.275358)+(((-1.0)*x1586))+(((0.028046)*x1576))+((x1576*x1583))+((x1576*x1587))+x1579+x1592);
evalcond[1]=((((-1.0)*x1582*x1590))+(((0.01)*cj2))+((sj0*x1578))+(((-0.028046)*cj2*x1577))+((cj2*x1593))+(((-1.0)*py*sj2*x1584))+(((-1.0)*x1577*x1584*x1585)));
evalcond[2]=((((-1.0)*x1577*x1586))+(((-0.035)*x1591))+(((-0.275358)*x1577))+((x1577*x1579))+(((0.01)*x1576))+((x1580*x1591))+pz+((x1581*x1591)));
evalcond[3]=((0.035)+(((-1.0)*x1580))+(((-1.0)*x1581))+(((0.028046)*x1589))+((x1583*x1589))+(((-0.01)*sj2))+((sj0*x1585))+(((-1.0)*pz*x1591))+((x1578*x1588))+(((-1.0)*x1582*x1584)));
evalcond[4]=((-0.028046)+(((-1.0)*x1576*x1579))+(((0.275358)*x1576))+((x1576*x1586))+(((-0.035)*x1589))+(((0.01)*x1577))+((x1580*x1589))+(((-1.0)*x1583))+(((-1.0)*px*x1584))+((x1581*x1589)));
evalcond[5]=((0.001491041884)+((x1587*x1594))+(((0.02)*x1577*x1583))+(((0.02)*x1577*x1587))+(((-0.00196322)*x1589))+(((-0.02)*x1593))+(((-0.056092)*x1587))+(((-0.056092)*x1583))+(((-0.07)*x1583*x1589))+(((0.00056092)*x1577))+(((0.07)*cj0*x1582))+((x1583*x1594))+(((-1.0)*pp))+(((0.07)*pz*x1591))+(((0.550716)*x1592))+(((-0.07)*sj0*x1585))+(((-0.07)*x1578*x1588))+(((0.0007)*sj2))+(((0.015445380936)*x1576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1595=cj3*cj3;
IkReal x1596=((0.035)*sj3);
IkReal x1597=(cj0*px);
IkReal x1598=(py*sj0);
IkReal x1599=((0.279642)*cj3);
IkReal x1600=(cj3*sj2);
IkReal x1601=(sj2*sj3);
IkReal x1602=((0.035)*pz);
IkReal x1603=((1.0)*pz);
CheckValue<IkReal> x1604=IKPowWithIntegerCheck(IKsign(((-0.007722690468)+((x1596*x1598))+((x1596*x1597))+((sj2*x1602))+(((-0.275358)*x1598))+(((-0.275358)*x1597))+(((-0.007842839532)*cj3))+(((0.00098161)*sj3))+(((-0.279642)*pz*x1601))+(((-1.0)*x1600*x1602))+(((-1.0)*x1598*x1599))+(((-1.0)*x1597*x1599))+(((-0.01)*pz)))),-1);
if(!x1604.valid){
continue;
}
CheckValue<IkReal> x1605 = IKatan2WithCheck(IkReal(((-0.077047028164)+(((0.01957494)*cj3*sj3))+(((0.01927506)*sj3))+(((-0.154003323672)*cj3))+(((-0.076974648164)*x1595))+(pz*pz))),IkReal(((-0.00275358)+(((-0.028046)*pz))+(((0.00035)*sj3))+(((0.019425)*sj2))+(((-0.01957494)*sj2*x1595))+(((-0.078226661836)*x1601))+(((-0.076974648164)*sj3*x1600))+(((-0.00279642)*cj3))+(((-1.0)*x1597*x1603))+(((0.00014994)*x1600))+(((-1.0)*x1598*x1603)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1605.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1604.value)))+(x1605.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1606=IKsin(j1);
IkReal x1607=IKcos(j1);
IkReal x1608=(px*sj2);
IkReal x1609=((0.035)*sj3);
IkReal x1610=((0.035)*cj3);
IkReal x1611=((0.279642)*sj3);
IkReal x1612=(cj2*py);
IkReal x1613=(py*sj0);
IkReal x1614=((1.0)*cj0);
IkReal x1615=(cj2*px);
IkReal x1616=((0.279642)*cj3);
IkReal x1617=(cj0*px);
IkReal x1618=(cj0*x1607);
IkReal x1619=(sj2*x1607);
IkReal x1620=(sj0*x1607);
IkReal x1621=(sj2*x1606);
IkReal x1622=(pz*x1607);
IkReal x1623=(pz*x1606);
IkReal x1624=((0.550716)*x1606);
evalcond[0]=((-0.275358)+x1622+x1609+(((-1.0)*x1616))+(((0.028046)*x1606))+((x1606*x1617))+((x1606*x1613)));
evalcond[1]=((((0.01)*cj2))+(((-1.0)*x1612*x1620))+((sj0*x1608))+(((-1.0)*x1607*x1614*x1615))+((cj2*x1623))+(((-1.0)*py*sj2*x1614))+(((-0.028046)*cj2*x1607)));
evalcond[2]=((((-0.035)*x1621))+(((0.01)*x1606))+(((-0.275358)*x1607))+((x1607*x1609))+pz+(((-1.0)*x1607*x1616))+((x1610*x1621))+((x1611*x1621)));
evalcond[3]=((0.035)+(((-1.0)*x1611))+(((-1.0)*x1610))+((sj0*x1615))+((x1608*x1618))+(((-0.01)*sj2))+(((0.028046)*x1619))+(((-1.0)*pz*x1621))+(((-1.0)*x1612*x1614))+((x1613*x1619)));
evalcond[4]=((-0.028046)+(((-0.035)*x1619))+(((-1.0)*x1613))+(((0.01)*x1607))+(((0.275358)*x1606))+(((-1.0)*px*x1614))+(((-1.0)*x1606*x1609))+((x1606*x1616))+((x1610*x1619))+((x1611*x1619)));
evalcond[5]=((0.001491041884)+(((0.07)*pz*x1621))+(((0.02)*x1607*x1617))+(((0.02)*x1607*x1613))+(((0.015445380936)*x1606))+(((-0.07)*sj0*x1615))+((x1617*x1624))+(((-0.056092)*x1617))+(((-0.056092)*x1613))+(((-1.0)*pp))+(((-0.07)*x1613*x1619))+(((-0.07)*x1608*x1618))+(((0.0007)*sj2))+(((0.07)*cj0*x1612))+(((-0.00196322)*x1619))+(((-0.02)*x1623))+(((0.550716)*x1622))+((x1613*x1624))+(((0.00056092)*x1607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x205=(cj2*sj0);
IkReal x206=(cj3*sj1);
IkReal x207=((1.0)*cj3);
IkReal x208=((1.0)*cj2);
IkReal x209=(cj1*sj2);
IkReal x210=(cj0*cj2);
IkReal x211=((1.0)*sj2);
IkReal x212=(sj1*sj3);
IkReal x213=((((-1.0)*sj0*x211))+((cj1*x210)));
IkReal x214=(((cj1*x205))+((cj0*sj2)));
IkReal x215=((((-1.0)*x207*x209))+x212);
IkReal x216=(((cj1*sj3))+((sj2*x206)));
IkReal x217=(((sj3*x209))+x206);
IkReal x218=((((-1.0)*x211*x212))+((cj1*cj3)));
IkReal x219=(((cj3*x210))+((sj0*x215)));
IkReal x220=(((cj0*x215))+(((-1.0)*x205*x207)));
IkReal x221=(((cj0*x217))+((sj3*x205)));
IkReal x222=(((sj0*x217))+(((-1.0)*cj0*sj3*x208)));
new_r00=((((-1.0)*r20*sj1*x208))+((r00*x213))+((r10*x214)));
new_r01=(((r11*x214))+(((-1.0)*r21*sj1*x208))+((r01*x213)));
new_r02=(((r12*x214))+(((-1.0)*r22*sj1*x208))+((r02*x213)));
new_r10=(((r00*x220))+((r10*x219))+((r20*x216)));
new_r11=(((r21*x216))+((r01*x220))+((r11*x219)));
new_r12=(((r12*x219))+((r22*x216))+((r02*x220)));
new_r20=(((r00*x221))+((r10*x222))+((r20*x218)));
new_r21=(((r21*x218))+((r01*x221))+((r11*x222)));
new_r22=(((r12*x222))+((r22*x218))+((r02*x221)));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
sj5array[0]=new_r22;
if( sj5array[0] >= -1-IKFAST_SINCOS_THRESH && sj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKasin(sj5array[0]);
    cj5array[0] = IKcos(j5array[0]);
    sj5array[1] = sj5array[0];
    j5array[1] = j5array[0] > 0 ? (IKPI-j5array[0]) : (-IKPI-j5array[0]);
    cj5array[1] = -cj5array[0];
}
else if( isnan(sj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[3];
j4eval[0]=cj5;
j4eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j4eval[2]=IKsign(cj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj5;
j4eval[1]=new_r12;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j6mul = 1;
j6=0;
j4mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j6mul = 1;
j6=0;
j4mul=1.0;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(new_r01, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x223=new_r22*new_r22;
IkReal x224=((16.0)*new_r10);
IkReal x225=((16.0)*new_r01);
IkReal x226=((16.0)*new_r00);
IkReal x227=(new_r11*new_r22);
IkReal x228=((8.0)*new_r00);
IkReal x229=(x223*x224);
IkReal x230=(x223*x225);
j4eval[0]=((IKabs((x229+(((-1.0)*x224)))))+(IKabs(((((-1.0)*x230))+x225)))+(IKabs(((((-32.0)*new_r11*x223))+((new_r22*x226))+(((16.0)*new_r11)))))+(IKabs(((((32.0)*new_r00))+(((-1.0)*x223*x226))+(((-16.0)*x227)))))+(IKabs((x230+(((-1.0)*x225)))))+(IKabs((x224+(((-1.0)*x229)))))+(IKabs((((new_r22*x228))+(((-8.0)*new_r11)))))+(IKabs(((((-8.0)*x227))+((x223*x228))))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j6]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j4evalpoly[1];
IkReal x231=new_r22*new_r22;
IkReal x232=((16.0)*new_r01);
IkReal x233=(new_r00*new_r22);
IkReal x234=(x231*x232);
IkReal x235=((((8.0)*x233))+(((-8.0)*new_r11)));
op[0]=x235;
op[1]=((((-1.0)*x232))+x234);
op[2]=((((16.0)*x233))+(((16.0)*new_r11))+(((-32.0)*new_r11*x231)));
op[3]=((((-1.0)*x234))+x232);
op[4]=x235;
polyroots4(op,zeror,numroots);
IkReal j4array[4], cj4array[4], sj4array[4], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[4]={true,true,true,true};
_nj4 = 4;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x236=new_r22*new_r22;
IkReal x237=((16.0)*new_r10);
IkReal x238=(new_r11*new_r22);
IkReal x239=((8.0)*x238);
IkReal x240=(new_r00*x236);
IkReal x241=(x236*x237);
IkReal x242=((8.0)*x240);
j4evalpoly[0]=(((htj4*(((((-1.0)*x237))+x241))))+(((htj4*htj4*htj4)*((x237+(((-1.0)*x241))))))+(((htj4*htj4)*(((((32.0)*new_r00))+(((-16.0)*x240))+(((-16.0)*x238))))))+(((-1.0)*x239))+x242+(((htj4*htj4*htj4*htj4)*(((((-1.0)*x239))+x242)))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j6eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x243=new_r22*new_r22;
IkReal x244=cj4*cj4;
IkReal x245=(new_r22*sj4);
IkReal x246=((((-1.0)*x244))+(((-1.0)*x243))+((x243*x244)));
j6eval[0]=x246;
j6eval[1]=IKsign(x246);
j6eval[2]=((IKabs((((cj4*new_r01))+((new_r00*x245)))))+(IKabs(((((-1.0)*cj4*new_r00))+((new_r01*x245))))));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=new_r22;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=cj4;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x247=IKsin(j6);
IkReal x248=IKcos(j6);
evalcond[0]=(x247+new_r11);
evalcond[1]=((-1.0)*x247);
evalcond[2]=((-1.0)*x248);
evalcond[3]=((((-1.0)*x248))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x249=IKsin(j6);
IkReal x250=IKcos(j6);
evalcond[0]=((-1.0)*x249);
evalcond[1]=((-1.0)*x250);
evalcond[2]=(x249+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x251=new_r22*new_r22;
CheckValue<IkReal> x252=IKPowWithIntegerCheck(((-1.0)+x251),-1);
if(!x252.valid){
continue;
}
if(((x251*(x252.value))) < -0.00001)
continue;
IkReal gconst32=IKsqrt((x251*(x252.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj4+(((-1.0)*gconst32)))))+(IKabs(((-1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x253=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst32*gconst32))))) < -0.00001)
continue;
sj4=IKsqrt(((1.0)+(((-1.0)*(gconst32*gconst32)))));
cj4=gconst32;
if( (gconst32) < -1-IKFAST_SINCOS_THRESH || (gconst32) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=IKacos(gconst32);
CheckValue<IkReal> x254=IKPowWithIntegerCheck(((-1.0)+x253),-1);
if(!x254.valid){
continue;
}
if(((x253*(x254.value))) < -0.00001)
continue;
IkReal gconst32=IKsqrt((x253*(x254.value)));
j6eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst32*gconst32))))) < -0.00001)
continue;
CheckValue<IkReal> x255=IKPowWithIntegerCheck(gconst32,-1);
if(!x255.valid){
continue;
}
if( IKabs(((((-1.0)*gconst32*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst32*gconst32)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x255.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst32*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst32*gconst32))))))))))+IKsqr((new_r00*(x255.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*gconst32*new_r01))+(((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst32*gconst32))))))))), (new_r00*(x255.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x256=IKsin(j6);
IkReal x257=IKcos(j6);
IkReal x258=((1.0)*x257);
if((((1.0)+(((-1.0)*(gconst32*gconst32))))) < -0.00001)
continue;
IkReal x259=IKsqrt(((1.0)+(((-1.0)*(gconst32*gconst32)))));
evalcond[0]=((-1.0)*x256);
evalcond[1]=((-1.0)*x257);
evalcond[2]=(((gconst32*x256))+new_r01);
evalcond[3]=(new_r00+(((-1.0)*gconst32*x258)));
evalcond[4]=(((x256*x259))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x258*x259)));
evalcond[6]=(x256+((new_r11*x259))+((gconst32*new_r01)));
evalcond[7]=(((new_r10*x259))+((gconst32*new_r00))+(((-1.0)*x258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x260 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x260.valid){
continue;
}
CheckValue<IkReal> x261=IKPowWithIntegerCheck(IKsign(gconst32),-1);
if(!x261.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x260.value)+(((1.5707963267949)*(x261.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x262=IKsin(j6);
IkReal x263=IKcos(j6);
IkReal x264=((1.0)*x263);
if((((1.0)+(((-1.0)*(gconst32*gconst32))))) < -0.00001)
continue;
IkReal x265=IKsqrt(((1.0)+(((-1.0)*(gconst32*gconst32)))));
evalcond[0]=((-1.0)*x262);
evalcond[1]=((-1.0)*x263);
evalcond[2]=(new_r01+((gconst32*x262)));
evalcond[3]=((((-1.0)*gconst32*x264))+new_r00);
evalcond[4]=(((x262*x265))+new_r11);
evalcond[5]=(new_r10+(((-1.0)*x264*x265)));
evalcond[6]=(x262+((gconst32*new_r01))+((new_r11*x265)));
evalcond[7]=((((-1.0)*x264))+((new_r10*x265))+((gconst32*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x266=new_r22*new_r22;
CheckValue<IkReal> x267=IKPowWithIntegerCheck(((-1.0)+x266),-1);
if(!x267.valid){
continue;
}
if(((x266*(x267.value))) < -0.00001)
continue;
IkReal gconst32=IKsqrt((x266*(x267.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj4+(((-1.0)*gconst32)))))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x268=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst32*gconst32))))) < -0.00001)
continue;
sj4=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst32*gconst32)))))));
cj4=gconst32;
if( (gconst32) < -1-IKFAST_SINCOS_THRESH || (gconst32) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=((-1.0)*(IKacos(gconst32)));
CheckValue<IkReal> x269=IKPowWithIntegerCheck(((-1.0)+x268),-1);
if(!x269.valid){
continue;
}
if(((x268*(x269.value))) < -0.00001)
continue;
IkReal gconst32=IKsqrt((x268*(x269.value)));
j6eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst32*gconst32))))) < -0.00001)
continue;
CheckValue<IkReal> x270=IKPowWithIntegerCheck(gconst32,-1);
if(!x270.valid){
continue;
}
if( IKabs((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst32*gconst32))))))))+(((-1.0)*gconst32*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x270.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst32*gconst32))))))))+(((-1.0)*gconst32*new_r01))))+IKsqr((new_r00*(x270.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst32*gconst32))))))))+(((-1.0)*gconst32*new_r01))), (new_r00*(x270.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x271=IKsin(j6);
IkReal x272=IKcos(j6);
IkReal x273=((1.0)*x272);
if((((1.0)+(((-1.0)*(gconst32*gconst32))))) < -0.00001)
continue;
IkReal x274=IKsqrt(((1.0)+(((-1.0)*(gconst32*gconst32)))));
IkReal x275=((1.0)*x274);
evalcond[0]=((-1.0)*x271);
evalcond[1]=((-1.0)*x272);
evalcond[2]=(new_r01+((gconst32*x271)));
evalcond[3]=((((-1.0)*gconst32*x273))+new_r00);
evalcond[4]=(((x272*x274))+new_r10);
evalcond[5]=((((-1.0)*x271*x275))+new_r11);
evalcond[6]=(x271+(((-1.0)*new_r11*x275))+((gconst32*new_r01)));
evalcond[7]=((((-1.0)*new_r10*x275))+(((-1.0)*x273))+((gconst32*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x276 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x276.valid){
continue;
}
CheckValue<IkReal> x277=IKPowWithIntegerCheck(IKsign(gconst32),-1);
if(!x277.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x276.value)+(((1.5707963267949)*(x277.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x278=IKsin(j6);
IkReal x279=IKcos(j6);
IkReal x280=((1.0)*x279);
if((((1.0)+(((-1.0)*(gconst32*gconst32))))) < -0.00001)
continue;
IkReal x281=IKsqrt(((1.0)+(((-1.0)*(gconst32*gconst32)))));
IkReal x282=((1.0)*x281);
evalcond[0]=((-1.0)*x278);
evalcond[1]=((-1.0)*x279);
evalcond[2]=(new_r01+((gconst32*x278)));
evalcond[3]=(new_r00+(((-1.0)*gconst32*x280)));
evalcond[4]=(((x279*x281))+new_r10);
evalcond[5]=(new_r11+(((-1.0)*x278*x282)));
evalcond[6]=(x278+(((-1.0)*new_r11*x282))+((gconst32*new_r01)));
evalcond[7]=((((-1.0)*new_r10*x282))+(((-1.0)*x280))+((gconst32*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x283=new_r22*new_r22;
CheckValue<IkReal> x284=IKPowWithIntegerCheck(((-1.0)+x283),-1);
if(!x284.valid){
continue;
}
if(((x283*(x284.value))) < -0.00001)
continue;
IkReal gconst33=((-1.0)*(IKsqrt((x283*(x284.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs((cj4+(((-1.0)*gconst33)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x285=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst33*gconst33))))) < -0.00001)
continue;
sj4=IKsqrt(((1.0)+(((-1.0)*(gconst33*gconst33)))));
cj4=gconst33;
if( (gconst33) < -1-IKFAST_SINCOS_THRESH || (gconst33) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=IKacos(gconst33);
CheckValue<IkReal> x286=IKPowWithIntegerCheck(((-1.0)+x285),-1);
if(!x286.valid){
continue;
}
if(((x285*(x286.value))) < -0.00001)
continue;
IkReal gconst33=((-1.0)*(IKsqrt((x285*(x286.value)))));
j6eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst33*gconst33))))) < -0.00001)
continue;
CheckValue<IkReal> x287=IKPowWithIntegerCheck(gconst33,-1);
if(!x287.valid){
continue;
}
if( IKabs(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst33*gconst33))))))))+(((-1.0)*gconst33*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x287.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst33*gconst33))))))))+(((-1.0)*gconst33*new_r01))))+IKsqr((new_r00*(x287.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst33*gconst33))))))))+(((-1.0)*gconst33*new_r01))), (new_r00*(x287.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x288=IKsin(j6);
IkReal x289=IKcos(j6);
IkReal x290=((1.0)*x289);
if((((1.0)+(((-1.0)*(gconst33*gconst33))))) < -0.00001)
continue;
IkReal x291=IKsqrt(((1.0)+(((-1.0)*(gconst33*gconst33)))));
evalcond[0]=((-1.0)*x288);
evalcond[1]=((-1.0)*x289);
evalcond[2]=(new_r01+((gconst33*x288)));
evalcond[3]=((((-1.0)*gconst33*x290))+new_r00);
evalcond[4]=(new_r11+((x288*x291)));
evalcond[5]=((((-1.0)*x290*x291))+new_r10);
evalcond[6]=(((new_r11*x291))+((gconst33*new_r01))+x288);
evalcond[7]=((((-1.0)*x290))+((new_r10*x291))+((gconst33*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x292 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x292.valid){
continue;
}
CheckValue<IkReal> x293=IKPowWithIntegerCheck(IKsign(gconst33),-1);
if(!x293.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x292.value)+(((1.5707963267949)*(x293.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x294=IKsin(j6);
IkReal x295=IKcos(j6);
IkReal x296=((1.0)*x295);
if((((1.0)+(((-1.0)*(gconst33*gconst33))))) < -0.00001)
continue;
IkReal x297=IKsqrt(((1.0)+(((-1.0)*(gconst33*gconst33)))));
evalcond[0]=((-1.0)*x294);
evalcond[1]=((-1.0)*x295);
evalcond[2]=(((gconst33*x294))+new_r01);
evalcond[3]=((((-1.0)*gconst33*x296))+new_r00);
evalcond[4]=(((x294*x297))+new_r11);
evalcond[5]=((((-1.0)*x296*x297))+new_r10);
evalcond[6]=(((new_r11*x297))+((gconst33*new_r01))+x294);
evalcond[7]=((((-1.0)*x296))+((new_r10*x297))+((gconst33*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x298=new_r22*new_r22;
CheckValue<IkReal> x299=IKPowWithIntegerCheck(((-1.0)+x298),-1);
if(!x299.valid){
continue;
}
if(((x298*(x299.value))) < -0.00001)
continue;
IkReal gconst33=((-1.0)*(IKsqrt((x298*(x299.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj4+(((-1.0)*gconst33)))))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
IkReal x300=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst33*gconst33))))) < -0.00001)
continue;
sj4=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst33*gconst33)))))));
cj4=gconst33;
if( (gconst33) < -1-IKFAST_SINCOS_THRESH || (gconst33) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=((-1.0)*(IKacos(gconst33)));
CheckValue<IkReal> x301=IKPowWithIntegerCheck(((-1.0)+x300),-1);
if(!x301.valid){
continue;
}
if(((x300*(x301.value))) < -0.00001)
continue;
IkReal gconst33=((-1.0)*(IKsqrt((x300*(x301.value)))));
j6eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst33*gconst33))))) < -0.00001)
continue;
CheckValue<IkReal> x302=IKPowWithIntegerCheck(gconst33,-1);
if(!x302.valid){
continue;
}
if( IKabs(((((-1.0)*gconst33*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst33*gconst33)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r00*(x302.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst33*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst33*gconst33))))))))))+IKsqr((new_r00*(x302.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*gconst33*new_r01))+((new_r11*(IKsqrt(((1.0)+(((-1.0)*(gconst33*gconst33))))))))), (new_r00*(x302.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x303=IKsin(j6);
IkReal x304=IKcos(j6);
IkReal x305=((1.0)*x304);
if((((1.0)+(((-1.0)*(gconst33*gconst33))))) < -0.00001)
continue;
IkReal x306=IKsqrt(((1.0)+(((-1.0)*(gconst33*gconst33)))));
IkReal x307=((1.0)*x306);
evalcond[0]=((-1.0)*x303);
evalcond[1]=((-1.0)*x304);
evalcond[2]=(((gconst33*x303))+new_r01);
evalcond[3]=((((-1.0)*gconst33*x305))+new_r00);
evalcond[4]=(((x304*x306))+new_r10);
evalcond[5]=((((-1.0)*x303*x307))+new_r11);
evalcond[6]=(((gconst33*new_r01))+x303+(((-1.0)*new_r11*x307)));
evalcond[7]=(((gconst33*new_r00))+(((-1.0)*x305))+(((-1.0)*new_r10*x307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x308 = IKatan2WithCheck(IkReal(((-1.0)*new_r01)),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x308.valid){
continue;
}
CheckValue<IkReal> x309=IKPowWithIntegerCheck(IKsign(gconst33),-1);
if(!x309.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x308.value)+(((1.5707963267949)*(x309.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x310=IKsin(j6);
IkReal x311=IKcos(j6);
IkReal x312=((1.0)*x311);
if((((1.0)+(((-1.0)*(gconst33*gconst33))))) < -0.00001)
continue;
IkReal x313=IKsqrt(((1.0)+(((-1.0)*(gconst33*gconst33)))));
IkReal x314=((1.0)*x313);
evalcond[0]=((-1.0)*x310);
evalcond[1]=((-1.0)*x311);
evalcond[2]=(((gconst33*x310))+new_r01);
evalcond[3]=(new_r00+(((-1.0)*gconst33*x312)));
evalcond[4]=(((x311*x313))+new_r10);
evalcond[5]=((((-1.0)*x310*x314))+new_r11);
evalcond[6]=(((gconst33*new_r01))+(((-1.0)*new_r11*x314))+x310);
evalcond[7]=(((gconst33*new_r00))+(((-1.0)*new_r10*x314))+(((-1.0)*x312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x315=(new_r11*new_r22);
IkReal x316=((1.0)*cj4*new_r01);
CheckValue<IkReal> x317=IKPowWithIntegerCheck(cj4,-1);
if(!x317.valid){
continue;
}
if( IKabs(((((-1.0)*x316))+(((-1.0)*new_r11*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x317.value)*((((x315*(cj4*cj4)))+(((-1.0)*new_r22*sj4*x316))+(((-1.0)*x315))+new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x316))+(((-1.0)*new_r11*sj4))))+IKsqr(((x317.value)*((((x315*(cj4*cj4)))+(((-1.0)*new_r22*sj4*x316))+(((-1.0)*x315))+new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*x316))+(((-1.0)*new_r11*sj4))), ((x317.value)*((((x315*(cj4*cj4)))+(((-1.0)*new_r22*sj4*x316))+(((-1.0)*x315))+new_r00))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x318=IKcos(j6);
IkReal x319=IKsin(j6);
IkReal x320=(cj4*new_r22);
IkReal x321=((1.0)*sj4);
IkReal x322=((1.0)*x318);
IkReal x323=(sj4*x319);
IkReal x324=((1.0)*x319);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x319);
evalcond[1]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x322)));
evalcond[2]=(((new_r22*sj4*x318))+((cj4*x319))+new_r01);
evalcond[3]=(((new_r22*x323))+new_r00+(((-1.0)*cj4*x322)));
evalcond[4]=((((-1.0)*x320*x322))+x323+new_r11);
evalcond[5]=((((-1.0)*new_r22*x324))+((cj4*new_r10))+(((-1.0)*new_r00*x321)));
evalcond[6]=((((-1.0)*new_r22*x322))+((cj4*new_r11))+(((-1.0)*new_r01*x321)));
evalcond[7]=((((-1.0)*x320*x324))+(((-1.0)*x318*x321))+new_r10);
evalcond[8]=((((-1.0)*x324))+(((-1.0)*new_r00*new_r22*x321))+((new_r10*x320)));
evalcond[9]=((((-1.0)*x322))+(((-1.0)*new_r01*new_r22*x321))+((new_r11*x320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x325=((1.0)*sj4);
CheckValue<IkReal> x326=IKPowWithIntegerCheck(new_r22,-1);
if(!x326.valid){
continue;
}
if( IKabs(((((-1.0)*cj4*new_r01))+(((-1.0)*new_r11*x325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x326.value)*((((cj4*new_r11))+(((-1.0)*new_r01*x325)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*new_r01))+(((-1.0)*new_r11*x325))))+IKsqr(((x326.value)*((((cj4*new_r11))+(((-1.0)*new_r01*x325))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*new_r01))+(((-1.0)*new_r11*x325))), ((x326.value)*((((cj4*new_r11))+(((-1.0)*new_r01*x325))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x327=IKcos(j6);
IkReal x328=IKsin(j6);
IkReal x329=(cj4*new_r22);
IkReal x330=((1.0)*sj4);
IkReal x331=((1.0)*x327);
IkReal x332=(sj4*x328);
IkReal x333=((1.0)*x328);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x328);
evalcond[1]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x331)));
evalcond[2]=(((cj4*x328))+((new_r22*sj4*x327))+new_r01);
evalcond[3]=(((new_r22*x332))+(((-1.0)*cj4*x331))+new_r00);
evalcond[4]=((((-1.0)*x329*x331))+x332+new_r11);
evalcond[5]=((((-1.0)*new_r22*x333))+((cj4*new_r10))+(((-1.0)*new_r00*x330)));
evalcond[6]=((((-1.0)*new_r22*x331))+((cj4*new_r11))+(((-1.0)*new_r01*x330)));
evalcond[7]=((((-1.0)*x329*x333))+new_r10+(((-1.0)*x327*x330)));
evalcond[8]=((((-1.0)*new_r00*new_r22*x330))+(((-1.0)*x333))+((new_r10*x329)));
evalcond[9]=((((-1.0)*new_r01*new_r22*x330))+(((-1.0)*x331))+((new_r11*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x334=new_r22*new_r22;
IkReal x335=cj4*cj4;
IkReal x336=(new_r22*sj4);
CheckValue<IkReal> x337=IKPowWithIntegerCheck(IKsign((((x334*x335))+(((-1.0)*x335))+(((-1.0)*x334)))),-1);
if(!x337.valid){
continue;
}
CheckValue<IkReal> x338 = IKatan2WithCheck(IkReal((((cj4*new_r01))+((new_r00*x336)))),IkReal(((((-1.0)*cj4*new_r00))+((new_r01*x336)))),IKFAST_ATAN2_MAGTHRESH);
if(!x338.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x337.value)))+(x338.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x339=IKcos(j6);
IkReal x340=IKsin(j6);
IkReal x341=(cj4*new_r22);
IkReal x342=((1.0)*sj4);
IkReal x343=((1.0)*x339);
IkReal x344=(sj4*x340);
IkReal x345=((1.0)*x340);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x340);
evalcond[1]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x343)));
evalcond[2]=(((new_r22*sj4*x339))+((cj4*x340))+new_r01);
evalcond[3]=(((new_r22*x344))+(((-1.0)*cj4*x343))+new_r00);
evalcond[4]=(x344+(((-1.0)*x341*x343))+new_r11);
evalcond[5]=(((cj4*new_r10))+(((-1.0)*new_r00*x342))+(((-1.0)*new_r22*x345)));
evalcond[6]=(((cj4*new_r11))+(((-1.0)*new_r01*x342))+(((-1.0)*new_r22*x343)));
evalcond[7]=((((-1.0)*x341*x345))+new_r10+(((-1.0)*x339*x342)));
evalcond[8]=((((-1.0)*new_r00*new_r22*x342))+((new_r10*x341))+(((-1.0)*x345)));
evalcond[9]=((((-1.0)*new_r01*new_r22*x342))+((new_r11*x341))+(((-1.0)*x343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x347=IKPowWithIntegerCheck(cj5,-1);
if(!x347.valid){
continue;
}
IkReal x346=x347.value;
CheckValue<IkReal> x348=IKPowWithIntegerCheck(new_r12,-1);
if(!x348.valid){
continue;
}
CheckValue<IkReal> x349=IKPowWithIntegerCheck(x346,-2);
if(!x349.valid){
continue;
}
if( IKabs(((-1.0)*new_r02*x346)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x346*(x348.value)*(((((-1.0)*(new_r02*new_r02)))+(x349.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02*x346))+IKsqr((x346*(x348.value)*(((((-1.0)*(new_r02*new_r02)))+(x349.value)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r02*x346), (x346*(x348.value)*(((((-1.0)*(new_r02*new_r02)))+(x349.value)))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x350=IKcos(j4);
IkReal x351=IKsin(j4);
IkReal x352=((1.0)*cj5);
IkReal x353=(new_r02*x351);
IkReal x354=(new_r12*x350);
IkReal x355=(cj5*x350);
evalcond[0]=(((cj5*x351))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x350*x352)));
evalcond[2]=(((new_r02*x350))+((new_r12*x351)));
evalcond[3]=((((-1.0)*x352))+(((-1.0)*x353))+x354);
evalcond[4]=(((new_r20*sj5))+(((-1.0)*new_r00*x351*x352))+((new_r10*x355)));
evalcond[5]=(((new_r21*sj5))+((new_r11*x355))+(((-1.0)*new_r01*x351*x352)));
evalcond[6]=((((-1.0)*new_r22*x352))+((sj5*x354))+(((-1.0)*sj5*x353)));
evalcond[7]=((-1.0)+((new_r22*sj5))+((cj5*x354))+(((-1.0)*x352*x353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=cj4;
j6eval[1]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
j6eval[0]=cj5;
j6eval[1]=sj4;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x356=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x356))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x356)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x356))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x356))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x356))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x356))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x357=IKcos(j6);
IkReal x358=IKsin(j6);
IkReal x359=((1.0)*sj4);
IkReal x360=(sj4*x358);
IkReal x361=((1.0)*x357);
IkReal x362=(sj4*x357);
IkReal x363=(cj4*x358);
IkReal x364=(cj4*x361);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x358);
evalcond[1]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x361)));
evalcond[2]=(x362+x363+new_r01);
evalcond[3]=((((-1.0)*x364))+x360+new_r00);
evalcond[4]=((((-1.0)*x364))+x360+new_r11);
evalcond[5]=(((cj4*new_r10))+(((-1.0)*x358))+(((-1.0)*new_r00*x359)));
evalcond[6]=((((-1.0)*x361))+((cj4*new_r11))+(((-1.0)*new_r01*x359)));
evalcond[7]=((((-1.0)*x363))+(((-1.0)*x357*x359))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x365=((1.0)*new_r11);
if( IKabs(((((-1.0)*cj4*new_r01))+(((-1.0)*sj4*x365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*x365))+((new_r01*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*new_r01))+(((-1.0)*sj4*x365))))+IKsqr(((((-1.0)*cj4*x365))+((new_r01*sj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*new_r01))+(((-1.0)*sj4*x365))), ((((-1.0)*cj4*x365))+((new_r01*sj4))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x366=IKsin(j6);
IkReal x367=IKcos(j6);
IkReal x368=((1.0)*sj4);
IkReal x369=(cj4*x366);
IkReal x370=((1.0)*x367);
IkReal x371=(x367*x368);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x366);
evalcond[1]=((((-1.0)*new_r00*x368))+((cj4*new_r10))+x366);
evalcond[2]=(((cj4*new_r11))+x367+(((-1.0)*new_r01*x368)));
evalcond[3]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x370)));
evalcond[4]=(((sj4*x366))+((cj4*x367))+new_r11);
evalcond[5]=((((-1.0)*x371))+x369+new_r01);
evalcond[6]=((((-1.0)*x371))+x369+new_r10);
evalcond[7]=((((-1.0)*cj4*x370))+(((-1.0)*x366*x368))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x372=IKsin(j6);
IkReal x373=IKcos(j6);
IkReal x374=((1.0)*sj5);
IkReal x375=((1.0)*cj5);
IkReal x376=((1.0)*x373);
evalcond[0]=(x372+new_r01);
evalcond[1]=(((new_r12*x372))+new_r20);
evalcond[2]=(((new_r12*x373))+new_r21);
evalcond[3]=((((-1.0)*x376))+new_r00);
evalcond[4]=((((-1.0)*x373*x374))+new_r11);
evalcond[5]=((((-1.0)*x372*x374))+new_r10);
evalcond[6]=((((-1.0)*x372))+(((-1.0)*new_r20*x375))+((new_r10*sj5)));
evalcond[7]=((((-1.0)*new_r21*x375))+((new_r11*sj5))+(((-1.0)*x376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x377=IKsin(j6);
IkReal x378=IKcos(j6);
CheckValue<IkReal> x384=IKPowWithIntegerCheck(new_r12,-1);
if(!x384.valid){
continue;
}
IkReal x379=x384.value;
IkReal x380=new_r22*new_r22;
IkReal x381=((1.0)*x378);
IkReal x382=((1.0)*x377);
IkReal x383=(x379*x380);
evalcond[0]=(x377+(((-1.0)*new_r01)));
evalcond[1]=(((sj5*x378))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x382))+new_r20);
evalcond[3]=((((-1.0)*new_r12*x381))+new_r21);
evalcond[4]=((((-1.0)*x381))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*sj5*x382))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r12*new_r20))+(((-1.0)*x382))+((new_r20*x383)));
evalcond[7]=(((new_r12*new_r21))+(((-1.0)*x381))+((new_r21*x383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x385=IKsin(j6);
IkReal x386=IKcos(j6);
IkReal x387=((1.0)*x386);
evalcond[0]=(x385+new_r20);
evalcond[1]=(x386+new_r21);
evalcond[2]=(new_r01+((cj4*x385)));
evalcond[3]=(((sj4*x385))+new_r11);
evalcond[4]=(((new_r02*x386))+new_r10);
evalcond[5]=((((-1.0)*cj4*x387))+new_r00);
evalcond[6]=(((cj4*new_r01))+((new_r11*sj4))+x385);
evalcond[7]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r20, new_r21);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x388=IKsin(j6);
IkReal x389=IKcos(j6);
IkReal x390=((1.0)*x389);
evalcond[0]=((((-1.0)*x388))+new_r20);
evalcond[1]=((((-1.0)*x390))+new_r21);
evalcond[2]=(new_r01+((cj4*x388)));
evalcond[3]=(((sj4*x388))+new_r11);
evalcond[4]=((((-1.0)*cj4*x390))+new_r00);
evalcond[5]=(new_r10+(((-1.0)*new_r02*x390)));
evalcond[6]=(((cj4*new_r01))+((new_r11*sj4))+x388);
evalcond[7]=((((-1.0)*x390))+((cj4*new_r00))+((new_r10*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x391=IKcos(j6);
IkReal x392=IKsin(j6);
CheckValue<IkReal> x398=IKPowWithIntegerCheck(new_r02,-1);
if(!x398.valid){
continue;
}
IkReal x393=x398.value;
IkReal x394=new_r22*new_r22;
IkReal x395=((1.0)*x391);
IkReal x396=(x393*x394);
IkReal x397=((1.0)*x392);
evalcond[0]=(x392+new_r11);
evalcond[1]=((((-1.0)*x395))+new_r10);
evalcond[2]=(((sj5*x391))+new_r01);
evalcond[3]=(((sj5*x392))+new_r00);
evalcond[4]=(new_r20+(((-1.0)*new_r02*x397)));
evalcond[5]=(new_r21+(((-1.0)*new_r02*x395)));
evalcond[6]=((((-1.0)*x397))+((new_r20*x396))+((new_r02*new_r20)));
evalcond[7]=((((-1.0)*x395))+((new_r21*x396))+((new_r02*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j6eval[0]=new_r02;
j6eval[1]=IKsign(new_r02);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j6eval[0]=new_r02;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j6eval[0]=new_r02;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x399=IKsin(j6);
IkReal x400=IKcos(j6);
evalcond[0]=(x399+new_r20);
evalcond[1]=(x400+new_r21);
evalcond[2]=(x399+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r20, new_r21);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x401=IKsin(j6);
IkReal x402=((1.0)*(IKcos(j6)));
evalcond[0]=(new_r20+(((-1.0)*x401)));
evalcond[1]=(new_r21+(((-1.0)*x402)));
evalcond[2]=(x401+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r02);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x403=IKsin(j6);
IkReal x404=IKcos(j6);
IkReal x405=((1.0)*sj5);
IkReal x406=((1.0)*x404);
evalcond[0]=(x403+(((-1.0)*new_r11)));
evalcond[1]=((((-1.0)*x404*x405))+new_r01);
evalcond[2]=((((-1.0)*x403*x405))+new_r00);
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x406)));
evalcond[4]=(((new_r00*sj5))+(((-1.0)*x403)));
evalcond[5]=(((new_r01*sj5))+(((-1.0)*x406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x407=IKcos(j6);
IkReal x408=IKsin(j6);
IkReal x409=((-1.0)*x407);
IkReal x410=((-1.0)*x408);
evalcond[0]=x410;
evalcond[1]=x409;
evalcond[2]=(new_r22*x409);
evalcond[3]=(new_r22*x410);
evalcond[4]=(x408+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x411=IKPowWithIntegerCheck(new_r02,-1);
if(!x411.valid){
continue;
}
CheckValue<IkReal> x412=IKPowWithIntegerCheck(sj5,-1);
if(!x412.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x411.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x412.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x411.value)))+IKsqr((new_r01*(x412.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r20*(x411.value)), (new_r01*(x412.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x413=IKsin(j6);
IkReal x414=IKcos(j6);
IkReal x415=((1.0)*sj5);
IkReal x416=((1.0)*cj5);
IkReal x417=((1.0)*x414);
evalcond[0]=(new_r20+((new_r02*x413)));
evalcond[1]=(new_r21+((new_r02*x414)));
evalcond[2]=(x413+(((-1.0)*new_r11)));
evalcond[3]=(new_r01+(((-1.0)*x414*x415)));
evalcond[4]=((((-1.0)*x413*x415))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x417)));
evalcond[6]=(((new_r00*sj5))+(((-1.0)*new_r20*x416))+(((-1.0)*x413)));
evalcond[7]=(((new_r01*sj5))+(((-1.0)*new_r21*x416))+(((-1.0)*x417)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x418=IKPowWithIntegerCheck(new_r02,-1);
if(!x418.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x418.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x418.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x418.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x419=IKsin(j6);
IkReal x420=IKcos(j6);
IkReal x421=((1.0)*sj5);
IkReal x422=((1.0)*cj5);
IkReal x423=((1.0)*x420);
evalcond[0]=(new_r20+((new_r02*x419)));
evalcond[1]=(new_r21+((new_r02*x420)));
evalcond[2]=(x419+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x420*x421))+new_r01);
evalcond[4]=((((-1.0)*x419*x421))+new_r00);
evalcond[5]=((((-1.0)*x423))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r00*sj5))+(((-1.0)*new_r20*x422))+(((-1.0)*x419)));
evalcond[7]=((((-1.0)*x423))+((new_r01*sj5))+(((-1.0)*new_r21*x422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x424=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x424.valid){
continue;
}
CheckValue<IkReal> x425 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x425.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x424.value)))+(x425.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x426=IKsin(j6);
IkReal x427=IKcos(j6);
IkReal x428=((1.0)*sj5);
IkReal x429=((1.0)*cj5);
IkReal x430=((1.0)*x427);
evalcond[0]=(new_r20+((new_r02*x426)));
evalcond[1]=(new_r21+((new_r02*x427)));
evalcond[2]=(x426+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x427*x428))+new_r01);
evalcond[4]=((((-1.0)*x426*x428))+new_r00);
evalcond[5]=((((-1.0)*x430))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x426))+((new_r00*sj5))+(((-1.0)*new_r20*x429)));
evalcond[7]=((((-1.0)*x430))+((new_r01*sj5))+(((-1.0)*new_r21*x429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j6eval[0]=1.0;
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j6]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[2]={true,true};
_nj6 = 2;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x432=IKPowWithIntegerCheck(cj5,-1);
if(!x432.valid){
continue;
}
IkReal x431=x432.value;
CheckValue<IkReal> x433=IKPowWithIntegerCheck(sj4,-1);
if(!x433.valid){
continue;
}
CheckValue<IkReal> x434=IKPowWithIntegerCheck(sj5,-1);
if(!x434.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x431)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x431*(x433.value)*(x434.value)*(((((-1.0)*cj5*new_r01))+((cj4*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x431))+IKsqr((x431*(x433.value)*(x434.value)*(((((-1.0)*cj5*new_r01))+((cj4*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r20*x431), (x431*(x433.value)*(x434.value)*(((((-1.0)*cj5*new_r01))+((cj4*new_r20))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x435=IKsin(j6);
IkReal x436=IKcos(j6);
IkReal x437=((1.0)*sj5);
IkReal x438=(new_r01*sj4);
IkReal x439=((1.0)*sj4);
IkReal x440=((1.0)*cj5);
IkReal x441=(cj4*sj5);
IkReal x442=((1.0)*x436);
IkReal x443=(cj4*x435);
IkReal x444=(cj4*x436);
IkReal x445=(sj4*x435);
evalcond[0]=(((cj5*x435))+new_r20);
evalcond[1]=(((cj5*x436))+new_r21);
evalcond[2]=(((cj4*new_r01))+((new_r11*sj4))+x435);
evalcond[3]=((((-1.0)*x442))+((cj4*new_r00))+((new_r10*sj4)));
evalcond[4]=(((sj4*sj5*x436))+x443+new_r01);
evalcond[5]=((((-1.0)*cj4*x442))+((sj5*x445))+new_r00);
evalcond[6]=((((-1.0)*x437*x444))+x445+new_r11);
evalcond[7]=((((-1.0)*new_r00*x439))+(((-1.0)*x435*x437))+((cj4*new_r10)));
evalcond[8]=((((-1.0)*x438))+((cj4*new_r11))+(((-1.0)*x436*x437)));
evalcond[9]=((((-1.0)*x437*x443))+(((-1.0)*x436*x439))+new_r10);
evalcond[10]=((((-1.0)*x435))+((new_r10*x441))+(((-1.0)*new_r20*x440))+(((-1.0)*new_r00*sj4*x437)));
evalcond[11]=((((-1.0)*x437*x438))+(((-1.0)*x442))+((new_r11*x441))+(((-1.0)*new_r21*x440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x447=IKPowWithIntegerCheck(cj5,-1);
if(!x447.valid){
continue;
}
IkReal x446=x447.value;
CheckValue<IkReal> x448=IKPowWithIntegerCheck(cj4,-1);
if(!x448.valid){
continue;
}
if( IKabs((x446*(x448.value)*(((((-1.0)*cj5*new_r01))+((new_r21*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x446)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x446*(x448.value)*(((((-1.0)*cj5*new_r01))+((new_r21*sj4*sj5))))))+IKsqr(((-1.0)*new_r21*x446))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x446*(x448.value)*(((((-1.0)*cj5*new_r01))+((new_r21*sj4*sj5))))), ((-1.0)*new_r21*x446));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x449=IKsin(j6);
IkReal x450=IKcos(j6);
IkReal x451=((1.0)*sj5);
IkReal x452=(new_r01*sj4);
IkReal x453=((1.0)*sj4);
IkReal x454=((1.0)*cj5);
IkReal x455=(cj4*sj5);
IkReal x456=((1.0)*x450);
IkReal x457=(cj4*x449);
IkReal x458=(cj4*x450);
IkReal x459=(sj4*x449);
evalcond[0]=(((cj5*x449))+new_r20);
evalcond[1]=(((cj5*x450))+new_r21);
evalcond[2]=(((cj4*new_r01))+((new_r11*sj4))+x449);
evalcond[3]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x456)));
evalcond[4]=(((sj4*sj5*x450))+x457+new_r01);
evalcond[5]=((((-1.0)*cj4*x456))+new_r00+((sj5*x459)));
evalcond[6]=(x459+(((-1.0)*x451*x458))+new_r11);
evalcond[7]=(((cj4*new_r10))+(((-1.0)*new_r00*x453))+(((-1.0)*x449*x451)));
evalcond[8]=(((cj4*new_r11))+(((-1.0)*x452))+(((-1.0)*x450*x451)));
evalcond[9]=((((-1.0)*x450*x453))+(((-1.0)*x451*x457))+new_r10);
evalcond[10]=(((new_r10*x455))+(((-1.0)*new_r00*sj4*x451))+(((-1.0)*new_r20*x454))+(((-1.0)*x449)));
evalcond[11]=((((-1.0)*new_r21*x454))+((new_r11*x455))+(((-1.0)*x456))+(((-1.0)*x451*x452)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x460 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x460.valid){
continue;
}
CheckValue<IkReal> x461=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x461.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x460.value)+(((1.5707963267949)*(x461.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x462=IKsin(j6);
IkReal x463=IKcos(j6);
IkReal x464=((1.0)*sj5);
IkReal x465=(new_r01*sj4);
IkReal x466=((1.0)*sj4);
IkReal x467=((1.0)*cj5);
IkReal x468=(cj4*sj5);
IkReal x469=((1.0)*x463);
IkReal x470=(cj4*x462);
IkReal x471=(cj4*x463);
IkReal x472=(sj4*x462);
evalcond[0]=(((cj5*x462))+new_r20);
evalcond[1]=(((cj5*x463))+new_r21);
evalcond[2]=(((cj4*new_r01))+((new_r11*sj4))+x462);
evalcond[3]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x469)));
evalcond[4]=(((sj4*sj5*x463))+x470+new_r01);
evalcond[5]=(((sj5*x472))+(((-1.0)*cj4*x469))+new_r00);
evalcond[6]=((((-1.0)*x464*x471))+x472+new_r11);
evalcond[7]=((((-1.0)*x462*x464))+((cj4*new_r10))+(((-1.0)*new_r00*x466)));
evalcond[8]=((((-1.0)*x463*x464))+((cj4*new_r11))+(((-1.0)*x465)));
evalcond[9]=((((-1.0)*x463*x466))+(((-1.0)*x464*x470))+new_r10);
evalcond[10]=(((new_r10*x468))+(((-1.0)*new_r00*sj4*x464))+(((-1.0)*new_r20*x467))+(((-1.0)*x462)));
evalcond[11]=((((-1.0)*new_r21*x467))+((new_r11*x468))+(((-1.0)*x464*x465))+(((-1.0)*x469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x473 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x473.valid){
continue;
}
CheckValue<IkReal> x474=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x474.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x473.value)+(((1.5707963267949)*(x474.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=(((cj5*(IKsin(j6))))+new_r20);
evalcond[1]=(((cj5*(IKcos(j6))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j4eval[0]=cj5;
j4eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j4eval[2]=IKsign(cj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj5;
j4eval[1]=new_r01;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x475=((1.0)*sj6);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x475)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x475))+((cj6*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x475))))+IKsqr(((((-1.0)*new_r01*x475))+((cj6*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*new_r00*x475))), ((((-1.0)*new_r01*x475))+((cj6*new_r00))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x476=IKcos(j4);
IkReal x477=IKsin(j4);
IkReal x478=((1.0)*cj6);
IkReal x479=(sj6*x477);
IkReal x480=(cj6*x477);
IkReal x481=(sj6*x476);
IkReal x482=((1.0)*x477);
IkReal x483=(x476*x478);
evalcond[0]=(sj6+((new_r01*x476))+((new_r11*x477)));
evalcond[1]=(x481+x480+new_r01);
evalcond[2]=((((-1.0)*x483))+x479+new_r00);
evalcond[3]=((((-1.0)*x483))+x479+new_r11);
evalcond[4]=(((new_r10*x477))+(((-1.0)*x478))+((new_r00*x476)));
evalcond[5]=((((-1.0)*x477*x478))+(((-1.0)*x481))+new_r10);
evalcond[6]=((((-1.0)*sj6))+(((-1.0)*new_r00*x482))+((new_r10*x476)));
evalcond[7]=((((-1.0)*new_r01*x482))+((new_r11*x476))+(((-1.0)*x478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x484=(((new_r11*sj6))+((cj6*new_r01)));
j4eval[0]=x484;
j4eval[1]=((IKabs(((-1.0)+(new_r01*new_r01)+(cj6*cj6))))+(IKabs(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj6*sj6))))));
j4eval[2]=IKsign(x484);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x485=((1.0)*sj6);
IkReal x486=(((new_r10*new_r11))+((new_r00*new_r01)));
j4eval[0]=x486;
j4eval[1]=IKsign(x486);
j4eval[2]=((IKabs(((((-1.0)*new_r10*x485))+((new_r01*sj6)))))+(IKabs(((((-1.0)*new_r11*x485))+(((-1.0)*new_r00*x485))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x487=((1.0)*new_r11);
IkReal x488=((new_r01*new_r01)+(new_r11*new_r11));
j4eval[0]=x488;
j4eval[1]=((IKabs((((cj6*new_r01))+(((-1.0)*sj6*x487)))))+(IKabs(((((-1.0)*new_r01*sj6))+(((-1.0)*cj6*x487))))));
j4eval[2]=IKsign(x488);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
new_r01=0;
new_r11=0;
j4eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x490 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x490.valid){
continue;
}
IkReal x489=x490.value;
j4array[0]=((-1.0)*x489);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x489)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j4))))+(((-1.0)*new_r00*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r01, ((-1.0)*new_r11));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x491=IKcos(j4);
IkReal x492=IKsin(j4);
IkReal x493=((1.0)*x492);
evalcond[0]=(x491+new_r11);
evalcond[1]=((((-1.0)*x493))+new_r01);
evalcond[2]=((((-1.0)*x491))+new_r00);
evalcond[3]=((((-1.0)*x493))+new_r10);
evalcond[4]=(((new_r11*x492))+((new_r01*x491)));
evalcond[5]=((-1.0)+((new_r10*x492))+((new_r00*x491)));
evalcond[6]=((((-1.0)*new_r00*x493))+((new_r10*x491)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x493))+((new_r11*x491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x494=IKsin(j4);
IkReal x495=IKcos(j4);
IkReal x496=((1.0)*x494);
evalcond[0]=(x494+new_r01);
evalcond[1]=(x495+new_r00);
evalcond[2]=(x494+new_r10);
evalcond[3]=((((-1.0)*x495))+new_r11);
evalcond[4]=(((new_r11*x494))+((new_r01*x495)));
evalcond[5]=((1.0)+((new_r10*x494))+((new_r00*x495)));
evalcond[6]=((((-1.0)*new_r00*x496))+((new_r10*x495)));
evalcond[7]=((-1.0)+(((-1.0)*new_r01*x496))+((new_r11*x495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x498 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x498)==0){
continue;
}
IkReal x497=pow(x498,-0.5);
CheckValue<IkReal> x499 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x499.valid){
continue;
}
IkReal gconst26=((-1.0)*(x499.value));
IkReal gconst27=((-1.0)*new_r01*x497);
IkReal gconst28=(new_r11*x497);
CheckValue<IkReal> x500 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x500.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x500.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x503 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x503.valid){
continue;
}
IkReal x501=((-1.0)*(x503.value));
IkReal x502=x497;
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst27;
cj6=gconst28;
j6=x501;
IkReal gconst26=x501;
IkReal gconst27=((-1.0)*new_r01*x502);
IkReal gconst28=(new_r11*x502);
IkReal x504=new_r01*new_r01;
IkReal x505=(new_r00*new_r01);
IkReal x506=(((new_r10*new_r11))+x505);
IkReal x507=x497;
IkReal x508=(new_r01*x507);
j4eval[0]=x506;
j4eval[1]=((IKabs((((new_r10*x508))+(((-1.0)*x504*x507)))))+(IKabs((((x505*x507))+((new_r11*x508))))));
j4eval[2]=IKsign(x506);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x511 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x511.valid){
continue;
}
IkReal x509=((-1.0)*(x511.value));
IkReal x510=x497;
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst27;
cj6=gconst28;
j6=x509;
IkReal gconst26=x509;
IkReal gconst27=((-1.0)*new_r01*x510);
IkReal gconst28=(new_r11*x510);
IkReal x512=((new_r01*new_r01)+(new_r11*new_r11));
j4eval[0]=x512;
j4eval[1]=IKsign(x512);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x515 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x515.valid){
continue;
}
IkReal x513=((-1.0)*(x515.value));
IkReal x514=x497;
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst27;
cj6=gconst28;
j6=x513;
IkReal gconst26=x513;
IkReal gconst27=((-1.0)*new_r01*x514);
IkReal gconst28=(new_r11*x514);
j4eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst28*gconst28)+(gconst27*gconst27));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[4], cj4array[4], sj4array[4];
bool j4valid[4]={false};
_nj4 = 4;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=1.5707963267949;
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
j4array[2]=3.14159265358979;
sj4array[2]=IKsin(j4array[2]);
cj4array[2]=IKcos(j4array[2]);
j4array[3]=-1.5707963267949;
sj4array[3]=IKsin(j4array[3]);
cj4array[3]=IKcos(j4array[3]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4array[2] > IKPI )
{
    j4array[2]-=IK2PI;
}
else if( j4array[2] < -IKPI )
{    j4array[2]+=IK2PI;
}
j4valid[2] = true;
if( j4array[3] > IKPI )
{
    j4array[3]-=IK2PI;
}
else if( j4array[3] < -IKPI )
{    j4array[3]+=IK2PI;
}
j4valid[3] = true;
for(int ij4 = 0; ij4 < 4; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 4; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x517 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x517.valid){
continue;
}
IkReal x516=((-1.0)*(x517.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst27;
cj6=gconst28;
j6=x516;
new_r11=0;
new_r00=0;
IkReal gconst26=x516;
IkReal x518 = new_r01*new_r01;
if(IKabs(x518)==0){
continue;
}
IkReal gconst27=((-1.0)*new_r01*(pow(x518,-0.5)));
IkReal gconst28=0;
j4eval[0]=new_r01;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x519=IKPowWithIntegerCheck(gconst27,-1);
if(!x519.valid){
continue;
}
cj4array[0]=((-1.0)*new_r01*(x519.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x520=IKsin(j4);
IkReal x521=IKcos(j4);
IkReal x522=((-1.0)*x520);
evalcond[0]=(new_r10*x520);
evalcond[1]=(gconst27*x522);
evalcond[2]=(new_r01*x522);
evalcond[3]=(((new_r01*x521))+gconst27);
evalcond[4]=(gconst27+((new_r10*x521)));
evalcond[5]=(new_r10+((gconst27*x521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x523=IKPowWithIntegerCheck(new_r01,-1);
if(!x523.valid){
continue;
}
cj4array[0]=((-1.0)*gconst27*(x523.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x524=IKsin(j4);
IkReal x525=IKcos(j4);
IkReal x526=(gconst27*x525);
IkReal x527=((-1.0)*x524);
evalcond[0]=(new_r10*x524);
evalcond[1]=(gconst27*x527);
evalcond[2]=(new_r01*x527);
evalcond[3]=(x526+new_r01);
evalcond[4]=(gconst27+((new_r10*x525)));
evalcond[5]=(x526+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst27;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x529 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x529.valid){
continue;
}
IkReal x528=((-1.0)*(x529.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst27;
cj6=gconst28;
j6=x528;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst26=x528;
IkReal gconst27=((-1.0)*new_r01);
IkReal gconst28=new_r11;
j4eval[0]=-1.0;
j4eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j4eval[2]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x531 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x531.valid){
continue;
}
IkReal x530=((-1.0)*(x531.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst27;
cj6=gconst28;
j6=x530;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst26=x530;
IkReal gconst27=((-1.0)*new_r01);
IkReal gconst28=new_r11;
j4eval[0]=-1.0;
j4eval[1]=-1.0;
j4eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x533 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x533.valid){
continue;
}
IkReal x532=((-1.0)*(x533.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst27;
cj6=gconst28;
j6=x532;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst26=x532;
IkReal gconst27=((-1.0)*new_r01);
IkReal gconst28=new_r11;
j4eval[0]=1.0;
j4eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j4eval[2]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x534=((1.0)*gconst27);
CheckValue<IkReal> x535=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x535.valid){
continue;
}
CheckValue<IkReal> x536 = IKatan2WithCheck(IkReal((((gconst28*new_r01))+(((-1.0)*new_r11*x534)))),IkReal(((((-1.0)*gconst28*new_r11))+(((-1.0)*new_r01*x534)))),IKFAST_ATAN2_MAGTHRESH);
if(!x536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x535.value)))+(x536.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x537=IKcos(j4);
IkReal x538=IKsin(j4);
IkReal x539=(gconst27*x537);
IkReal x540=((1.0)*x538);
IkReal x541=(gconst28*x537);
IkReal x542=(gconst28*x540);
evalcond[0]=(((new_r01*x537))+gconst27+((new_r11*x538)));
evalcond[1]=(x541+new_r11+((gconst27*x538)));
evalcond[2]=((((-1.0)*x542))+x539);
evalcond[3]=((((-1.0)*x542))+x539+new_r01);
evalcond[4]=((((-1.0)*x541))+(((-1.0)*gconst27*x540)));
evalcond[5]=(gconst28+((new_r11*x537))+(((-1.0)*new_r01*x540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x543=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst27*gconst27)))+(((-1.0)*(gconst28*gconst28))))),-1);
if(!x543.valid){
continue;
}
CheckValue<IkReal> x544 = IKatan2WithCheck(IkReal((gconst27*new_r11)),IkReal((gconst28*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x544.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x543.value)))+(x544.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x545=IKcos(j4);
IkReal x546=IKsin(j4);
IkReal x547=(gconst27*x545);
IkReal x548=((1.0)*x546);
IkReal x549=(gconst28*x545);
IkReal x550=(gconst28*x548);
evalcond[0]=(gconst27+((new_r11*x546))+((new_r01*x545)));
evalcond[1]=(x549+new_r11+((gconst27*x546)));
evalcond[2]=((((-1.0)*x550))+x547);
evalcond[3]=((((-1.0)*x550))+x547+new_r01);
evalcond[4]=((((-1.0)*x549))+(((-1.0)*gconst27*x548)));
evalcond[5]=(gconst28+((new_r11*x545))+(((-1.0)*new_r01*x548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x551 = IKatan2WithCheck(IkReal((gconst27*gconst28)),IkReal(((-1.0)*(gconst27*gconst27))),IKFAST_ATAN2_MAGTHRESH);
if(!x551.valid){
continue;
}
CheckValue<IkReal> x552=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*new_r11))+((gconst27*new_r01)))),-1);
if(!x552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x551.value)+(((1.5707963267949)*(x552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x553=IKcos(j4);
IkReal x554=IKsin(j4);
IkReal x555=(gconst27*x553);
IkReal x556=((1.0)*x554);
IkReal x557=(gconst28*x553);
IkReal x558=(gconst28*x556);
evalcond[0]=(((new_r11*x554))+gconst27+((new_r01*x553)));
evalcond[1]=(x557+((gconst27*x554))+new_r11);
evalcond[2]=((((-1.0)*x558))+x555);
evalcond[3]=((((-1.0)*x558))+x555+new_r01);
evalcond[4]=((((-1.0)*x557))+(((-1.0)*gconst27*x556)));
evalcond[5]=(((new_r11*x553))+gconst28+(((-1.0)*new_r01*x556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x559=IKPowWithIntegerCheck(gconst28,-1);
if(!x559.valid){
continue;
}
cj4array[0]=(new_r00*(x559.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x560=IKsin(j4);
IkReal x561=IKcos(j4);
IkReal x562=((-1.0)*x560);
evalcond[0]=(new_r11*x560);
evalcond[1]=(gconst28*x562);
evalcond[2]=(new_r00*x562);
evalcond[3]=(new_r11+((gconst28*x561)));
evalcond[4]=(gconst28+((new_r11*x561)));
evalcond[5]=(((new_r00*x561))+(((-1.0)*gconst28)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x564 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x564.valid){
continue;
}
IkReal x563=((-1.0)*(x564.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst27;
cj6=gconst28;
j6=x563;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst26=x563;
IkReal gconst27=0;
IkReal x565 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x565)==0){
continue;
}
IkReal gconst28=(new_r11*(pow(x565,-0.5)));
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x567 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x567.valid){
continue;
}
IkReal x566=((-1.0)*(x567.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst27;
cj6=gconst28;
j6=x566;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst26=x566;
IkReal gconst27=0;
IkReal x568 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x568)==0){
continue;
}
IkReal gconst28=(new_r11*(pow(x568,-0.5)));
j4eval[0]=new_r11;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x570 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x570.valid){
continue;
}
IkReal x569=((-1.0)*(x570.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst27;
cj6=gconst28;
j6=x569;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst26=x569;
IkReal gconst27=0;
IkReal x571 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x571)==0){
continue;
}
IkReal gconst28=(new_r11*(pow(x571,-0.5)));
j4eval[0]=new_r10;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x572=IKPowWithIntegerCheck(new_r10,-1);
if(!x572.valid){
continue;
}
CheckValue<IkReal> x573=IKPowWithIntegerCheck(gconst28,-1);
if(!x573.valid){
continue;
}
if( IKabs((gconst28*(x572.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x573.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst28*(x572.value)))+IKsqr(((-1.0)*new_r11*(x573.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((gconst28*(x572.value)), ((-1.0)*new_r11*(x573.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x574=IKsin(j4);
IkReal x575=IKcos(j4);
IkReal x576=(gconst28*x574);
IkReal x577=(gconst28*x575);
evalcond[0]=(new_r11*x574);
evalcond[1]=(new_r10*x575);
evalcond[2]=((-1.0)*x576);
evalcond[3]=((-1.0)*x577);
evalcond[4]=(x577+new_r11);
evalcond[5]=(((new_r11*x575))+gconst28);
evalcond[6]=((((-1.0)*x576))+new_r10);
evalcond[7]=(((new_r10*x574))+(((-1.0)*gconst28)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x578=IKPowWithIntegerCheck(gconst28,-1);
if(!x578.valid){
continue;
}
CheckValue<IkReal> x579=IKPowWithIntegerCheck(new_r11,-1);
if(!x579.valid){
continue;
}
if( IKabs((new_r10*(x578.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst28*(x579.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x578.value)))+IKsqr(((-1.0)*gconst28*(x579.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((new_r10*(x578.value)), ((-1.0)*gconst28*(x579.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x580=IKsin(j4);
IkReal x581=IKcos(j4);
IkReal x582=(gconst28*x580);
IkReal x583=(gconst28*x581);
evalcond[0]=(new_r11*x580);
evalcond[1]=(new_r10*x581);
evalcond[2]=((-1.0)*x582);
evalcond[3]=((-1.0)*x583);
evalcond[4]=(x583+new_r11);
evalcond[5]=(gconst28+((new_r11*x581)));
evalcond[6]=((((-1.0)*x582))+new_r10);
evalcond[7]=((((-1.0)*gconst28))+((new_r10*x580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x584 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x584.valid){
continue;
}
CheckValue<IkReal> x585=IKPowWithIntegerCheck(IKsign(gconst28),-1);
if(!x585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x584.value)+(((1.5707963267949)*(x585.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x586=IKsin(j4);
IkReal x587=IKcos(j4);
IkReal x588=(gconst28*x586);
IkReal x589=(gconst28*x587);
evalcond[0]=(new_r11*x586);
evalcond[1]=(new_r10*x587);
evalcond[2]=((-1.0)*x588);
evalcond[3]=((-1.0)*x589);
evalcond[4]=(x589+new_r11);
evalcond[5]=(gconst28+((new_r11*x587)));
evalcond[6]=((((-1.0)*x588))+new_r10);
evalcond[7]=((((-1.0)*gconst28))+((new_r10*x586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x591 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x591.valid){
continue;
}
IkReal x590=((-1.0)*(x591.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst27;
cj6=gconst28;
j6=x590;
new_r01=0;
IkReal gconst26=x590;
IkReal gconst27=0;
IkReal x592 = new_r11*new_r11;
if(IKabs(x592)==0){
continue;
}
IkReal gconst28=(new_r11*(pow(x592,-0.5)));
j4eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x594 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x594.valid){
continue;
}
IkReal x593=((-1.0)*(x594.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst27;
cj6=gconst28;
j6=x593;
new_r01=0;
IkReal gconst26=x593;
IkReal gconst27=0;
IkReal x595 = new_r11*new_r11;
if(IKabs(x595)==0){
continue;
}
IkReal gconst28=(new_r11*(pow(x595,-0.5)));
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x597 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x597.valid){
continue;
}
IkReal x596=((-1.0)*(x597.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst27;
cj6=gconst28;
j6=x596;
new_r01=0;
IkReal gconst26=x596;
IkReal gconst27=0;
IkReal x598 = new_r11*new_r11;
if(IKabs(x598)==0){
continue;
}
IkReal gconst28=(new_r11*(pow(x598,-0.5)));
j4eval[0]=new_r11;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x599=IKPowWithIntegerCheck(gconst28,-1);
if(!x599.valid){
continue;
}
CheckValue<IkReal> x600=IKPowWithIntegerCheck(new_r11,-1);
if(!x600.valid){
continue;
}
if( IKabs((new_r10*(x599.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst28*(x600.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x599.value)))+IKsqr(((-1.0)*gconst28*(x600.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((new_r10*(x599.value)), ((-1.0)*gconst28*(x600.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x601=IKsin(j4);
IkReal x602=IKcos(j4);
IkReal x603=(gconst28*x601);
IkReal x604=(gconst28*x602);
evalcond[0]=(new_r11*x601);
evalcond[1]=((-1.0)*x603);
evalcond[2]=(x604+new_r11);
evalcond[3]=(gconst28+((new_r11*x602)));
evalcond[4]=((((-1.0)*x604))+new_r00);
evalcond[5]=((((-1.0)*x603))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x601))+((new_r10*x602)));
evalcond[7]=(((new_r10*x601))+((new_r00*x602))+(((-1.0)*gconst28)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x605 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x605.valid){
continue;
}
CheckValue<IkReal> x606=IKPowWithIntegerCheck(IKsign(gconst28),-1);
if(!x606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x605.value)+(((1.5707963267949)*(x606.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x607=IKsin(j4);
IkReal x608=IKcos(j4);
IkReal x609=(gconst28*x607);
IkReal x610=(gconst28*x608);
evalcond[0]=(new_r11*x607);
evalcond[1]=((-1.0)*x609);
evalcond[2]=(x610+new_r11);
evalcond[3]=(gconst28+((new_r11*x608)));
evalcond[4]=((((-1.0)*x610))+new_r00);
evalcond[5]=((((-1.0)*x609))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x607))+((new_r10*x608)));
evalcond[7]=(((new_r10*x607))+((new_r00*x608))+(((-1.0)*gconst28)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x611 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x611.valid){
continue;
}
CheckValue<IkReal> x612=IKPowWithIntegerCheck(IKsign(gconst28),-1);
if(!x612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x611.value)+(((1.5707963267949)*(x612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x613=IKsin(j4);
IkReal x614=IKcos(j4);
IkReal x615=(gconst28*x613);
IkReal x616=(gconst28*x614);
evalcond[0]=(new_r11*x613);
evalcond[1]=((-1.0)*x615);
evalcond[2]=(x616+new_r11);
evalcond[3]=(gconst28+((new_r11*x614)));
evalcond[4]=((((-1.0)*x616))+new_r00);
evalcond[5]=((((-1.0)*x615))+new_r10);
evalcond[6]=(((new_r10*x614))+(((-1.0)*new_r00*x613)));
evalcond[7]=(((new_r10*x613))+(((-1.0)*gconst28))+((new_r00*x614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x617=((1.0)*gconst27);
CheckValue<IkReal> x618=IKPowWithIntegerCheck(IKsign(((gconst28*gconst28)+(gconst27*gconst27))),-1);
if(!x618.valid){
continue;
}
CheckValue<IkReal> x619 = IKatan2WithCheck(IkReal((((gconst28*new_r01))+(((-1.0)*new_r11*x617)))),IkReal(((((-1.0)*gconst28*new_r11))+(((-1.0)*new_r01*x617)))),IKFAST_ATAN2_MAGTHRESH);
if(!x619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x618.value)))+(x619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x620=IKcos(j4);
IkReal x621=IKsin(j4);
IkReal x622=(gconst27*x620);
IkReal x623=((1.0)*x621);
IkReal x624=(gconst28*x620);
IkReal x625=(gconst28*x623);
evalcond[0]=(gconst27+((new_r01*x620))+((new_r11*x621)));
evalcond[1]=(x624+new_r11+((gconst27*x621)));
evalcond[2]=((((-1.0)*x625))+x622+new_r01);
evalcond[3]=((((-1.0)*new_r00*x623))+gconst27+((new_r10*x620)));
evalcond[4]=((((-1.0)*new_r01*x623))+gconst28+((new_r11*x620)));
evalcond[5]=((((-1.0)*x625))+x622+new_r10);
evalcond[6]=(((new_r00*x620))+((new_r10*x621))+(((-1.0)*gconst28)));
evalcond[7]=((((-1.0)*x624))+new_r00+(((-1.0)*gconst27*x623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x626=((1.0)*gconst27);
CheckValue<IkReal> x627 = IKatan2WithCheck(IkReal((((gconst28*new_r01))+(((-1.0)*new_r11*x626)))),IkReal(((((-1.0)*new_r01*x626))+(((-1.0)*gconst28*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x627.valid){
continue;
}
CheckValue<IkReal> x628=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x627.value)+(((1.5707963267949)*(x628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x629=IKcos(j4);
IkReal x630=IKsin(j4);
IkReal x631=(gconst27*x629);
IkReal x632=((1.0)*x630);
IkReal x633=(gconst28*x629);
IkReal x634=(gconst28*x632);
evalcond[0]=(gconst27+((new_r01*x629))+((new_r11*x630)));
evalcond[1]=(x633+new_r11+((gconst27*x630)));
evalcond[2]=((((-1.0)*x634))+x631+new_r01);
evalcond[3]=((((-1.0)*new_r00*x632))+gconst27+((new_r10*x629)));
evalcond[4]=((((-1.0)*new_r01*x632))+gconst28+((new_r11*x629)));
evalcond[5]=((((-1.0)*x634))+x631+new_r10);
evalcond[6]=(((new_r00*x629))+((new_r10*x630))+(((-1.0)*gconst28)));
evalcond[7]=((((-1.0)*gconst27*x632))+(((-1.0)*x633))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x635=((1.0)*gconst27);
CheckValue<IkReal> x636 = IKatan2WithCheck(IkReal((((gconst27*new_r01))+(((-1.0)*new_r10*x635)))),IkReal(((((-1.0)*new_r00*x635))+(((-1.0)*new_r11*x635)))),IKFAST_ATAN2_MAGTHRESH);
if(!x636.valid){
continue;
}
CheckValue<IkReal> x637=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x636.value)+(((1.5707963267949)*(x637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x638=IKcos(j4);
IkReal x639=IKsin(j4);
IkReal x640=(gconst27*x638);
IkReal x641=((1.0)*x639);
IkReal x642=(gconst28*x638);
IkReal x643=(gconst28*x641);
evalcond[0]=(gconst27+((new_r01*x638))+((new_r11*x639)));
evalcond[1]=(x642+new_r11+((gconst27*x639)));
evalcond[2]=((((-1.0)*x643))+x640+new_r01);
evalcond[3]=(gconst27+(((-1.0)*new_r00*x641))+((new_r10*x638)));
evalcond[4]=(gconst28+(((-1.0)*new_r01*x641))+((new_r11*x638)));
evalcond[5]=((((-1.0)*x643))+x640+new_r10);
evalcond[6]=(((new_r00*x638))+((new_r10*x639))+(((-1.0)*gconst28)));
evalcond[7]=((((-1.0)*x642))+(((-1.0)*gconst27*x641))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x645 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x645)==0){
continue;
}
IkReal x644=pow(x645,-0.5);
CheckValue<IkReal> x646 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x646.valid){
continue;
}
IkReal gconst29=((3.14159265358979)+(((-1.0)*(x646.value))));
IkReal gconst30=((1.0)*new_r01*x644);
IkReal gconst31=((-1.0)*new_r11*x644);
CheckValue<IkReal> x647 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x647.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x647.value)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
CheckValue<IkReal> x650 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x650.valid){
continue;
}
IkReal x648=((1.0)*(x650.value));
IkReal x649=x644;
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst30;
cj6=gconst31;
j6=((3.14159265)+(((-1.0)*x648)));
IkReal gconst29=((3.14159265358979)+(((-1.0)*x648)));
IkReal gconst30=((1.0)*new_r01*x649);
IkReal gconst31=((-1.0)*new_r11*x649);
IkReal x651=new_r01*new_r01;
IkReal x652=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x653=x644;
IkReal x654=((1.0)*new_r01*x653);
j4eval[0]=x652;
j4eval[1]=IKsign(x652);
j4eval[2]=((IKabs(((((-1.0)*new_r10*x654))+((x651*x653)))))+(IKabs(((((-1.0)*new_r00*x654))+(((-1.0)*new_r11*x654))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x657 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x657.valid){
continue;
}
IkReal x655=((1.0)*(x657.value));
IkReal x656=x644;
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst30;
cj6=gconst31;
j6=((3.14159265)+(((-1.0)*x655)));
IkReal gconst29=((3.14159265358979)+(((-1.0)*x655)));
IkReal gconst30=((1.0)*new_r01*x656);
IkReal gconst31=((-1.0)*new_r11*x656);
IkReal x658=((new_r01*new_r01)+(new_r11*new_r11));
j4eval[0]=x658;
j4eval[1]=IKsign(x658);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x661 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x661.valid){
continue;
}
IkReal x659=((1.0)*(x661.value));
IkReal x660=x644;
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst30;
cj6=gconst31;
j6=((3.14159265)+(((-1.0)*x659)));
IkReal gconst29=((3.14159265358979)+(((-1.0)*x659)));
IkReal gconst30=((1.0)*new_r01*x660);
IkReal gconst31=((-1.0)*new_r11*x660);
j4eval[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((gconst30*gconst30)+(gconst31*gconst31));
evalcond[1]=new_r01;
evalcond[2]=new_r00;
evalcond[3]=new_r11;
evalcond[4]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[4], cj4array[4], sj4array[4];
bool j4valid[4]={false};
_nj4 = 4;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=1.5707963267949;
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
j4array[2]=3.14159265358979;
sj4array[2]=IKsin(j4array[2]);
cj4array[2]=IKcos(j4array[2]);
j4array[3]=-1.5707963267949;
sj4array[3]=IKsin(j4array[3]);
cj4array[3]=IKcos(j4array[3]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
if( j4array[2] > IKPI )
{
    j4array[2]-=IK2PI;
}
else if( j4array[2] < -IKPI )
{    j4array[2]+=IK2PI;
}
j4valid[2] = true;
if( j4array[3] > IKPI )
{
    j4array[3]-=IK2PI;
}
else if( j4array[3] < -IKPI )
{    j4array[3]+=IK2PI;
}
j4valid[3] = true;
for(int ij4 = 0; ij4 < 4; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 4; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x663 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x663.valid){
continue;
}
IkReal x662=((1.0)*(x663.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst30;
cj6=gconst31;
j6=((3.14159265)+(((-1.0)*x662)));
new_r11=0;
new_r00=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x662)));
IkReal x664 = new_r01*new_r01;
if(IKabs(x664)==0){
continue;
}
IkReal gconst30=((1.0)*new_r01*(pow(x664,-0.5)));
IkReal gconst31=0;
j4eval[0]=new_r01;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x665=IKPowWithIntegerCheck(gconst30,-1);
if(!x665.valid){
continue;
}
cj4array[0]=((-1.0)*new_r01*(x665.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x666=IKsin(j4);
IkReal x667=IKcos(j4);
IkReal x668=((-1.0)*x666);
evalcond[0]=(new_r10*x666);
evalcond[1]=(gconst30*x668);
evalcond[2]=(new_r01*x668);
evalcond[3]=(gconst30+((new_r01*x667)));
evalcond[4]=(gconst30+((new_r10*x667)));
evalcond[5]=(((gconst30*x667))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x669=IKPowWithIntegerCheck(new_r01,-1);
if(!x669.valid){
continue;
}
cj4array[0]=((-1.0)*gconst30*(x669.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x670=IKsin(j4);
IkReal x671=IKcos(j4);
IkReal x672=(gconst30*x671);
IkReal x673=((-1.0)*x670);
evalcond[0]=(new_r10*x670);
evalcond[1]=(gconst30*x673);
evalcond[2]=(new_r01*x673);
evalcond[3]=(x672+new_r01);
evalcond[4]=(((new_r10*x671))+gconst30);
evalcond[5]=(x672+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst30;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x675 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x675.valid){
continue;
}
IkReal x674=((1.0)*(x675.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst30;
cj6=gconst31;
j6=((3.14159265)+(((-1.0)*x674)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x674)));
IkReal gconst30=((1.0)*new_r01);
IkReal gconst31=((-1.0)*new_r11);
j4eval[0]=1.0;
j4eval[1]=1.0;
j4eval[2]=new_r01;
j4eval[3]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x677 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x677.valid){
continue;
}
IkReal x676=((1.0)*(x677.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst30;
cj6=gconst31;
j6=((3.14159265)+(((-1.0)*x676)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x676)));
IkReal gconst30=((1.0)*new_r01);
IkReal gconst31=((-1.0)*new_r11);
j4eval[0]=-1.0;
j4eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j4eval[2]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x679 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x679.valid){
continue;
}
IkReal x678=((1.0)*(x679.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst30;
cj6=gconst31;
j6=((3.14159265)+(((-1.0)*x678)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x678)));
IkReal gconst30=((1.0)*new_r01);
IkReal gconst31=((-1.0)*new_r11);
j4eval[0]=1.0;
j4eval[1]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
j4eval[2]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x680=((1.0)*new_r11);
CheckValue<IkReal> x681 = IKatan2WithCheck(IkReal(((((-1.0)*gconst30*x680))+((gconst31*new_r01)))),IkReal(((((-1.0)*gconst31*x680))+(((-1.0)*gconst30*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x681.valid){
continue;
}
CheckValue<IkReal> x682=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x681.value)+(((1.5707963267949)*(x682.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x683=IKcos(j4);
IkReal x684=IKsin(j4);
IkReal x685=(gconst30*x683);
IkReal x686=(gconst30*x684);
IkReal x687=(gconst31*x683);
IkReal x688=((1.0)*x684);
IkReal x689=(gconst31*x688);
evalcond[0]=(gconst30+((new_r01*x683))+((new_r11*x684)));
evalcond[1]=(x687+x686+new_r11);
evalcond[2]=((((-1.0)*x689))+x685);
evalcond[3]=((((-1.0)*x689))+x685+new_r01);
evalcond[4]=((((-1.0)*x687))+(((-1.0)*x686)));
evalcond[5]=((((-1.0)*new_r01*x688))+gconst31+((new_r11*x683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x690=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst31*gconst31)))+(((-1.0)*(gconst30*gconst30))))),-1);
if(!x690.valid){
continue;
}
CheckValue<IkReal> x691 = IKatan2WithCheck(IkReal((gconst30*new_r11)),IkReal((gconst31*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x690.value)))+(x691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x692=IKcos(j4);
IkReal x693=IKsin(j4);
IkReal x694=(gconst30*x692);
IkReal x695=(gconst30*x693);
IkReal x696=(gconst31*x692);
IkReal x697=((1.0)*x693);
IkReal x698=(gconst31*x697);
evalcond[0]=(gconst30+((new_r11*x693))+((new_r01*x692)));
evalcond[1]=(x695+x696+new_r11);
evalcond[2]=(x694+(((-1.0)*x698)));
evalcond[3]=(x694+(((-1.0)*x698))+new_r01);
evalcond[4]=((((-1.0)*x695))+(((-1.0)*x696)));
evalcond[5]=((((-1.0)*new_r01*x697))+gconst31+((new_r11*x692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x699=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*new_r11))+((gconst30*new_r01)))),-1);
if(!x699.valid){
continue;
}
CheckValue<IkReal> x700 = IKatan2WithCheck(IkReal((gconst30*gconst31)),IkReal(((-1.0)*(gconst30*gconst30))),IKFAST_ATAN2_MAGTHRESH);
if(!x700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x699.value)))+(x700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x701=IKcos(j4);
IkReal x702=IKsin(j4);
IkReal x703=(gconst30*x701);
IkReal x704=(gconst30*x702);
IkReal x705=(gconst31*x701);
IkReal x706=((1.0)*x702);
IkReal x707=(gconst31*x706);
evalcond[0]=(((new_r01*x701))+gconst30+((new_r11*x702)));
evalcond[1]=(x704+x705+new_r11);
evalcond[2]=((((-1.0)*x707))+x703);
evalcond[3]=((((-1.0)*x707))+x703+new_r01);
evalcond[4]=((((-1.0)*x704))+(((-1.0)*x705)));
evalcond[5]=(gconst31+((new_r11*x701))+(((-1.0)*new_r01*x706)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x708=IKPowWithIntegerCheck(gconst31,-1);
if(!x708.valid){
continue;
}
cj4array[0]=(new_r00*(x708.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x709=IKsin(j4);
IkReal x710=IKcos(j4);
IkReal x711=((-1.0)*x709);
evalcond[0]=(new_r11*x709);
evalcond[1]=(gconst31*x711);
evalcond[2]=(new_r00*x711);
evalcond[3]=(((gconst31*x710))+new_r11);
evalcond[4]=(gconst31+((new_r11*x710)));
evalcond[5]=(((new_r00*x710))+(((-1.0)*gconst31)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
IkReal x712=((1.0)*(x713.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst30;
cj6=gconst31;
j6=((3.14159265)+(((-1.0)*x712)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x712)));
IkReal gconst30=0;
IkReal x714 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x714)==0){
continue;
}
IkReal gconst31=((-1.0)*new_r11*(pow(x714,-0.5)));
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x716 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x716.valid){
continue;
}
IkReal x715=((1.0)*(x716.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst30;
cj6=gconst31;
j6=((3.14159265)+(((-1.0)*x715)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x715)));
IkReal gconst30=0;
IkReal x717 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x717)==0){
continue;
}
IkReal gconst31=((-1.0)*new_r11*(pow(x717,-0.5)));
j4eval[0]=new_r11;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x719 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x719.valid){
continue;
}
IkReal x718=((1.0)*(x719.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst30;
cj6=gconst31;
j6=((3.14159265)+(((-1.0)*x718)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x718)));
IkReal gconst30=0;
IkReal x720 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x720)==0){
continue;
}
IkReal gconst31=((-1.0)*new_r11*(pow(x720,-0.5)));
j4eval[0]=new_r10;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x721=IKPowWithIntegerCheck(new_r10,-1);
if(!x721.valid){
continue;
}
CheckValue<IkReal> x722=IKPowWithIntegerCheck(gconst31,-1);
if(!x722.valid){
continue;
}
if( IKabs((gconst31*(x721.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11*(x722.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst31*(x721.value)))+IKsqr(((-1.0)*new_r11*(x722.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((gconst31*(x721.value)), ((-1.0)*new_r11*(x722.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x723=IKsin(j4);
IkReal x724=IKcos(j4);
IkReal x725=((1.0)*gconst31);
IkReal x726=((-1.0)*gconst31);
evalcond[0]=(new_r11*x723);
evalcond[1]=(new_r10*x724);
evalcond[2]=(x723*x726);
evalcond[3]=(x724*x726);
evalcond[4]=(new_r11+((gconst31*x724)));
evalcond[5]=(gconst31+((new_r11*x724)));
evalcond[6]=((((-1.0)*x723*x725))+new_r10);
evalcond[7]=((((-1.0)*x725))+((new_r10*x723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x727=IKPowWithIntegerCheck(gconst31,-1);
if(!x727.valid){
continue;
}
CheckValue<IkReal> x728=IKPowWithIntegerCheck(new_r11,-1);
if(!x728.valid){
continue;
}
if( IKabs((new_r10*(x727.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst31*(x728.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x727.value)))+IKsqr(((-1.0)*gconst31*(x728.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((new_r10*(x727.value)), ((-1.0)*gconst31*(x728.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x729=IKsin(j4);
IkReal x730=IKcos(j4);
IkReal x731=((1.0)*gconst31);
IkReal x732=((-1.0)*gconst31);
evalcond[0]=(new_r11*x729);
evalcond[1]=(new_r10*x730);
evalcond[2]=(x729*x732);
evalcond[3]=(x730*x732);
evalcond[4]=(((gconst31*x730))+new_r11);
evalcond[5]=(gconst31+((new_r11*x730)));
evalcond[6]=(new_r10+(((-1.0)*x729*x731)));
evalcond[7]=((((-1.0)*x731))+((new_r10*x729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x733 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x733.valid){
continue;
}
CheckValue<IkReal> x734=IKPowWithIntegerCheck(IKsign(gconst31),-1);
if(!x734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x733.value)+(((1.5707963267949)*(x734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x735=IKsin(j4);
IkReal x736=IKcos(j4);
IkReal x737=((1.0)*gconst31);
IkReal x738=((-1.0)*gconst31);
evalcond[0]=(new_r11*x735);
evalcond[1]=(new_r10*x736);
evalcond[2]=(x735*x738);
evalcond[3]=(x736*x738);
evalcond[4]=(((gconst31*x736))+new_r11);
evalcond[5]=(gconst31+((new_r11*x736)));
evalcond[6]=((((-1.0)*x735*x737))+new_r10);
evalcond[7]=((((-1.0)*x737))+((new_r10*x735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x740 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x740.valid){
continue;
}
IkReal x739=((1.0)*(x740.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst30;
cj6=gconst31;
j6=((3.14159265)+(((-1.0)*x739)));
new_r01=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x739)));
IkReal gconst30=0;
IkReal x741 = new_r11*new_r11;
if(IKabs(x741)==0){
continue;
}
IkReal gconst31=((-1.0)*new_r11*(pow(x741,-0.5)));
j4eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x743 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x743.valid){
continue;
}
IkReal x742=((1.0)*(x743.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst30;
cj6=gconst31;
j6=((3.14159265)+(((-1.0)*x742)));
new_r01=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x742)));
IkReal gconst30=0;
IkReal x744 = new_r11*new_r11;
if(IKabs(x744)==0){
continue;
}
IkReal gconst31=((-1.0)*new_r11*(pow(x744,-0.5)));
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x746 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x746.valid){
continue;
}
IkReal x745=((1.0)*(x746.value));
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
sj6=gconst30;
cj6=gconst31;
j6=((3.14159265)+(((-1.0)*x745)));
new_r01=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x745)));
IkReal gconst30=0;
IkReal x747 = new_r11*new_r11;
if(IKabs(x747)==0){
continue;
}
IkReal gconst31=((-1.0)*new_r11*(pow(x747,-0.5)));
j4eval[0]=new_r11;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x748=IKPowWithIntegerCheck(gconst31,-1);
if(!x748.valid){
continue;
}
CheckValue<IkReal> x749=IKPowWithIntegerCheck(new_r11,-1);
if(!x749.valid){
continue;
}
if( IKabs((new_r10*(x748.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst31*(x749.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x748.value)))+IKsqr(((-1.0)*gconst31*(x749.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((new_r10*(x748.value)), ((-1.0)*gconst31*(x749.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x750=IKsin(j4);
IkReal x751=IKcos(j4);
IkReal x752=((1.0)*gconst31);
evalcond[0]=(new_r11*x750);
evalcond[1]=((-1.0)*gconst31*x750);
evalcond[2]=(new_r11+((gconst31*x751)));
evalcond[3]=(gconst31+((new_r11*x751)));
evalcond[4]=((((-1.0)*x751*x752))+new_r00);
evalcond[5]=((((-1.0)*x750*x752))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x750))+((new_r10*x751)));
evalcond[7]=(((new_r00*x751))+((new_r10*x750))+(((-1.0)*x752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x753 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x753.valid){
continue;
}
CheckValue<IkReal> x754=IKPowWithIntegerCheck(IKsign(gconst31),-1);
if(!x754.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x753.value)+(((1.5707963267949)*(x754.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x755=IKsin(j4);
IkReal x756=IKcos(j4);
IkReal x757=((1.0)*gconst31);
evalcond[0]=(new_r11*x755);
evalcond[1]=((-1.0)*gconst31*x755);
evalcond[2]=(new_r11+((gconst31*x756)));
evalcond[3]=(gconst31+((new_r11*x756)));
evalcond[4]=((((-1.0)*x756*x757))+new_r00);
evalcond[5]=((((-1.0)*x755*x757))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x755))+((new_r10*x756)));
evalcond[7]=(((new_r00*x756))+((new_r10*x755))+(((-1.0)*x757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x758=IKPowWithIntegerCheck(IKsign(gconst31),-1);
if(!x758.valid){
continue;
}
CheckValue<IkReal> x759 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x759.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x758.value)))+(x759.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x760=IKsin(j4);
IkReal x761=IKcos(j4);
IkReal x762=((1.0)*gconst31);
evalcond[0]=(new_r11*x760);
evalcond[1]=((-1.0)*gconst31*x760);
evalcond[2]=(((gconst31*x761))+new_r11);
evalcond[3]=(((new_r11*x761))+gconst31);
evalcond[4]=(new_r00+(((-1.0)*x761*x762)));
evalcond[5]=(new_r10+(((-1.0)*x760*x762)));
evalcond[6]=(((new_r10*x761))+(((-1.0)*new_r00*x760)));
evalcond[7]=(((new_r10*x760))+(((-1.0)*x762))+((new_r00*x761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x763=((1.0)*gconst30);
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x763))+((gconst31*new_r01)))),IkReal(((((-1.0)*gconst31*new_r11))+(((-1.0)*new_r01*x763)))),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
CheckValue<IkReal> x765=IKPowWithIntegerCheck(IKsign(((gconst30*gconst30)+(gconst31*gconst31))),-1);
if(!x765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x764.value)+(((1.5707963267949)*(x765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x766=IKcos(j4);
IkReal x767=IKsin(j4);
IkReal x768=((1.0)*gconst31);
IkReal x769=(gconst30*x766);
IkReal x770=(gconst30*x767);
IkReal x771=((1.0)*x767);
IkReal x772=(x767*x768);
evalcond[0]=(((new_r11*x767))+gconst30+((new_r01*x766)));
evalcond[1]=(((gconst31*x766))+x770+new_r11);
evalcond[2]=(x769+(((-1.0)*x772))+new_r01);
evalcond[3]=(((new_r10*x766))+(((-1.0)*new_r00*x771))+gconst30);
evalcond[4]=(((new_r11*x766))+(((-1.0)*new_r01*x771))+gconst31);
evalcond[5]=(x769+(((-1.0)*x772))+new_r10);
evalcond[6]=(((new_r10*x767))+(((-1.0)*x768))+((new_r00*x766)));
evalcond[7]=((((-1.0)*x766*x768))+new_r00+(((-1.0)*x770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x773=((1.0)*new_r11);
CheckValue<IkReal> x774 = IKatan2WithCheck(IkReal(((((-1.0)*gconst30*x773))+((gconst31*new_r01)))),IkReal(((((-1.0)*gconst31*x773))+(((-1.0)*gconst30*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x774.valid){
continue;
}
CheckValue<IkReal> x775=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x774.value)+(((1.5707963267949)*(x775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x776=IKcos(j4);
IkReal x777=IKsin(j4);
IkReal x778=((1.0)*gconst31);
IkReal x779=(gconst30*x776);
IkReal x780=(gconst30*x777);
IkReal x781=((1.0)*x777);
IkReal x782=(x777*x778);
evalcond[0]=(gconst30+((new_r11*x777))+((new_r01*x776)));
evalcond[1]=(((gconst31*x776))+x780+new_r11);
evalcond[2]=((((-1.0)*x782))+x779+new_r01);
evalcond[3]=(gconst30+((new_r10*x776))+(((-1.0)*new_r00*x781)));
evalcond[4]=((((-1.0)*new_r01*x781))+gconst31+((new_r11*x776)));
evalcond[5]=((((-1.0)*x782))+x779+new_r10);
evalcond[6]=(((new_r00*x776))+((new_r10*x777))+(((-1.0)*x778)));
evalcond[7]=((((-1.0)*x776*x778))+(((-1.0)*x780))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x783=((1.0)*gconst30);
CheckValue<IkReal> x784 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x783))+((gconst30*new_r01)))),IkReal(((((-1.0)*new_r11*x783))+(((-1.0)*new_r00*x783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x784.valid){
continue;
}
CheckValue<IkReal> x785=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x784.value)+(((1.5707963267949)*(x785.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x786=IKcos(j4);
IkReal x787=IKsin(j4);
IkReal x788=((1.0)*gconst31);
IkReal x789=(gconst30*x786);
IkReal x790=(gconst30*x787);
IkReal x791=((1.0)*x787);
IkReal x792=(x787*x788);
evalcond[0]=(((new_r11*x787))+gconst30+((new_r01*x786)));
evalcond[1]=(((gconst31*x786))+x790+new_r11);
evalcond[2]=((((-1.0)*x792))+x789+new_r01);
evalcond[3]=(((new_r10*x786))+gconst30+(((-1.0)*new_r00*x791)));
evalcond[4]=((((-1.0)*new_r01*x791))+((new_r11*x786))+gconst31);
evalcond[5]=((((-1.0)*x792))+x789+new_r10);
evalcond[6]=(((new_r10*x787))+(((-1.0)*x788))+((new_r00*x786)));
evalcond[7]=((((-1.0)*x786*x788))+(((-1.0)*x790))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j4eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x794 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x794.valid){
continue;
}
IkReal x793=x794.value;
j4array[0]=((-1.0)*x793);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x793)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j4))))+(((-1.0)*new_r00*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x795=((1.0)*sj6);
CheckValue<IkReal> x796=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x796.valid){
continue;
}
CheckValue<IkReal> x797 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x795))+((cj6*new_r01)))),IkReal(((((-1.0)*new_r01*x795))+(((-1.0)*cj6*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x796.value)))+(x797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x798=IKsin(j4);
IkReal x799=IKcos(j4);
IkReal x800=((1.0)*cj6);
IkReal x801=(sj6*x799);
IkReal x802=(sj6*x798);
IkReal x803=((1.0)*x798);
IkReal x804=(x798*x800);
evalcond[0]=(sj6+((new_r11*x798))+((new_r01*x799)));
evalcond[1]=(((cj6*x799))+new_r11+x802);
evalcond[2]=(new_r01+x801+(((-1.0)*x804)));
evalcond[3]=(sj6+((new_r10*x799))+(((-1.0)*new_r00*x803)));
evalcond[4]=((((-1.0)*new_r01*x803))+cj6+((new_r11*x799)));
evalcond[5]=(new_r10+x801+(((-1.0)*x804)));
evalcond[6]=(((new_r10*x798))+((new_r00*x799))+(((-1.0)*x800)));
evalcond[7]=((((-1.0)*x802))+(((-1.0)*x799*x800))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x805=((1.0)*sj6);
CheckValue<IkReal> x806 = IKatan2WithCheck(IkReal((((new_r01*sj6))+(((-1.0)*new_r10*x805)))),IkReal(((((-1.0)*new_r00*x805))+(((-1.0)*new_r11*x805)))),IKFAST_ATAN2_MAGTHRESH);
if(!x806.valid){
continue;
}
CheckValue<IkReal> x807=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x807.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x806.value)+(((1.5707963267949)*(x807.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x808=IKsin(j4);
IkReal x809=IKcos(j4);
IkReal x810=((1.0)*cj6);
IkReal x811=(sj6*x809);
IkReal x812=(sj6*x808);
IkReal x813=((1.0)*x808);
IkReal x814=(x808*x810);
evalcond[0]=(sj6+((new_r11*x808))+((new_r01*x809)));
evalcond[1]=(((cj6*x809))+new_r11+x812);
evalcond[2]=((((-1.0)*x814))+new_r01+x811);
evalcond[3]=(sj6+(((-1.0)*new_r00*x813))+((new_r10*x809)));
evalcond[4]=(cj6+(((-1.0)*new_r01*x813))+((new_r11*x809)));
evalcond[5]=((((-1.0)*x814))+new_r10+x811);
evalcond[6]=((((-1.0)*x810))+((new_r00*x809))+((new_r10*x808)));
evalcond[7]=((((-1.0)*x809*x810))+(((-1.0)*x812))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x815 = IKatan2WithCheck(IkReal(((-1.0)+(new_r01*new_r01)+(cj6*cj6))),IkReal(((((-1.0)*new_r01*new_r11))+(((-1.0)*cj6*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x815.valid){
continue;
}
CheckValue<IkReal> x816=IKPowWithIntegerCheck(IKsign((((new_r11*sj6))+((cj6*new_r01)))),-1);
if(!x816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x815.value)+(((1.5707963267949)*(x816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x817=IKsin(j4);
IkReal x818=IKcos(j4);
IkReal x819=((1.0)*cj6);
IkReal x820=(sj6*x818);
IkReal x821=(sj6*x817);
IkReal x822=((1.0)*x817);
IkReal x823=(x817*x819);
evalcond[0]=(sj6+((new_r11*x817))+((new_r01*x818)));
evalcond[1]=(new_r11+x821+((cj6*x818)));
evalcond[2]=((((-1.0)*x823))+new_r01+x820);
evalcond[3]=(sj6+((new_r10*x818))+(((-1.0)*new_r00*x822)));
evalcond[4]=(cj6+((new_r11*x818))+(((-1.0)*new_r01*x822)));
evalcond[5]=((((-1.0)*x823))+new_r10+x820);
evalcond[6]=(((new_r00*x818))+((new_r10*x817))+(((-1.0)*x819)));
evalcond[7]=((((-1.0)*x818*x819))+(((-1.0)*x821))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x825 = IKatan2WithCheck(IkReal((new_r10*new_r22)),IkReal(((-1.0)*new_r00*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x825.valid){
continue;
}
IkReal x824=x825.value;
j4array[0]=((-1.0)*x824);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x824)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x826=IKcos(j4);
IkReal x827=IKsin(j4);
IkReal x828=(new_r11*x826);
IkReal x829=((1.0)*x827);
evalcond[0]=(((new_r01*x826))+((new_r11*x827)));
evalcond[1]=(((new_r10*x827))+((new_r00*x826)));
evalcond[2]=(((new_r10*x826))+(((-1.0)*new_r00*x829)));
evalcond[3]=((((-1.0)*new_r01*x829))+x828);
evalcond[4]=(((new_r22*x828))+(((-1.0)*new_r01*new_r22*x829)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x831 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x831.valid){
continue;
}
IkReal x830=x831.value;
j4array[0]=((-1.0)*x830);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x830)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x832=IKcos(j4);
IkReal x833=IKsin(j4);
IkReal x834=(new_r10*x832);
IkReal x835=(new_r11*x832);
IkReal x836=((1.0)*new_r00*x833);
IkReal x837=((1.0)*new_r01*x833);
evalcond[0]=(((new_r11*x833))+((new_r01*x832)));
evalcond[1]=((((-1.0)*x836))+x834);
evalcond[2]=((((-1.0)*x837))+x835);
evalcond[3]=((((-1.0)*new_r22*x836))+((new_r22*x834)));
evalcond[4]=((((-1.0)*new_r22*x837))+((new_r22*x835)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x839 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x839.valid){
continue;
}
IkReal x838=x839.value;
j4array[0]=((-1.0)*x838);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x838)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x840=IKcos(j4);
IkReal x841=IKsin(j4);
IkReal x842=(new_r10*x840);
IkReal x843=(new_r11*x840);
IkReal x844=((1.0)*new_r00*x841);
IkReal x845=((1.0)*new_r01*x841);
evalcond[0]=(((new_r10*x841))+((new_r00*x840)));
evalcond[1]=((((-1.0)*x844))+x842);
evalcond[2]=((((-1.0)*x845))+x843);
evalcond[3]=(((new_r22*x842))+(((-1.0)*new_r22*x844)));
evalcond[4]=(((new_r22*x843))+(((-1.0)*new_r22*x845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x847=IKPowWithIntegerCheck(cj5,-1);
if(!x847.valid){
continue;
}
IkReal x846=x847.value;
CheckValue<IkReal> x848=IKPowWithIntegerCheck(new_r01,-1);
if(!x848.valid){
continue;
}
if( IKabs(((-1.0)*new_r02*x846)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x846*(x848.value)*(((((-1.0)*cj5*sj6))+((new_r02*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r02*x846))+IKsqr((x846*(x848.value)*(((((-1.0)*cj5*sj6))+((new_r02*new_r11))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r02*x846), (x846*(x848.value)*(((((-1.0)*cj5*sj6))+((new_r02*new_r11))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x849=IKcos(j4);
IkReal x850=IKsin(j4);
IkReal x851=((1.0)*cj6);
IkReal x852=((1.0)*cj5);
IkReal x853=((1.0)*sj6);
IkReal x854=(new_r10*x849);
IkReal x855=(sj5*x849);
IkReal x856=(new_r01*x850);
IkReal x857=(new_r12*x849);
IkReal x858=(sj6*x850);
IkReal x859=(new_r00*x850);
IkReal x860=(new_r02*x850);
IkReal x861=(new_r11*x849);
IkReal x862=((1.0)*sj5*x850);
evalcond[0]=(new_r02+((cj5*x850)));
evalcond[1]=((((-1.0)*x849*x852))+new_r12);
evalcond[2]=(((new_r02*x849))+((new_r12*x850)));
evalcond[3]=(sj6+((new_r01*x849))+((new_r11*x850)));
evalcond[4]=(((sj6*x849))+((cj6*sj5*x850))+new_r01);
evalcond[5]=((((-1.0)*x851))+((new_r00*x849))+((new_r10*x850)));
evalcond[6]=(((sj5*x858))+(((-1.0)*x849*x851))+new_r00);
evalcond[7]=(new_r11+x858+(((-1.0)*x851*x855)));
evalcond[8]=((((-1.0)*x852))+(((-1.0)*x860))+x857);
evalcond[9]=((((-1.0)*x853*x855))+(((-1.0)*x850*x851))+new_r10);
evalcond[10]=((((-1.0)*x859))+(((-1.0)*sj5*x853))+x854);
evalcond[11]=((((-1.0)*x856))+(((-1.0)*sj5*x851))+x861);
evalcond[12]=(((new_r20*sj5))+(((-1.0)*x852*x859))+((cj5*x854)));
evalcond[13]=((((-1.0)*x852*x856))+((cj5*x861))+((new_r21*sj5)));
evalcond[14]=(((new_r12*x855))+(((-1.0)*new_r22*x852))+(((-1.0)*sj5*x860)));
evalcond[15]=((-1.0)+(((-1.0)*x852*x860))+((new_r22*sj5))+((cj5*x857)));
evalcond[16]=(((sj5*x854))+(((-1.0)*x853))+(((-1.0)*new_r20*x852))+(((-1.0)*sj5*x859)));
evalcond[17]=((((-1.0)*new_r21*x852))+(((-1.0)*x851))+((new_r11*x855))+(((-1.0)*sj5*x856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x863=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x863.valid){
continue;
}
CheckValue<IkReal> x864 = IKatan2WithCheck(IkReal(((-1.0)*new_r02)),IkReal(new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x863.value)))+(x864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x865=IKcos(j4);
IkReal x866=IKsin(j4);
IkReal x867=((1.0)*cj6);
IkReal x868=((1.0)*cj5);
IkReal x869=((1.0)*sj6);
IkReal x870=(new_r10*x865);
IkReal x871=(sj5*x865);
IkReal x872=(new_r01*x866);
IkReal x873=(new_r12*x865);
IkReal x874=(sj6*x866);
IkReal x875=(new_r00*x866);
IkReal x876=(new_r02*x866);
IkReal x877=(new_r11*x865);
IkReal x878=((1.0)*sj5*x866);
evalcond[0]=(((cj5*x866))+new_r02);
evalcond[1]=((((-1.0)*x865*x868))+new_r12);
evalcond[2]=(((new_r12*x866))+((new_r02*x865)));
evalcond[3]=(((new_r01*x865))+sj6+((new_r11*x866)));
evalcond[4]=(((cj6*sj5*x866))+((sj6*x865))+new_r01);
evalcond[5]=((((-1.0)*x867))+((new_r00*x865))+((new_r10*x866)));
evalcond[6]=((((-1.0)*x865*x867))+((sj5*x874))+new_r00);
evalcond[7]=((((-1.0)*x867*x871))+new_r11+x874);
evalcond[8]=((((-1.0)*x868))+(((-1.0)*x876))+x873);
evalcond[9]=((((-1.0)*x866*x867))+(((-1.0)*x869*x871))+new_r10);
evalcond[10]=((((-1.0)*x875))+(((-1.0)*sj5*x869))+x870);
evalcond[11]=((((-1.0)*x872))+(((-1.0)*sj5*x867))+x877);
evalcond[12]=(((new_r20*sj5))+(((-1.0)*x868*x875))+((cj5*x870)));
evalcond[13]=((((-1.0)*x868*x872))+((new_r21*sj5))+((cj5*x877)));
evalcond[14]=(((new_r12*x871))+(((-1.0)*new_r22*x868))+(((-1.0)*sj5*x876)));
evalcond[15]=((-1.0)+(((-1.0)*x868*x876))+((new_r22*sj5))+((cj5*x873)));
evalcond[16]=((((-1.0)*x869))+((sj5*x870))+(((-1.0)*sj5*x875))+(((-1.0)*new_r20*x868)));
evalcond[17]=((((-1.0)*x867))+(((-1.0)*new_r21*x868))+((new_r11*x871))+(((-1.0)*sj5*x872)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x879=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x879.valid){
continue;
}
CheckValue<IkReal> x880 = IKatan2WithCheck(IkReal(((-1.0)*new_r02)),IkReal(new_r12),IKFAST_ATAN2_MAGTHRESH);
if(!x880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x879.value)))+(x880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x881=IKcos(j4);
IkReal x882=IKsin(j4);
IkReal x883=((1.0)*cj5);
IkReal x884=(new_r02*x882);
IkReal x885=(new_r12*x881);
IkReal x886=(cj5*x881);
evalcond[0]=(((cj5*x882))+new_r02);
evalcond[1]=((((-1.0)*x881*x883))+new_r12);
evalcond[2]=(((new_r12*x882))+((new_r02*x881)));
evalcond[3]=((((-1.0)*x884))+(((-1.0)*x883))+x885);
evalcond[4]=(((new_r10*x886))+((new_r20*sj5))+(((-1.0)*new_r00*x882*x883)));
evalcond[5]=(((new_r11*x886))+((new_r21*sj5))+(((-1.0)*new_r01*x882*x883)));
evalcond[6]=(((sj5*x885))+(((-1.0)*new_r22*x883))+(((-1.0)*sj5*x884)));
evalcond[7]=((-1.0)+(((-1.0)*x883*x884))+((new_r22*sj5))+((cj5*x885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=cj4;
j6eval[1]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
j6eval[0]=cj5;
j6eval[1]=sj4;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x887=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x887))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x887)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x887))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x887))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x887))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x887))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x888=IKcos(j6);
IkReal x889=IKsin(j6);
IkReal x890=((1.0)*sj4);
IkReal x891=(sj4*x889);
IkReal x892=((1.0)*x888);
IkReal x893=(sj4*x888);
IkReal x894=(cj4*x889);
IkReal x895=(cj4*x892);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x889);
evalcond[1]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x892)));
evalcond[2]=(new_r01+x894+x893);
evalcond[3]=((((-1.0)*x895))+new_r00+x891);
evalcond[4]=((((-1.0)*x895))+new_r11+x891);
evalcond[5]=(((cj4*new_r10))+(((-1.0)*x889))+(((-1.0)*new_r00*x890)));
evalcond[6]=(((cj4*new_r11))+(((-1.0)*x892))+(((-1.0)*new_r01*x890)));
evalcond[7]=((((-1.0)*x894))+(((-1.0)*x888*x890))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x896=((1.0)*new_r11);
if( IKabs(((((-1.0)*cj4*new_r01))+(((-1.0)*sj4*x896)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj4))+(((-1.0)*cj4*x896)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*new_r01))+(((-1.0)*sj4*x896))))+IKsqr((((new_r01*sj4))+(((-1.0)*cj4*x896))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*new_r01))+(((-1.0)*sj4*x896))), (((new_r01*sj4))+(((-1.0)*cj4*x896))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x897=IKsin(j6);
IkReal x898=IKcos(j6);
IkReal x899=((1.0)*sj4);
IkReal x900=(cj4*x897);
IkReal x901=((1.0)*x898);
IkReal x902=(x898*x899);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x897);
evalcond[1]=(((cj4*new_r10))+(((-1.0)*new_r00*x899))+x897);
evalcond[2]=(((cj4*new_r11))+(((-1.0)*new_r01*x899))+x898);
evalcond[3]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x901)));
evalcond[4]=(((sj4*x897))+((cj4*x898))+new_r11);
evalcond[5]=((((-1.0)*x902))+new_r01+x900);
evalcond[6]=((((-1.0)*x902))+new_r10+x900);
evalcond[7]=((((-1.0)*cj4*x901))+(((-1.0)*x897*x899))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x903=IKsin(j6);
IkReal x904=IKcos(j6);
IkReal x905=((1.0)*sj5);
IkReal x906=((1.0)*cj5);
IkReal x907=((1.0)*x904);
evalcond[0]=(new_r01+x903);
evalcond[1]=(((new_r12*x903))+new_r20);
evalcond[2]=(((new_r12*x904))+new_r21);
evalcond[3]=((((-1.0)*x907))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*x904*x905)));
evalcond[5]=((((-1.0)*x903*x905))+new_r10);
evalcond[6]=((((-1.0)*new_r20*x906))+((new_r10*sj5))+(((-1.0)*x903)));
evalcond[7]=(((new_r11*sj5))+(((-1.0)*x907))+(((-1.0)*new_r21*x906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x908=IKsin(j6);
IkReal x909=IKcos(j6);
CheckValue<IkReal> x915=IKPowWithIntegerCheck(new_r12,-1);
if(!x915.valid){
continue;
}
IkReal x910=x915.value;
IkReal x911=new_r22*new_r22;
IkReal x912=((1.0)*x909);
IkReal x913=((1.0)*x908);
IkReal x914=(x910*x911);
evalcond[0]=((((-1.0)*new_r01))+x908);
evalcond[1]=(((sj5*x909))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x913))+new_r20);
evalcond[3]=((((-1.0)*new_r12*x912))+new_r21);
evalcond[4]=((((-1.0)*x912))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*sj5*x913))+(((-1.0)*new_r10)));
evalcond[6]=((((-1.0)*x913))+((new_r12*new_r20))+((new_r20*x914)));
evalcond[7]=(((new_r21*x914))+(((-1.0)*x912))+((new_r12*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x916=IKsin(j6);
IkReal x917=IKcos(j6);
IkReal x918=((1.0)*x917);
evalcond[0]=(new_r20+x916);
evalcond[1]=(new_r21+x917);
evalcond[2]=(((cj4*x916))+new_r01);
evalcond[3]=(new_r11+((sj4*x916)));
evalcond[4]=(new_r10+((new_r02*x917)));
evalcond[5]=((((-1.0)*cj4*x918))+new_r00);
evalcond[6]=(((cj4*new_r01))+((new_r11*sj4))+x916);
evalcond[7]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r20, new_r21);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x919=IKsin(j6);
IkReal x920=IKcos(j6);
IkReal x921=((1.0)*x920);
evalcond[0]=((((-1.0)*x919))+new_r20);
evalcond[1]=((((-1.0)*x921))+new_r21);
evalcond[2]=(((cj4*x919))+new_r01);
evalcond[3]=(new_r11+((sj4*x919)));
evalcond[4]=((((-1.0)*cj4*x921))+new_r00);
evalcond[5]=((((-1.0)*new_r02*x921))+new_r10);
evalcond[6]=(((cj4*new_r01))+((new_r11*sj4))+x919);
evalcond[7]=((((-1.0)*x921))+((cj4*new_r00))+((new_r10*sj4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x922=IKcos(j6);
IkReal x923=IKsin(j6);
CheckValue<IkReal> x929=IKPowWithIntegerCheck(new_r02,-1);
if(!x929.valid){
continue;
}
IkReal x924=x929.value;
IkReal x925=new_r22*new_r22;
IkReal x926=((1.0)*x922);
IkReal x927=(x924*x925);
IkReal x928=((1.0)*x923);
evalcond[0]=(new_r11+x923);
evalcond[1]=((((-1.0)*x926))+new_r10);
evalcond[2]=(((sj5*x922))+new_r01);
evalcond[3]=(((sj5*x923))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x928))+new_r20);
evalcond[5]=((((-1.0)*new_r02*x926))+new_r21);
evalcond[6]=((((-1.0)*x928))+((new_r20*x927))+((new_r02*new_r20)));
evalcond[7]=((((-1.0)*x926))+((new_r21*x927))+((new_r02*new_r21)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j6eval[0]=new_r02;
j6eval[1]=IKsign(new_r02);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j6eval[0]=new_r02;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
j6eval[0]=new_r02;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((-1.0)*new_r21));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x930=IKsin(j6);
IkReal x931=IKcos(j6);
evalcond[0]=(new_r20+x930);
evalcond[1]=(new_r21+x931);
evalcond[2]=((((-1.0)*new_r11))+x930);
evalcond[3]=((((-1.0)*x931))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r20, new_r21);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x932=IKsin(j6);
IkReal x933=((1.0)*(IKcos(j6)));
evalcond[0]=((((-1.0)*x932))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x933)));
evalcond[2]=((((-1.0)*new_r11))+x932);
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r02);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x934=IKsin(j6);
IkReal x935=IKcos(j6);
IkReal x936=((1.0)*sj5);
IkReal x937=((1.0)*x935);
evalcond[0]=((((-1.0)*new_r11))+x934);
evalcond[1]=((((-1.0)*x935*x936))+new_r01);
evalcond[2]=((((-1.0)*x934*x936))+new_r00);
evalcond[3]=((((-1.0)*new_r10))+(((-1.0)*x937)));
evalcond[4]=(((new_r00*sj5))+(((-1.0)*x934)));
evalcond[5]=(((new_r01*sj5))+(((-1.0)*x937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x938=IKcos(j6);
IkReal x939=IKsin(j6);
IkReal x940=((-1.0)*x938);
IkReal x941=((-1.0)*x939);
evalcond[0]=x941;
evalcond[1]=x940;
evalcond[2]=(new_r22*x940);
evalcond[3]=(new_r22*x941);
evalcond[4]=((((-1.0)*new_r11))+x939);
evalcond[5]=((((-1.0)*x938))+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x942=IKPowWithIntegerCheck(new_r02,-1);
if(!x942.valid){
continue;
}
CheckValue<IkReal> x943=IKPowWithIntegerCheck(sj5,-1);
if(!x943.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*(x942.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x943.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*(x942.value)))+IKsqr((new_r01*(x943.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r20*(x942.value)), (new_r01*(x943.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x944=IKsin(j6);
IkReal x945=IKcos(j6);
IkReal x946=((1.0)*sj5);
IkReal x947=((1.0)*cj5);
IkReal x948=((1.0)*x945);
evalcond[0]=(((new_r02*x944))+new_r20);
evalcond[1]=(((new_r02*x945))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x944);
evalcond[3]=((((-1.0)*x945*x946))+new_r01);
evalcond[4]=((((-1.0)*x944*x946))+new_r00);
evalcond[5]=((((-1.0)*x948))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r00*sj5))+(((-1.0)*new_r20*x947))+(((-1.0)*x944)));
evalcond[7]=((((-1.0)*x948))+(((-1.0)*new_r21*x947))+((new_r01*sj5)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x949=IKPowWithIntegerCheck(new_r02,-1);
if(!x949.valid){
continue;
}
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*(x949.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r21*(x949.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r11, ((-1.0)*new_r21*(x949.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x950=IKsin(j6);
IkReal x951=IKcos(j6);
IkReal x952=((1.0)*sj5);
IkReal x953=((1.0)*cj5);
IkReal x954=((1.0)*x951);
evalcond[0]=(((new_r02*x950))+new_r20);
evalcond[1]=(((new_r02*x951))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x950);
evalcond[3]=((((-1.0)*x951*x952))+new_r01);
evalcond[4]=((((-1.0)*x950*x952))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x954)));
evalcond[6]=((((-1.0)*x950))+((new_r00*sj5))+(((-1.0)*new_r20*x953)));
evalcond[7]=((((-1.0)*new_r21*x953))+((new_r01*sj5))+(((-1.0)*x954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x955=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x955.valid){
continue;
}
CheckValue<IkReal> x956 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x956.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x955.value)))+(x956.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x957=IKsin(j6);
IkReal x958=IKcos(j6);
IkReal x959=((1.0)*sj5);
IkReal x960=((1.0)*cj5);
IkReal x961=((1.0)*x958);
evalcond[0]=(((new_r02*x957))+new_r20);
evalcond[1]=(((new_r02*x958))+new_r21);
evalcond[2]=((((-1.0)*new_r11))+x957);
evalcond[3]=((((-1.0)*x958*x959))+new_r01);
evalcond[4]=((((-1.0)*x957*x959))+new_r00);
evalcond[5]=((((-1.0)*new_r10))+(((-1.0)*x961)));
evalcond[6]=((((-1.0)*x957))+((new_r00*sj5))+(((-1.0)*new_r20*x960)));
evalcond[7]=((((-1.0)*new_r21*x960))+((new_r01*sj5))+(((-1.0)*x961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j6eval[0]=1.0;
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j6]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[2]={true,true};
_nj6 = 2;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x963=IKPowWithIntegerCheck(cj5,-1);
if(!x963.valid){
continue;
}
IkReal x962=x963.value;
CheckValue<IkReal> x964=IKPowWithIntegerCheck(sj4,-1);
if(!x964.valid){
continue;
}
CheckValue<IkReal> x965=IKPowWithIntegerCheck(sj5,-1);
if(!x965.valid){
continue;
}
if( IKabs(((-1.0)*new_r20*x962)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x962*(x964.value)*(x965.value)*(((((-1.0)*cj5*new_r01))+((cj4*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20*x962))+IKsqr((x962*(x964.value)*(x965.value)*(((((-1.0)*cj5*new_r01))+((cj4*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r20*x962), (x962*(x964.value)*(x965.value)*(((((-1.0)*cj5*new_r01))+((cj4*new_r20))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x966=IKsin(j6);
IkReal x967=IKcos(j6);
IkReal x968=((1.0)*sj5);
IkReal x969=(new_r01*sj4);
IkReal x970=((1.0)*sj4);
IkReal x971=((1.0)*cj5);
IkReal x972=(cj4*sj5);
IkReal x973=((1.0)*x967);
IkReal x974=(cj4*x966);
IkReal x975=(cj4*x967);
IkReal x976=(sj4*x966);
evalcond[0]=(new_r20+((cj5*x966)));
evalcond[1]=(new_r21+((cj5*x967)));
evalcond[2]=(((cj4*new_r01))+((new_r11*sj4))+x966);
evalcond[3]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x973)));
evalcond[4]=(new_r01+x974+((sj4*sj5*x967)));
evalcond[5]=(((sj5*x976))+new_r00+(((-1.0)*cj4*x973)));
evalcond[6]=(new_r11+x976+(((-1.0)*x968*x975)));
evalcond[7]=(((cj4*new_r10))+(((-1.0)*x966*x968))+(((-1.0)*new_r00*x970)));
evalcond[8]=(((cj4*new_r11))+(((-1.0)*x969))+(((-1.0)*x967*x968)));
evalcond[9]=((((-1.0)*x967*x970))+new_r10+(((-1.0)*x968*x974)));
evalcond[10]=((((-1.0)*new_r20*x971))+(((-1.0)*x966))+(((-1.0)*new_r00*sj4*x968))+((new_r10*x972)));
evalcond[11]=((((-1.0)*x968*x969))+((new_r11*x972))+(((-1.0)*new_r21*x971))+(((-1.0)*x973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x978=IKPowWithIntegerCheck(cj5,-1);
if(!x978.valid){
continue;
}
IkReal x977=x978.value;
CheckValue<IkReal> x979=IKPowWithIntegerCheck(cj4,-1);
if(!x979.valid){
continue;
}
if( IKabs((x977*(x979.value)*(((((-1.0)*cj5*new_r01))+((new_r21*sj4*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21*x977)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x977*(x979.value)*(((((-1.0)*cj5*new_r01))+((new_r21*sj4*sj5))))))+IKsqr(((-1.0)*new_r21*x977))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x977*(x979.value)*(((((-1.0)*cj5*new_r01))+((new_r21*sj4*sj5))))), ((-1.0)*new_r21*x977));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x980=IKsin(j6);
IkReal x981=IKcos(j6);
IkReal x982=((1.0)*sj5);
IkReal x983=(new_r01*sj4);
IkReal x984=((1.0)*sj4);
IkReal x985=((1.0)*cj5);
IkReal x986=(cj4*sj5);
IkReal x987=((1.0)*x981);
IkReal x988=(cj4*x980);
IkReal x989=(cj4*x981);
IkReal x990=(sj4*x980);
evalcond[0]=(((cj5*x980))+new_r20);
evalcond[1]=(((cj5*x981))+new_r21);
evalcond[2]=(((cj4*new_r01))+((new_r11*sj4))+x980);
evalcond[3]=((((-1.0)*x987))+((cj4*new_r00))+((new_r10*sj4)));
evalcond[4]=(((sj4*sj5*x981))+new_r01+x988);
evalcond[5]=(((sj5*x990))+new_r00+(((-1.0)*cj4*x987)));
evalcond[6]=((((-1.0)*x982*x989))+new_r11+x990);
evalcond[7]=(((cj4*new_r10))+(((-1.0)*new_r00*x984))+(((-1.0)*x980*x982)));
evalcond[8]=((((-1.0)*x983))+((cj4*new_r11))+(((-1.0)*x981*x982)));
evalcond[9]=((((-1.0)*x982*x988))+(((-1.0)*x981*x984))+new_r10);
evalcond[10]=((((-1.0)*new_r20*x985))+(((-1.0)*x980))+(((-1.0)*new_r00*sj4*x982))+((new_r10*x986)));
evalcond[11]=((((-1.0)*new_r21*x985))+(((-1.0)*x987))+(((-1.0)*x982*x983))+((new_r11*x986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x991 = IKatan2WithCheck(IkReal(((-1.0)*new_r20)),IkReal(((-1.0)*new_r21)),IKFAST_ATAN2_MAGTHRESH);
if(!x991.valid){
continue;
}
CheckValue<IkReal> x992=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x992.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x991.value)+(((1.5707963267949)*(x992.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x993=IKsin(j6);
IkReal x994=IKcos(j6);
IkReal x995=((1.0)*sj5);
IkReal x996=(new_r01*sj4);
IkReal x997=((1.0)*sj4);
IkReal x998=((1.0)*cj5);
IkReal x999=(cj4*sj5);
IkReal x1000=((1.0)*x994);
IkReal x1001=(cj4*x993);
IkReal x1002=(cj4*x994);
IkReal x1003=(sj4*x993);
evalcond[0]=(((cj5*x993))+new_r20);
evalcond[1]=(((cj5*x994))+new_r21);
evalcond[2]=(((cj4*new_r01))+((new_r11*sj4))+x993);
evalcond[3]=((((-1.0)*x1000))+((cj4*new_r00))+((new_r10*sj4)));
evalcond[4]=(x1001+((sj4*sj5*x994))+new_r01);
evalcond[5]=((((-1.0)*cj4*x1000))+((sj5*x1003))+new_r00);
evalcond[6]=(x1003+(((-1.0)*x1002*x995))+new_r11);
evalcond[7]=((((-1.0)*new_r00*x997))+((cj4*new_r10))+(((-1.0)*x993*x995)));
evalcond[8]=((((-1.0)*x996))+(((-1.0)*x994*x995))+((cj4*new_r11)));
evalcond[9]=((((-1.0)*x994*x997))+(((-1.0)*x1001*x995))+new_r10);
evalcond[10]=((((-1.0)*x993))+((new_r10*x999))+(((-1.0)*new_r00*sj4*x995))+(((-1.0)*new_r20*x998)));
evalcond[11]=((((-1.0)*x1000))+((new_r11*x999))+(((-1.0)*x995*x996))+(((-1.0)*new_r21*x998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - seednoid (b827f13434dce026f36c4327f9835d3f)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

int right_ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint,int *NumSolutions)
{
  double Numik;
  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  for(std::size_t i = 0; i < vfree.size(); ++i)
    vfree[i] = free_joint[i];
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
 
  if( !bSuccess ) {
      return -1;
  }

  sol_joint.resize(solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
    sol_joint[i].resize(solvalues.size());
    for( std::size_t j = 0; j < solvalues.size(); ++j){
      if(j==1){//seednoidはアームが伸びきった状態の第2,第4関節が，+90°のため
	sol_joint[i][j] = M_PI/2-solvalues[j];
	//std::cout << "計算" <<std::endl;
      }
      else if(j==3){
	sol_joint[i][j] = -solvalues[j];
      }
      else if(j==6){
	sol_joint[i][j] = -solvalues[j];
      }
      else
	sol_joint[i][j] = solvalues[j];
    }
  }
  *NumSolutions = (int)solutions.GetNumSolutions();
  return 0;
}

int left_ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint,int *NumSolutions)
{
 double Numik;
  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  for(std::size_t i = 0; i < vfree.size(); ++i)
    vfree[i] = free_joint[i];
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
 
  if( !bSuccess ) {
      return -1;
  }

  sol_joint.resize(solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
    sol_joint[i].resize(solvalues.size());
    for( std::size_t j = 0; j < solvalues.size(); ++j){
      if(j==1){//seednoidはアームが伸びきった状態の第2,第4関節が，+90°のため
	sol_joint[i][j] = M_PI/2-solvalues[j];
	//std::cout << "計算" <<std::endl;
      }
      else if(j==2){
	sol_joint[i][j] = -solvalues[j];
      }
      else if(j==3){
	sol_joint[i][j] = -solvalues[j];
      }
      else if(j==4){
	sol_joint[i][j] = -solvalues[j];
      }
      else if(j==6){
	sol_joint[i][j] = -solvalues[j];
      }
      else
	sol_joint[i][j] = solvalues[j];
    }
  }
  *NumSolutions = (int)solutions.GetNumSolutions();
  return 0;
}

