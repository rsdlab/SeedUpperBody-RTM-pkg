/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-11-17 20:35:52.304282
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97,x98,x99,x100,x101,x102,x103,x104,x105,x106,x107,x108,x109;
x0=IKsin(j[3]);
x1=IKcos(j[3]);
x2=IKsin(j[5]);
x3=IKcos(j[4]);
x4=IKcos(j[5]);
x5=IKcos(j[6]);
x6=IKsin(j[4]);
x7=IKsin(j[6]);
x8=IKcos(j[0]);
x9=IKcos(j[8]);
x10=IKcos(j[7]);
x11=IKsin(j[7]);
x12=IKsin(j[8]);
x13=IKsin(j[1]);
x14=IKsin(j[2]);
x15=IKcos(j[2]);
x16=IKsin(j[0]);
x17=IKcos(j[1]);
x18=IKsin(j[9]);
x19=IKcos(j[9]);
x20=((0.028046)*x0);
x21=((0.134)*x15);
x22=((1.0)*x1);
x23=((0.279642)*x2);
x24=((1.0)*x16);
x25=((0.035)*x1);
x26=((0.275358)*x6);
x27=((1.0)*x19);
x28=((0.279642)*x1);
x29=((1.0)*x11);
x30=((1.0)*x2);
x31=((0.134)*x13);
x32=((1.0)*x9);
x33=((1.0)*x7);
x34=((1.0)*x12);
x35=((1.0)*x18);
x36=((0.035)*x2);
x37=((1.0)*x5);
x38=((1.0)*x10);
x39=(x14*x17);
x40=(x6*x7);
x41=(x3*x7);
x42=(x1*x3);
x43=(x0*x4);
x44=(x15*x17);
x45=(x14*x8);
x46=(x16*x17);
x47=(x5*x6);
x48=((-1.0)*x10);
x49=(x0*x3);
x50=(x15*x8);
x51=(x13*x15);
x52=(x17*x8);
x53=(x14*x16);
x54=((-1.0)*x11);
x55=(x3*x5);
x56=((0.035)*x43);
x57=(x25*x4);
x58=(x0*x26);
x59=((0.01)*x42);
x60=(x11*x4*x6);
x61=(x30*x49);
x62=(x2*x25*x3);
x63=(x36*x49);
x64=(x22*x40);
x65=((0.279642)*x0*x47);
x66=(x25*x40);
x67=((((-1.0)*x15*x24))+((x13*x45)));
x68=(((x13*x53))+x50);
x69=(x45+(((-1.0)*x24*x51)));
x70=(((x2*x47))+x41);
x71=((((-1.0)*x30*x40))+x55);
x72=(((x2*x42))+x43);
x73=((((-1.0)*x0*x30))+((x4*x42)));
x74=(((x1*x4))+(((-1.0)*x61)));
x75=(((x23*x49))+(((-1.0)*x28*x4)));
x76=(x63+(((-1.0)*x57)));
x77=((((-1.0)*x14*x24))+(((-1.0)*x13*x50)));
x78=((((-1.0)*x2*x22))+(((-1.0)*x3*x43)));
x79=((((-0.279642)*x43))+(((-1.0)*x23*x42)));
x80=((((-1.0)*x56))+(((-1.0)*x62)));
x81=(x5*x72);
x82=(x10*x70);
x83=(x11*x73);
x84=(x5*x76);
x85=(x5*x80);
x86=(x7*x79);
x87=(x11*x78);
x88=(((x1*(((0.028046)+x26))))+((x28*x47)));
x89=(x81+(((-1.0)*x64)));
x90=(((x5*x74))+((x0*x40)));
x91=(((x0*x47))+((x7*((x61+(((-1.0)*x22*x4)))))));
x92=(x63+(((0.01)*x49))+(((0.035)*x0*x40)));
IkReal x110=((1.0)*x22);
x93=(((x7*(((((-1.0)*x43))+(((-1.0)*x110*x2*x3))))))+(((-1.0)*x110*x47)));
x94=(x58+x57+x65+x20);
x95=(x10*x90);
x96=(x10*x89);
x97=(x12*x91);
x98=(x12*x93);
x99=(x59+x56+x62+x66);
x100=(((x9*((x60+x82))))+((x12*x71)));
x101=(x83+x96);
x102=(x87+x95);
x103=(x101*x9);
x104=((0.054778)+(((-0.035)*x41))+((x6*(((0.01)+x36))))+(((0.279642)*x55))+(((-1.0)*x36*x47))+(((0.275358)*x3))+(((-1.0)*x23*x40)));
x105=(x103+x98);
x106=(x97+((x102*x9)));
x107=(x84+x94+((x7*x75))+(((-1.0)*x92)));
x108=(x86+x85+x99+(((-1.0)*x88)));
x109=(x107*x17);
eerot[0]=(((x105*x77))+((x106*x52))+((x100*x67)));
IkReal x111=IKcos(j[3]);
IkReal x112=IKcos(j[5]);
IkReal x113=IKcos(j[4]);
IkReal x114=IKsin(j[3]);
IkReal x115=IKsin(j[5]);
IkReal x116=IKcos(j[6]);
IkReal x117=IKsin(j[4]);
IkReal x118=IKsin(j[6]);
IkReal x119=IKcos(j[7]);
IkReal x120=IKsin(j[7]);
IkReal x121=IKcos(j[0]);
IkReal x122=IKsin(j[9]);
IkReal x123=IKcos(j[9]);
IkReal x124=IKcos(j[8]);
IkReal x125=IKsin(j[8]);
IkReal x126=IKsin(j[0]);
IkReal x127=IKsin(j[2]);
IkReal x128=IKcos(j[2]);
IkReal x129=IKsin(j[1]);
IkReal x130=((1.0)*x111);
IkReal x131=((1.0)*x116);
IkReal x132=((1.0)*x128);
IkReal x133=((1.0)*x115);
IkReal x134=((1.0)*x114);
IkReal x135=(x117*x118);
IkReal x136=(x113*x115);
IkReal x137=(x121*x129);
IkReal x138=((-1.0)*x116);
IkReal x139=(x116*x117);
IkReal x140=(x112*x134);
IkReal x141=((1.0)*x112*x117);
IkReal x142=(x113*x114*x133);
IkReal x143=(x134*x135);
IkReal x144=((((-1.0)*x112*x130))+x142);
IkReal x145=(((x114*x133))+(((-1.0)*x112*x113*x130)));
IkReal x146=(((x113*x140))+((x115*x130)));
IkReal x147=((((1.0)*x113*x118))+((x115*x117*x131)));
IkReal x148=((((-1.0)*x140))+(((-1.0)*x130*x136)));
eerot[1]=(((x121*((((x122*((((x120*((((x138*x144))+x143))))+((x119*x146))))))+((x123*((((x124*((((x114*x139))+((x118*x144))))))+((x125*((((x120*x146))+(((-1.0)*x119*((x143+((x131*(((((-1.0)*x142))+((x111*x112))))))))))))))))))))*(IKcos(j[1]))))+((((((x122*((((x120*(((((-1.0)*x111*x135))+((x138*x148))))))+((x119*x145))))))+((x123*((((x125*((((x120*x145))+((x119*(((((-1.0)*x131*((((x111*x136))+((x112*x114))))))+((x130*x135))))))))))+((x124*((((x118*x148))+(((-1.0)*x130*x139))))))))))))*(((((-1.0)*x126*x127))+(((-1.0)*x132*x137))))))+((((((x122*((((x120*x147))+(((-1.0)*x119*x141))))))+((x123*((((x125*(((((-1.0)*x120*x141))+(((-1.0)*x119*x147))))))+((x124*((((x113*x116))+(((-1.0)*x133*x135))))))))))))*((((x127*x137))+(((-1.0)*x126*x132)))))));
eerot[2]=((((((((((((((((-1.0)*(IKcos(j[4]))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((1.0)*(IKcos(j[5]))*(IKsin(j[4]))*(IKsin(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[4]))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((1.0)*(IKcos(j[6]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-1.0)*(IKcos(j[5]))*(IKcos(j[7]))*(IKsin(j[4]))))))*(IKcos(j[9]))))))*(((((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))))+(((IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))))+(((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((1.0)*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[6]))*(IKsin(j[4]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(((((-1.0)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))))+(((((((((((((((1.0)*(IKcos(j[3]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))+(((-1.0)*(((((1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[7]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((-1.0)*(((((1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[0]))*(IKcos(j[1])))));
eetrans[0]=((((-0.018)*x52))+((x104*x67))+(((-1.0)*x16*x21))+(((0.304)*x53))+((x108*x77))+((x31*x45))+((x107*x52))+(((0.304)*x13*x50)));
eerot[3]=(((x105*x69))+((x106*x46))+((x100*x68)));
IkReal x149=IKcos(j[3]);
IkReal x150=IKcos(j[5]);
IkReal x151=IKcos(j[4]);
IkReal x152=IKsin(j[3]);
IkReal x153=IKsin(j[5]);
IkReal x154=IKcos(j[6]);
IkReal x155=IKsin(j[4]);
IkReal x156=IKsin(j[6]);
IkReal x157=IKcos(j[7]);
IkReal x158=IKsin(j[7]);
IkReal x159=IKsin(j[0]);
IkReal x160=IKsin(j[9]);
IkReal x161=IKcos(j[9]);
IkReal x162=IKcos(j[8]);
IkReal x163=IKsin(j[8]);
IkReal x164=IKcos(j[0]);
IkReal x165=IKsin(j[2]);
IkReal x166=IKcos(j[2]);
IkReal x167=IKsin(j[1]);
IkReal x168=((1.0)*x149);
IkReal x169=((1.0)*x155);
IkReal x170=((1.0)*x153);
IkReal x171=((1.0)*x152);
IkReal x172=((1.0)*x154);
IkReal x173=(x155*x156);
IkReal x174=(x151*x153);
IkReal x175=(x159*x167);
IkReal x176=((-1.0)*x154);
IkReal x177=(x154*x155);
IkReal x178=(x150*x171);
IkReal x179=(x151*x152*x170);
IkReal x180=(x152*x156*x169);
IkReal x181=((((-1.0)*x150*x168))+x179);
IkReal x182=(((x152*x170))+(((-1.0)*x150*x151*x168)));
IkReal x183=(((x151*x178))+((x153*x168)));
IkReal x184=(((x153*x154*x169))+(((1.0)*x151*x156)));
IkReal x185=((((-1.0)*x178))+(((-1.0)*x168*x174)));
eerot[4]=(((((((x160*((((x157*x182))+((x158*((((x176*x185))+(((-1.0)*x149*x173))))))))))+((x161*((((x162*((((x156*x185))+(((-1.0)*x168*x177))))))+((x163*((((x157*(((((-1.0)*x172*((((x149*x174))+((x150*x152))))))+((x168*x173))))))+((x158*x182))))))))))))*(((((-1.0)*x166*x175))+((x164*x165))))))+((((((x160*(((((-1.0)*x150*x157*x169))+((x158*x184))))))+((x161*((((x162*((((x151*x154))+(((-1.0)*x153*x156*x169))))))+((x163*(((((-1.0)*x150*x158*x169))+(((-1.0)*x157*x184))))))))))))*((((x164*x166))+((x165*x175))))))+((x159*((((x161*((((x162*((((x152*x177))+((x156*x181))))))+((x163*(((((-1.0)*x157*((((x172*((((x149*x150))+(((-1.0)*x179))))))+x180))))+((x158*x183))))))))))+((x160*((((x157*x183))+((x158*((((x176*x181))+x180))))))))))*(IKcos(j[1])))));
eerot[5]=((((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((1.0)*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[6]))*(IKsin(j[4]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(((((IKcos(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))))+(((((((((((((((1.0)*(IKcos(j[3]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))+(((-1.0)*(((((1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[7]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((-1.0)*(((((1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((((((((((-1.0)*(IKcos(j[4]))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((1.0)*(IKcos(j[5]))*(IKsin(j[4]))*(IKsin(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[4]))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((1.0)*(IKcos(j[6]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-1.0)*(IKcos(j[5]))*(IKcos(j[7]))*(IKsin(j[4]))))))*(IKcos(j[9]))))))*(((((IKcos(j[0]))*(IKcos(j[2]))))+(((IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2])))))))));
eetrans[1]=((((-0.304)*x45))+((x104*x68))+((x107*x46))+((x21*x8))+(((0.304)*x16*x51))+(((-0.018)*x46))+((x108*x69))+((x31*x53)));
IkReal x186=((1.0)*x34);
IkReal x187=((1.0)*x32);
eerot[6]=(((x13*(((((-1.0)*x186*x91))+(((-1.0)*x102*x187))))))+((x100*x39))+((x44*(((((-1.0)*x101*x187))+(((-1.0)*x186*x93)))))));
IkReal x188=((1.0)*x6);
IkReal x189=((1.0)*x37);
IkReal x190=((1.0)*x38);
eerot[7]=(((x39*((((x19*((((x71*x9))+((x12*(((((-1.0)*x190*x70))+(((-1.0)*x188*x29*x4))))))))))+(((-1.0)*x18*((((x29*(((((-1.0)*x30*x47))+(((-1.0)*x3*x33))))))+((x38*x4*x6))))))))))+(((-1.0)*x44*((((x27*((((x9*x93))+((x12*(((((-1.0)*x190*x89))+(((-1.0)*x29*x73))))))))))+((x35*((((x48*x73))+((x54*((x64+(((-1.0)*x189*x72))))))))))))))+(((-1.0)*x13*((((x27*((((x9*x91))+((x12*((((x48*x90))+((x54*x78))))))))))+(((-1.0)*x35*((((x29*(((((-1.0)*x189*x74))+(((-1.0)*x0*x188*x33))))))+((x38*x78)))))))))));
eerot[8]=((((((((((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))+(((-1.0)*(((((1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[7]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((-1.0)*(((((1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[1]))))+(((((((((((((((-1.0)*(IKcos(j[4]))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((1.0)*(IKcos(j[5]))*(IKsin(j[4]))*(IKsin(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[4]))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((1.0)*(IKcos(j[6]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-1.0)*(IKcos(j[5]))*(IKcos(j[7]))*(IKsin(j[4]))))))*(IKcos(j[9]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((((((-1.0)*(((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[6]))*(IKsin(j[4]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((1.0)*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))))*(IKcos(j[1]))*(IKcos(j[2])))));
IkReal x191=((1.0)*x37);
IkReal x192=((1.0)*x33);
eetrans[2]=((0.1455)+(((0.134)*x39))+((x13*(((((-1.0)*x191*x76))+(((-1.0)*x192*x75))+x92+(((-1.0)*x94))))))+((x104*x39))+(((0.304)*x44))+(((0.018)*x13))+((x44*(((((-1.0)*x192*x79))+(((-1.0)*x191*x80))+x88+(((-1.0)*x99)))))));
}

IKFAST_API int GetNumFreeParameters() { return 4; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0, 1, 2, 5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 10; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
j1=pfree[1]; cj1=cos(pfree[1]); sj1=sin(pfree[1]), htj1=tan(pfree[1]*0.5);
j2=pfree[2]; cj2=cos(pfree[2]); sj2=sin(pfree[2]), htj2=tan(pfree[2]*0.5);
j5=pfree[3]; cj5=cos(pfree[3]); sj5=sin(pfree[3]), htj5=tan(pfree[3]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

IkReal x193=IKcos(j1);
IkReal x194=((1.0)*x193);
new_r00=((((-1.0)*r02*x194*(IKcos(j0))))+(((-1.0)*r12*x194*(IKsin(j0))))+((r22*(IKsin(j1)))));
IkReal x195=IKcos(j1);
new_r01=(((r11*x195*(IKsin(j0))))+(((-1.0)*r21*(IKsin(j1))))+((r01*x195*(IKcos(j0)))));
IkReal x196=IKcos(j1);
new_r02=(((r10*x196*(IKsin(j0))))+((r00*x196*(IKcos(j0))))+(((-1.0)*r20*(IKsin(j1)))));
IkReal x197=IKcos(j1);
IkReal x198=IKsin(j1);
new_px=((0.018)+((py*x197*(IKsin(j0))))+(((0.1455)*x198))+(((-1.0)*pz*x198))+((px*x197*(IKcos(j0)))));
IkReal x199=IKcos(j2);
IkReal x200=IKsin(j0);
IkReal x201=IKsin(j1);
IkReal x202=IKcos(j0);
IkReal x203=IKsin(j2);
IkReal x204=(x199*x201);
new_r10=(((r12*x200*x204))+(((-1.0)*r12*x202*x203))+((r22*x199*(IKcos(j1))))+((r02*x200*x203))+((r02*x202*x204)));
IkReal x205=IKsin(j0);
IkReal x206=IKsin(j2);
IkReal x207=IKcos(j2);
IkReal x208=IKcos(j0);
IkReal x209=IKsin(j1);
IkReal x210=((1.0)*x207);
new_r11=((((-1.0)*r21*x210*(IKcos(j1))))+((r11*x206*x208))+(((-1.0)*r01*x205*x206))+(((-1.0)*r01*x208*x209*x210))+(((-1.0)*r11*x205*x209*x210)));
IkReal x211=IKcos(j2);
IkReal x212=IKcos(j0);
IkReal x213=IKsin(j1);
IkReal x214=IKsin(j0);
IkReal x215=IKsin(j2);
IkReal x216=((1.0)*x211*x213);
new_r12=((((-1.0)*r10*x214*x216))+((r10*x212*x215))+(((-1.0)*r00*x212*x216))+(((-1.0)*r20*x211*(IKcos(j1))))+(((-1.0)*r00*x214*x215)));
IkReal x217=IKcos(j0);
IkReal x218=IKcos(j2);
IkReal x219=IKcos(j1);
IkReal x220=IKsin(j1);
IkReal x221=IKsin(j0);
IkReal x222=IKsin(j2);
IkReal x223=((1.0)*px);
IkReal x224=(x218*x219);
IkReal x225=(x218*x220);
new_py=((0.304)+(((0.1455)*x224))+(((-1.0)*py*x221*x225))+((py*x217*x222))+(((-1.0)*x221*x222*x223))+(((-1.0)*pz*x224))+(((-1.0)*x217*x223*x225)));
IkReal x226=IKcos(j2);
IkReal x227=IKcos(j0);
IkReal x228=IKsin(j0);
IkReal x229=IKsin(j1);
IkReal x230=IKsin(j2);
IkReal x231=((1.0)*x230);
new_r20=(((r02*x226*x228))+(((-1.0)*r02*x227*x229*x231))+(((-1.0)*r12*x228*x229*x231))+(((-1.0)*r22*x231*(IKcos(j1))))+(((-1.0)*r12*x226*x227)));
IkReal x232=IKsin(j2);
IkReal x233=IKsin(j1);
IkReal x234=IKcos(j0);
IkReal x235=IKcos(j2);
IkReal x236=IKsin(j0);
IkReal x237=(x232*x233);
new_r21=((((-1.0)*r01*x235*x236))+((r01*x234*x237))+((r21*x232*(IKcos(j1))))+((r11*x236*x237))+((r11*x234*x235)));
IkReal x238=IKsin(j2);
IkReal x239=IKcos(j0);
IkReal x240=IKsin(j1);
IkReal x241=IKcos(j2);
IkReal x242=IKsin(j0);
IkReal x243=(x238*x240);
new_r22=(((r10*x239*x241))+((r10*x242*x243))+(((-1.0)*r00*x241*x242))+((r20*x238*(IKcos(j1))))+((r00*x239*x243)));
IkReal x244=IKsin(j2);
IkReal x245=IKsin(j1);
IkReal x246=IKcos(j0);
IkReal x247=IKcos(j2);
IkReal x248=IKsin(j0);
IkReal x249=IKcos(j1);
IkReal x250=(x244*x249);
IkReal x251=(x244*x245);
new_pz=((-0.134)+((py*x246*x247))+((pz*x250))+((px*x246*x251))+(((-0.1455)*x250))+((py*x248*x251))+(((-1.0)*px*x247*x248)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x252=((1.0)*px);
IkReal x253=((1.0)*pz);
IkReal x254=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x254))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x253)));
rxp0_2=(((py*r00))+(((-1.0)*r10*x252)));
rxp1_0=((((-1.0)*r21*x254))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x253)));
rxp1_2=((((-1.0)*r11*x252))+((py*r01)));
rxp2_0=((((-1.0)*r22*x254))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x253)));
rxp2_2=((((-1.0)*r12*x252))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x255=((0.109556)*pz);
IkReal x256=((0.056092)*py);
IkReal x257=((1.0)*pp);
IkReal x258=((0.0014)*sj5);
IkReal x259=((((0.07)*cj5))+(((-1.0)*px)));
IkReal x260=((0.3043377926)+x255);
IkReal x261=(x256+x257);
IkReal x262=((0.001231145256)+x258+x255);
IkReal x263=(x260+(((-1.0)*x261)));
IkReal x264=(x256+x260+(((-1.0)*x257)));
IkReal x265=(x262+(((-1.0)*x261)));
IkReal x266=(x256+x262+(((-1.0)*x257)));
IkReal gconst0=x259;
IkReal gconst1=x263;
IkReal gconst2=x265;
IkReal gconst3=x259;
IkReal gconst4=x263;
IkReal gconst5=x265;
IkReal gconst6=x264;
IkReal gconst7=x266;
IkReal gconst8=x264;
IkReal gconst9=x266;
IkReal x267=px*px;
IkReal x268=cj5*cj5;
IkReal x269=sj5*sj5;
IkReal x270=py*py;
IkReal x271=px*px*px;
IkReal x272=(cj5*py);
IkReal x273=((0.0048751090530912)*cj5);
IkReal x274=(px*py);
IkReal x275=(gconst0*gconst5);
IkReal x276=((0.01251194370624)*sj5);
IkReal x277=(cj5*gconst4);
IkReal x278=(gconst2*gconst4);
IkReal x279=((0.012585249856)*gconst0);
IkReal x280=((0.006953018688)*sj5);
IkReal x281=(gconst0*px);
IkReal x282=(gconst1*gconst4);
IkReal x283=(gconst7*gconst8);
IkReal x284=(cj5*px);
IkReal x285=(gconst1*gconst5);
IkReal x286=((0.112184)*gconst2);
IkReal x287=((0.112184)*gconst4);
IkReal x288=(gconst2*px);
IkReal x289=((0.001738254672)*sj5);
IkReal x290=(gconst2*gconst5);
IkReal x291=(cj5*sj5);
IkReal x292=((0.0434563668)*gconst8);
IkReal x293=(gconst6*gconst8);
IkReal x294=((1.0)*gconst3);
IkReal x295=((0.224368)*py);
IkReal x296=((1.0)*px);
IkReal x297=((2.0)*py);
IkReal x298=(gconst6*gconst9);
IkReal x299=(px*sj5);
IkReal x300=(gconst0*gconst8);
IkReal x301=(gconst7*gconst9);
IkReal x302=(gconst1*gconst3);
IkReal x303=((0.003476509344)*sj5);
IkReal x304=(gconst4*gconst7);
IkReal x305=(gconst0*gconst4);
IkReal x306=(gconst0*py);
IkReal x307=((0.00625597185312)*sj5);
IkReal x308=((0.0004226103)*x284);
IkReal x309=((0.00603729)*x267);
IkReal x310=((0.00603729)*x281);
IkReal x311=((0.312798592656)*x268);
IkReal x312=(gconst3*x267);
IkReal x313=((4.0)*x270);
IkReal x314=(gconst3*x297);
IkReal x315=((0.0001251194370624)*x269);
IkReal x316=((1.0)*x267);
IkReal x317=(px*x268);
IkReal x318=((0.0002502388741248)*x269);
IkReal x319=((0.0005004777482496)*x269);
IkReal x320=(gconst1*x267);
IkReal x321=((0.003041945676)*x268);
IkReal x322=((0.00012167782704)*sj5*x284);
IkReal x323=(x267*x289);
IkReal x324=((0.0434563668)*gconst7*x284);
IkReal x325=(x281*x289);
IkReal x326=((0.0434563668)*gconst2*x284);
IkReal x327=((0.00785288)*cj5*x267);
IkReal x328=((0.0004379180297184)*sj5*x268);
IkReal x329=(x267*x315);
IkReal x330=((8.758360594368e-6)*x269*x284);
IkReal x331=(gconst7*x284*x307);
IkReal x332=(x281*x315);
IkReal x333=(gconst2*x284*x307);
IkReal x334=(x333+x326);
IkReal x335=(x331+x324);
IkReal x336=(x332+x325+x310);
IkReal x337=(x308+x309+x330+x322+x323+x329);
op[0]=((((-0.14)*x284*x293))+((x267*x298))+((gconst8*x284*x307))+((x284*x292))+(((0.07)*x283*x284))+x335+(((-1.0)*x293*x316))+(((-0.0049)*x268*x293))+(((-1.0)*x337))+(((-1.0)*x301*x316))+((x267*x283))+((gconst8*x328))+((gconst8*x321))+(((-1.0)*x283*x311))+(((0.07)*x284*x298)));
op[1]=((((-0.0350909973185207)*gconst7*x317))+(((-4.0)*x274*x283))+(((-0.0869127336)*gconst8*x272))+(((4.0)*x274*x301))+((gconst9*x327))+(((1.7516721188736e-5)*x269*x272))+(((-1.0)*gconst7*x272*x276))+(((-0.0005497016)*gconst6*x317))+(((0.28)*x272*x293))+(((0.00024335565408)*sj5*x272))+(((-1.0)*gconst8*x327))+(((0.02414916)*x274))+(((-0.14)*x272*x298))+((gconst7*x327))+((x274*x280))+(((4.9127396245929e-5)*x268*x299))+(((0.000341257633716384)*x317))+(((-0.0869127336)*gconst7*x272))+(((-0.0356406989185207)*gconst8*x317))+(((-1.0)*gconst6*x327))+(((0.0008452206)*x272))+((x274*x319))+(((-4.0)*x274*x298))+(((0.00140363989274083)*x267*x291))+(((4.0)*x274*x293))+(((-0.14)*x272*x283))+(((-1.0)*gconst8*x272*x276))+(((0.0097502181061824)*cj5*x267)));
op[2]=((((-1.0)*gconst6*gconst9*(px*px)))+(((-0.312798592656)*gconst4*gconst7*(cj5*cj5)))+(((-0.01570576)*cj5*gconst9*px*py))+((gconst5*gconst6*(px*px)))+(((4.0)*gconst7*gconst8*(py*py)))+(((-0.00603729)*gconst0*px))+(((2.0)*gconst7*gconst9*(px*px)))+(((0.0434563668)*cj5*gconst0*gconst8))+(((-0.00280727978548166)*cj5*px*py*sj5))+(((-0.00399831616747533)*(cj5*cj5)*(px*px)))+(((-0.0001251194370624)*gconst0*px*(sj5*sj5)))+(((-0.14)*cj5*gconst1*gconst8*px))+(((-0.312798592656)*gconst2*gconst8*(cj5*cj5)))+(((-1.0)*gconst0*gconst6*gconst8*px))+((gconst3*gconst7*gconst8*px))+((gconst0*gconst6*gconst9*px))+(((0.01570576)*cj5*gconst6*px*py))+(((0.006083891352)*gconst8*(cj5*cj5)))+(((-0.07)*cj5*gconst3*gconst6*gconst8))+(((-0.001738254672)*gconst0*px*sj5))+(((-1.0)*gconst3*gconst6*gconst8*px))+(((0.0434563668)*cj5*gconst2*px))+(((-1.0)*gconst7*gconst8*(px*px)))+(((-0.006953018688)*sj5*(py*py)))+(((0.00625597185312)*cj5*gconst0*gconst8*sj5))+(((0.07)*cj5*gconst2*gconst8*px))+(((-0.00012167782704)*cj5*px*sj5))+(((0.07)*cj5*gconst4*gconst7*px))+(((-0.001738254672)*sj5*(px*px)))+(((0.00625597185312)*cj5*gconst2*px*sj5))+(((-0.0049)*gconst1*gconst8*(cj5*cj5)))+((gconst2*gconst8*(px*px)))+((gconst1*gconst9*(px*px)))+(((-0.02414916)*(py*py)))+((gconst4*gconst7*(px*px)))+(((-0.01570576)*cj5*gconst7*px*py))+(((0.07)*cj5*gconst5*gconst6*px))+(((0.0004379180297184)*gconst4*sj5*(cj5*cj5)))+(((-0.0049)*gconst4*gconst6*(cj5*cj5)))+(((0.01570576)*cj5*gconst8*px*py))+(((-1.0)*gconst5*gconst7*(px*px)))+(((-0.625597185312)*gconst7*gconst8*(cj5*cj5)))+(((0.00625597185312)*cj5*gconst4*px*sj5))+(((0.003041945676)*gconst4*(cj5*cj5)))+(((-0.00603729)*(px*px)))+(((-1.0)*gconst1*gconst8*(px*px)))+(((0.01251194370624)*cj5*gconst8*px*sj5))+(((-1.0)*gconst2*gconst9*(px*px)))+(((-1.0)*gconst4*gconst6*(px*px)))+(((0.0434563668)*cj5*gconst7*px))+(((0.0869127336)*cj5*gconst8*px))+(((-0.0005004777482496)*(py*py)*(sj5*sj5)))+(((0.0434563668)*cj5*gconst4*px))+(((-0.0195004362123648)*cj5*px*py))+(((-8.758360594368e-6)*cj5*px*(sj5*sj5)))+(((4.0)*gconst6*gconst9*(py*py)))+(((-0.0001251194370624)*(px*px)*(sj5*sj5)))+(((-0.14)*cj5*gconst4*gconst6*px))+(((-0.0004226103)*cj5*px))+(((0.0008758360594368)*gconst8*sj5*(cj5*cj5)))+(((0.07)*cj5*gconst1*gconst9*px))+(((-0.07)*cj5*gconst6*gconst9*px))+(((0.00625597185312)*cj5*gconst7*px*sj5))+(((-4.0)*gconst7*gconst9*(py*py)))+(((-0.07)*cj5*gconst7*gconst8*px))+(((-0.07)*cj5*gconst0*gconst6*gconst8))+(((-4.0)*gconst6*gconst8*(py*py))));
op[3]=((((-4.0)*gconst1*gconst9*px*py))+(((0.0002502388741248)*gconst0*py*(sj5*sj5)))+(((0.03622374)*px*py))+(((-0.14)*cj5*gconst4*gconst7*py))+(((0.00785288)*cj5*gconst5*(px*px)))+(((0.00785288)*cj5*gconst2*(px*px)))+(((2.0)*gconst6*gconst9*px*py))+(((-0.112184)*gconst3*gconst6*(px*px)))+(((-0.00785288)*cj5*gconst4*(px*px)))+(((-4.0)*gconst5*gconst6*px*py))+(((-0.00785288)*cj5*gconst8*(px*px)))+(((2.0)*gconst0*gconst6*gconst8*py))+(((0.112184)*gconst7*(px*px*px)))+(((-4.0)*gconst2*gconst8*px*py))+(((-0.00785288)*cj5*gconst3*gconst8*px))+(((0.28)*cj5*gconst4*gconst6*py))+(((-0.00785288)*cj5*gconst0*gconst6*px))+(((0.01207458)*gconst0*py))+(((-0.01251194370624)*cj5*gconst2*py*sj5))+(((-0.1738254672)*cj5*gconst7*py))+(((4.0)*gconst5*gconst7*px*py))+(((0.000701819946370414)*cj5*gconst0*px*sj5))+(((4.0)*gconst4*gconst6*px*py))+(((3.5033442377472e-5)*cj5*py*(sj5*sj5)))+(((-0.0701819946370414)*gconst8*px*(cj5*cj5)))+(((2.0)*gconst7*gconst8*px*py))+(((4.0)*gconst1*gconst8*px*py))+(((0.000682515267432768)*px*(cj5*cj5)))+(((-0.01251194370624)*cj5*gconst4*py*sj5))+(((-2.0)*gconst3*gconst7*gconst8*py))+(((4.0)*gconst2*gconst9*px*py))+(((-4.0)*gconst4*gconst7*px*py))+(((-4.0)*gconst7*gconst9*px*py))+(((-0.0356406989185207)*gconst4*px*(cj5*cj5)))+(((-0.00785288)*cj5*gconst0*gconst8*px))+(((0.003476509344)*gconst0*py*sj5))+(((-0.02502388741248)*cj5*gconst8*py*sj5))+(((0.010429528032)*px*py*sj5))+(((-0.00785288)*cj5*gconst3*gconst6*px))+(((-0.112184)*gconst0*gconst8*(px*px)))+(((9.8254792491858e-5)*px*sj5*(cj5*cj5)))+(((-0.112184)*gconst8*(px*px*px)))+(((0.0048751090530912)*cj5*gconst0*px))+(((-2.0)*gconst0*gconst6*gconst9*py))+(((-0.00785288)*cj5*gconst6*(px*px)))+(((0.112184)*gconst0*gconst9*(px*px)))+(((-0.0350909973185207)*gconst2*px*(cj5*cj5)))+(((-0.14)*cj5*gconst2*gconst8*py))+(((0.00210545983911124)*cj5*sj5*(px*px)))+(((0.0007507166223744)*px*py*(sj5*sj5)))+(((-0.14)*cj5*gconst1*gconst9*py))+(((-0.0869127336)*cj5*gconst4*py))+(((2.0)*gconst3*gconst6*gconst8*py))+(((0.112184)*gconst9*(px*px*px)))+(((-0.00785288)*cj5*gconst1*(px*px)))+(((0.112184)*gconst3*gconst7*(px*px)))+(((0.0016904412)*cj5*py))+(((-0.00785288)*cj5*gconst7*(px*px)))+(((-0.0869127336)*cj5*gconst2*py))+(((0.0146253271592736)*cj5*(px*px)))+(((-0.112184)*gconst6*(px*px*px)))+(((-0.0005497016)*gconst1*px*(cj5*cj5)))+(((0.28)*cj5*gconst1*gconst8*py))+(((-0.0701819946370414)*gconst7*px*(cj5*cj5)))+(((0.00048671130816)*cj5*py*sj5))+(((-0.00785288)*cj5*gconst9*(px*px)))+(((-0.02502388741248)*cj5*gconst7*py*sj5))+(((-0.14)*cj5*gconst5*gconst6*py))+(((-0.1738254672)*cj5*gconst8*py)));
op[4]=((((-0.00561455957096331)*cj5*px*py*sj5))+(((-4.0)*gconst5*gconst7*(py*py)))+(((-1.0)*gconst5*gconst6*(px*px)))+(((-0.07)*cj5*gconst5*gconst6*px))+(((0.00012167782704)*cj5*px*sj5))+(((-0.07)*cj5*gconst3*gconst4*gconst6))+(((2.0)*gconst5*gconst7*(px*px)))+((gconst0*gconst1*gconst9*px))+(((0.0434563668)*cj5*gconst8*px))+(((0.224368)*gconst0*gconst8*px*py))+(((-0.01570576)*cj5*gconst2*px*py))+(((-0.00603729)*gconst0*px))+(((-1.0)*gconst1*gconst3*gconst8*px))+(((-0.07)*cj5*gconst0*gconst4*gconst6))+(((-0.00787329688636185)*(cj5*cj5)*(px*px)))+(((2.0)*gconst2*gconst9*(px*px)))+(((0.0434563668)*cj5*gconst0*gconst4))+(((-4.0)*gconst1*gconst8*(py*py)))+(((-0.07)*cj5*gconst0*gconst1*gconst8))+(((-0.0001251194370624)*gconst0*px*(sj5*sj5)))+(((0.0004226103)*cj5*px))+(((-0.224368)*gconst9*py*(px*px)))+(((0.001738254672)*sj5*(px*px)))+(((-0.07)*cj5*gconst2*gconst8*px))+(((-0.0049)*gconst1*gconst4*(cj5*cj5)))+(((-0.01570576)*cj5*gconst5*px*py))+(((-1.0)*gconst0*gconst1*gconst8*px))+((gconst0*gconst5*gconst6*px))+(((-4.0)*gconst2*gconst9*(py*py)))+(((0.0001251194370624)*(px*px)*(sj5*sj5)))+(((0.0869127336)*cj5*gconst0*gconst8))+(((-0.001738254672)*gconst0*px*sj5))+(((0.0008758360594368)*gconst4*sj5*(cj5*cj5)))+(((0.01251194370624)*cj5*gconst4*px*sj5))+(((0.0434563668)*cj5*gconst2*px))+(((-4.0)*gconst4*gconst6*(py*py)))+(((-1.0)*gconst3*gconst4*gconst6*px))+(((-0.07)*cj5*gconst4*gconst7*px))+(((0.01570576)*cj5*gconst4*px*py))+(((-1.0)*gconst0*gconst6*gconst9*px))+(((0.07)*cj5*gconst2*gconst4*px))+(((-0.07)*cj5*gconst1*gconst3*gconst8))+(((-1.0)*gconst7*gconst9*(px*px)))+(((0.00625597185312)*cj5*gconst2*px*sj5))+(((4.0)*gconst4*gconst7*(py*py)))+(((-0.625597185312)*gconst2*gconst8*(cj5*cj5)))+(((-1.0)*gconst0*gconst3*gconst6*gconst8))+(((0.003041945676)*gconst8*(cj5*cj5)))+(((0.00603729)*(px*px)))+(((0.0004379180297184)*gconst8*sj5*(cj5*cj5)))+(((0.006083891352)*gconst4*(cj5*cj5)))+(((8.758360594368e-6)*cj5*px*(sj5*sj5)))+(((-1.0)*gconst0*gconst4*gconst6*px))+(((-0.013906037376)*sj5*(py*py)))+((gconst2*gconst4*(px*px)))+(((-1.0)*gconst1*gconst9*(px*px)))+(((0.01251194370624)*cj5*gconst0*gconst8*sj5))+(((0.224368)*gconst6*py*(px*px)))+((gconst1*gconst5*(px*px)))+(((-1.0)*gconst1*gconst4*(px*px)))+(((-0.0390008724247296)*cj5*px*py))+(((4.0)*gconst1*gconst9*(py*py)))+(((0.00625597185312)*cj5*gconst0*gconst4*sj5))+(((-0.14)*cj5*gconst1*gconst4*px))+(((-0.00625597185312)*cj5*gconst7*px*sj5))+(((-0.04829832)*(py*py)))+(((-0.0010009554964992)*(py*py)*(sj5*sj5)))+(((0.224368)*gconst3*gconst6*px*py))+(((-1.0)*gconst2*gconst8*(px*px)))+(((-0.00088096748992)*cj5*gconst0*(px*px)))+(((-1.0)*gconst3*gconst7*gconst8*px))+(((-0.312798592656)*gconst7*gconst8*(cj5*cj5)))+(((0.07)*cj5*gconst1*gconst5*px))+(((-0.00176193497984)*cj5*(px*px*px)))+(((-1.0)*gconst2*gconst5*(px*px)))+(((4.0)*gconst2*gconst8*(py*py)))+(((-1.0)*gconst4*gconst7*(px*px)))+(((-0.00088096748992)*cj5*gconst3*(px*px)))+((gconst3*gconst4*gconst7*px))+(((0.01570576)*cj5*gconst1*px*py))+(((-0.224368)*gconst0*gconst9*px*py))+((gconst2*gconst3*gconst8*px))+(((0.224368)*gconst8*py*(px*px)))+(((-0.224368)*gconst7*py*(px*px)))+(((-0.625597185312)*gconst4*gconst7*(cj5*cj5)))+(((4.0)*gconst5*gconst6*(py*py)))+(((-0.07)*cj5*gconst1*gconst9*px))+(((-0.224368)*gconst3*gconst7*px*py))+(((0.00625597185312)*cj5*gconst8*px*sj5))+(((0.0869127336)*cj5*gconst4*px))+(((-0.0434563668)*cj5*gconst7*px))+(((-0.312798592656)*gconst2*gconst4*(cj5*cj5))));
op[5]=((((-0.00785288)*cj5*gconst5*(px*px)))+(((-0.01251194370624)*cj5*gconst7*py*sj5))+(((0.0008452206)*cj5*py))+(((0.0005004777482496)*gconst0*py*(sj5*sj5)))+(((-4.0)*gconst2*gconst9*px*py))+(((-0.02502388741248)*cj5*gconst4*py*sj5))+(((-0.00785288)*cj5*gconst4*(px*px)))+(((-0.00785288)*cj5*gconst3*gconst4*px))+(((-0.14)*cj5*gconst2*gconst4*py))+(((0.112184)*gconst2*(px*px*px)))+(((-2.0)*gconst0*gconst1*gconst9*py))+(((-0.112184)*gconst0*gconst4*(px*px)))+(((-0.0350909973185207)*gconst7*px*(cj5*cj5)))+(((-0.112184)*gconst0*gconst3*gconst6*px))+(((-0.00785288)*cj5*gconst0*gconst1*px))+(((2.0)*gconst1*gconst9*px*py))+(((0.006953018688)*gconst0*py*sj5))+(((0.112184)*gconst0*gconst5*(px*px)))+(((-2.0)*gconst2*gconst3*gconst8*py))+(((0.112184)*gconst2*gconst3*(px*px)))+(((-0.112184)*gconst3*gconst7*(px*px)))+(((-4.0)*gconst5*gconst7*px*py))+(((2.0)*gconst3*gconst4*gconst6*py))+(((4.0)*gconst2*gconst5*px*py))+(((-2.0)*gconst0*gconst5*gconst6*py))+(((-0.1738254672)*cj5*gconst4*py))+(((0.00024335565408)*cj5*py*sj5))+(((2.0)*gconst2*gconst8*px*py))+(((-0.0350909973185207)*gconst8*px*(cj5*cj5)))+(((-0.112184)*gconst9*(px*px*px)))+(((-4.0)*gconst1*gconst5*px*py))+(((2.0)*gconst4*gconst7*px*py))+(((-0.1738254672)*cj5*gconst2*py))+(((2.0)*gconst1*gconst3*gconst8*py))+(((-0.112184)*gconst3*gconst8*(px*px)))+(((-0.14)*cj5*gconst1*gconst5*py))+(((1.7516721188736e-5)*cj5*py*(sj5*sj5)))+(((-0.02502388741248)*cj5*gconst2*py*sj5))+(((-0.01251194370624)*cj5*gconst8*py*sj5))+(((-0.112184)*gconst0*gconst6*(px*px)))+(((4.0)*gconst1*gconst4*px*py))+(((-0.112184)*gconst1*gconst3*(px*px)))+(((-4.0)*gconst2*gconst4*px*py))+(((-0.0701819946370414)*gconst2*px*(cj5*cj5)))+(((-0.00785288)*cj5*gconst0*gconst4*px))+(((2.0)*gconst5*gconst6*px*py))+(((-0.0869127336)*cj5*gconst7*py))+(((-0.00785288)*cj5*gconst1*(px*px)))+(((-0.00785288)*cj5*gconst1*gconst3*px))+(((0.00140363989274083)*cj5*gconst0*px*sj5))+(((2.0)*gconst0*gconst4*gconst6*py))+(((-0.112184)*gconst0*gconst9*(px*px)))+(((-0.0701819946370414)*gconst4*px*(cj5*cj5)))+(((2.0)*gconst0*gconst1*gconst8*py))+(((0.28)*cj5*gconst1*gconst4*py))+(((0.02414916)*gconst0*py))+(((0.000341257633716384)*px*(cj5*cj5)))+(((-2.0)*gconst3*gconst4*gconst7*py))+(((-0.112184)*gconst1*(px*px*px)))+(((-0.00785288)*cj5*gconst2*(px*px)))+(((-0.112184)*gconst4*(px*px*px)))+(((0.112184)*gconst5*(px*px*px)))+(((-0.112184)*gconst7*(px*px*px)))+(((-0.112184)*gconst0*gconst3*gconst8*px))+(((0.0097502181061824)*cj5*gconst0*px))+(((4.9127396245929e-5)*px*sj5*(cj5*cj5)))+(((-0.0869127336)*cj5*gconst8*py)));
op[6]=((((-0.012585249856)*(x267*x267)))+(((-1.0)*x270*x280))+((gconst4*x267*x295))+(((-0.07)*x277*x288))+(((-1.0)*gconst2*x267*x295))+(((-1.0)*x290*x313))+(((0.224368)*x274*x302))+(((0.224368)*x274*x305))+(((-1.0)*gconst6*x294*x305))+((x278*x313))+(((-1.0)*x271*x279))+(((-1.0)*gconst1*gconst9*x281))+(((-1.0)*x278*x316))+(((-0.0195004362123648)*px*x272))+(((-0.07)*gconst0*gconst1*x277))+(((-0.02414916)*x270))+((x285*x313))+(((-1.0)*x285*x316))+(((-1.0)*x270*x319))+(((-0.012585249856)*gconst3*x271))+(((-0.00393664844318093)*x267*x268))+(((-1.0)*x282*x313))+(((-1.0)*x281*x282))+(((-0.224368)*gconst2*gconst3*x274))+(((-0.00280727978548166)*x272*x299))+(((0.00625597185312)*x277*x299))+(((-1.0)*gconst1*x294*x300))+x337+x336+(((-1.0)*x279*x312))+(((-0.07)*x284*x285))+(((-1.0)*gconst2*gconst9*x316))+(((-1.0)*gconst8*x288*x294))+(((-0.07)*x277*x302))+((gconst4*x321))+((gconst4*x328))+((cj5*gconst0*x292))+(((-1.0)*x304*x311))+(((-1.0)*gconst6*x275*x296))+(((-1.0)*px*x294*x304))+((gconst0*x276*x277))+(((-1.0)*gconst5*x267*x295))+(((-1.0)*gconst2*gconst8*x311))+((gconst1*px*x275))+(((2.0)*x267*x290))+(((-1.0)*x334))+(((-1.0)*x335))+(((0.0869127336)*gconst0*x277))+(((0.0434563668)*px*x277))+(((-0.625597185312)*x268*x278))+(((-1.0)*gconst5*gconst7*x316))+(((-0.224368)*x274*x275))+((x295*x320))+(((-1.0)*px*x282*x294))+(((0.00625597185312)*x291*x300))+((gconst3*px*x278)));
op[7]=((((-1.0)*x286*x312))+(((-0.112184)*gconst0*x320))+(((-0.0869127336)*gconst4*x272))+(((-1.0)*x278*x314))+((x303*x306))+(((-0.112184)*x281*x302))+(((2.0)*x274*x278))+(((-1.0)*gconst3*x281*x287))+((gconst0*x282*x297))+(((-0.0350909973185207)*x268*x288))+(((-1.0)*gconst4*x272*x276))+(((-1.0)*x287*x312))+(((0.01207458)*x306))+(((-0.112184)*x267*x275))+(((0.000701819946370414)*x281*x291))+((x273*x281))+(((2.0)*x274*x285))+(((-0.01207458)*x274))+((x306*x318))+(((-1.0)*gconst2*x272*x276))+((x282*x314))+(((-1.0)*x271*x286))+(((-4.0)*x274*x290))+(((-0.000701819946370414)*x267*x291))+(((-1.0)*x274*x303))+(((-0.0350909973185207)*gconst4*x317))+(((-1.0)*x267*x273))+(((-1.0)*gconst1*x275*x297))+(((-0.0869127336)*gconst2*x272))+(((-0.112184)*gconst5*x271))+(((-1.0)*x274*x318)));
op[8]=(((gconst0*x277*x307))+(((-1.0)*x290*x316))+(((-1.0)*x278*x311))+(((0.0434563668)*gconst0*x277))+x336+(((-1.0)*gconst0*x282*x294))+(((-1.0)*px*x278*x294))+(((-1.0)*x334))+(((-1.0)*gconst1*x275*x296)));
polyroots8(op,zeror,numroots);
IkReal j3array[8], cj3array[8], sj3array[8], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[8]={true,true,true,true,true,true,true,true};
_nj3 = 8;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j6eval[2];
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x338=px*px;
IkReal x339=cj3*cj3;
IkReal x340=pz*pz;
IkReal x341=py*py;
IkReal x342=(cj5*pz);
IkReal x343=(px*sj3);
IkReal x344=((0.550716)*cj5);
IkReal x345=(cj5*x340);
IkReal x346=(cj3*cj5*py);
IkReal x347=((264.04680134497)*cj5*x339);
j4eval[0]=((((14.8109131810421)*cj5*x343))+(((528.09360268994)*x343*x346))+(((28.9279113681495)*x342))+(((-264.04680134497)*x345))+(((-264.04680134497)*cj5*x338))+(((-1.0)*x341*x347))+(((-14.8109131810421)*x346))+((x338*x347))+(((-1.0)*cj5)));
j4eval[1]=IKsign(((((0.060334242096)*x342))+((x338*x339*x344))+(((-0.0020856757104984)*cj5))+(((0.030890761872)*cj5*x343))+(((-0.030890761872)*x346))+(((-1.0)*x340*x344))+(((1.101432)*x343*x346))+(((-1.0)*x339*x341*x344))+(((-1.0)*x338*x344))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( (((0.975968434013407)+(((0.696638549187219)*pz))+(((-6.35874392262605)*pp))+(((-0.35667466410794)*cj3*py))+(((0.35667466410794)*px*sj3)))) < -1-IKFAST_SINCOS_THRESH || (((0.975968434013407)+(((0.696638549187219)*pz))+(((-6.35874392262605)*pp))+(((-0.35667466410794)*cj3*py))+(((0.35667466410794)*px*sj3)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x348=IKasin(((0.975968434013407)+(((0.696638549187219)*pz))+(((-6.35874392262605)*pp))+(((-0.35667466410794)*cj3*py))+(((0.35667466410794)*px*sj3))));
j6array[0]=((-1.85730050909461)+(((-1.0)*x348)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((1.28429214449518)+x348);
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j4eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j4eval[0]=((-3.53874046591082)+sj6+(((-3.39432231765567)*cj6)));
j4eval[1]=IKsign(((-0.157271676328)+(((-0.150853323672)*cj6))+(((0.04444284)*sj6))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
IkReal x349=(cj6*pz);
IkReal x350=(cj3*py);
IkReal x351=((0.279642)*sj6);
IkReal x352=(px*sj3);
IkReal x353=((0.035)*cj6);
IkReal x354=(pz*sj6);
IkReal x355=((3.58604002617468)*cj6);
IkReal x356=((28.651640142844)*sj6);
j4eval[0]=((-1.67474529463219)+sj6+(((4.61062289079602)*x352))+(((-4.61062289079602)*x350))+(((28.651640142844)*x349))+(((-3.58604002617468)*x354))+(((-1.46890546517061)*cj6))+((x350*x356))+((x350*x355))+(((28.2127088436402)*pz))+(((-1.0)*x352*x355))+(((-1.0)*x352*x356)));
j4eval[1]=IKsign(((-0.016345630524)+(((0.045)*x352))+(((0.009760069532)*sj6))+(((-0.045)*x350))+(((0.279642)*x349))+(((0.275358)*pz))+(((-0.035)*x354))+((x350*x353))+((x350*x351))+(((-1.0)*x351*x352))+(((-1.0)*x352*x353))+(((-0.014336619476)*cj6))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
IkReal x357=(cj6*pz);
IkReal x358=(px*sj3);
IkReal x359=((0.279642)*cj6);
IkReal x360=((0.035)*sj6);
IkReal x361=((53.1873326464008)*cj6);
IkReal x362=(cj3*py);
IkReal x363=((6.65692793866453)*sj6);
IkReal x364=(pz*sj6);
j4eval[0]=((-1.0)+(((52.3725246667082)*x358))+((x358*x361))+(((-2.72679550673676)*sj6))+(((-1.0)*x361*x362))+(((-8.55890734971154)*pz))+(((-1.0)*x358*x363))+(((6.65692793866453)*x357))+(((-52.3725246667082)*x362))+(((-1.85634513002512)*cj6))+(((53.1873326464008)*x364))+((x362*x363)));
j4eval[1]=IKsign(((-0.005257680468)+(((-0.014336619476)*sj6))+(((-0.045)*pz))+(((0.275358)*x358))+(((-1.0)*x358*x360))+(((-0.009760069532)*cj6))+(((0.035)*x357))+(((-0.275358)*x362))+(((0.279642)*x364))+(((-1.0)*x359*x362))+((x358*x359))+((x360*x362))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x365=cj6*cj6;
IkReal x366=(px*sj3);
IkReal x367=((0.279642)*cj6);
IkReal x368=((0.035)*sj6);
IkReal x369=(cj3*py);
IkReal x370=(cj6*sj6);
CheckValue<IkReal> x371=IKPowWithIntegerCheck(IKsign(((-0.005257680468)+(((0.275358)*x366))+(((-0.014336619476)*sj6))+(((-0.045)*pz))+(((0.279642)*pz*sj6))+(((0.035)*cj6*pz))+(((-0.009760069532)*cj6))+((x366*x367))+(((-1.0)*x367*x369))+(((-0.275358)*x369))+(((-1.0)*x366*x368))+((x368*x369)))),-1);
if(!x371.valid){
continue;
}
CheckValue<IkReal> x372 = IKatan2WithCheck(IkReal(((0.07404639888)+(((0.076974648164)*x365))+(((-0.01927506)*sj6))+(((0.154003323672)*cj6))+(((0.109556)*pz))+(((-1.0)*(pz*pz)))+(((-0.01957494)*x370)))),IkReal(((-0.020642276212)+(((-0.028046)*pz))+(((0.076974648164)*x370))+(((-1.0)*pz*x369))+(((-0.00294636)*cj6))+(((0.078576661836)*sj6))+((pz*x366))+(((-0.054778)*x366))+(((0.01957494)*x365))+(((0.054778)*x369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x371.value)))+(x372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x373=IKsin(j4);
IkReal x374=IKcos(j4);
IkReal x375=((0.279642)*sj6);
IkReal x376=(px*sj3);
IkReal x377=(cj3*py);
IkReal x378=((0.035)*cj6);
IkReal x379=((0.035)*sj6);
IkReal x380=((0.279642)*cj6);
IkReal x381=((0.035)*x373);
IkReal x382=((1.0)*x373);
IkReal x383=((1.0)*x374);
IkReal x384=((0.550716)*x373);
IkReal x385=((0.09)*x374);
evalcond[0]=((0.275358)+(((0.054778)*x374))+(((0.028046)*x373))+(((-1.0)*x376*x382))+(((-1.0)*x379))+x380+((x373*x377))+(((-1.0)*pz*x383)));
evalcond[1]=((0.045)+(((0.054778)*x373))+(((-1.0)*x375))+(((-1.0)*x378))+(((-0.028046)*x374))+((x374*x376))+(((-1.0)*x377*x383))+(((-1.0)*pz*x382)));
evalcond[2]=((0.054778)+(((0.275358)*x374))+((x374*x380))+(((-1.0)*x374*x379))+(((-1.0)*pz))+(((-1.0)*x373*x378))+(((-1.0)*x373*x375))+(((0.045)*x373)));
evalcond[3]=((-0.028046)+(((-1.0)*x377))+(((-1.0)*x373*x380))+(((-0.275358)*x373))+x376+(((-1.0)*x374*x375))+(((-1.0)*x374*x378))+((x373*x379))+(((0.045)*x374)));
evalcond[4]=((-0.0022095874)+((x377*x385))+((x376*x384))+(((-1.0)*x376*x385))+(((0.09)*pz*x373))+(((-0.020375400936)*x373))+(((-0.056092)*x377))+(((0.056092)*x376))+(((-1.0)*pp))+(((0.109556)*pz))+(((0.550716)*pz*x374))+(((-1.0)*x377*x384))+(((-0.027642981048)*x374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1994=cj6*cj6;
IkReal x1995=(cj3*py);
IkReal x1996=(px*sj3);
IkReal x1997=((0.279642)*sj6);
IkReal x1998=((0.035)*cj6);
IkReal x1999=(cj6*sj6);
CheckValue<IkReal> x2000 = IKatan2WithCheck(IkReal(((0.023714883788)+(((-0.01957494)*x1994))+(((-0.028046)*pz))+(((-0.076974648164)*x1999))+(((-0.054778)*x1996))+(((0.054778)*x1995))+(((0.00294636)*cj6))+(((-0.078576661836)*sj6))+((pz*x1996))+(((-1.0)*pz*x1995)))),IkReal(((-0.07722401888)+(((-0.01957494)*x1999))+(((-0.109556)*pz))+(((0.02516778)*sj6))+(pz*pz)+(((0.076974648164)*x1994))+(((0.00315)*cj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2000.valid){
continue;
}
CheckValue<IkReal> x2001=IKPowWithIntegerCheck(IKsign(((-0.016345630524)+(((-1.0)*x1996*x1997))+(((-1.0)*x1996*x1998))+(((-0.045)*x1995))+(((0.009760069532)*sj6))+(((-0.035)*pz*sj6))+(((0.275358)*pz))+((x1995*x1998))+((x1995*x1997))+(((0.045)*x1996))+(((0.279642)*cj6*pz))+(((-0.014336619476)*cj6)))),-1);
if(!x2001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2000.value)+(((1.5707963267949)*(x2001.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2002=IKsin(j4);
IkReal x2003=IKcos(j4);
IkReal x2004=((0.279642)*sj6);
IkReal x2005=(px*sj3);
IkReal x2006=(cj3*py);
IkReal x2007=((0.035)*cj6);
IkReal x2008=((0.035)*sj6);
IkReal x2009=((0.279642)*cj6);
IkReal x2010=((0.035)*x2002);
IkReal x2011=((1.0)*x2002);
IkReal x2012=((1.0)*x2003);
IkReal x2013=((0.550716)*x2002);
IkReal x2014=((0.09)*x2003);
evalcond[0]=((0.275358)+(((-1.0)*pz*x2012))+((x2002*x2006))+x2009+(((-1.0)*x2005*x2011))+(((0.054778)*x2003))+(((-1.0)*x2008))+(((0.028046)*x2002)));
evalcond[1]=((0.045)+(((-1.0)*pz*x2011))+(((-0.028046)*x2003))+(((-1.0)*x2006*x2012))+(((0.054778)*x2002))+(((-1.0)*x2004))+(((-1.0)*x2007))+((x2003*x2005)));
evalcond[2]=((0.054778)+(((0.275358)*x2003))+(((-1.0)*x2003*x2008))+(((-1.0)*x2002*x2007))+(((-1.0)*x2002*x2004))+(((-1.0)*pz))+(((0.045)*x2002))+((x2003*x2009)));
evalcond[3]=((-0.028046)+((x2002*x2008))+(((-1.0)*x2003*x2007))+(((-1.0)*x2003*x2004))+x2005+(((-1.0)*x2002*x2009))+(((-0.275358)*x2002))+(((-1.0)*x2006))+(((0.045)*x2003)));
evalcond[4]=((-0.0022095874)+(((-0.056092)*x2006))+(((0.056092)*x2005))+(((-0.027642981048)*x2003))+(((0.550716)*pz*x2003))+(((-1.0)*x2005*x2014))+((x2005*x2013))+(((-1.0)*x2006*x2013))+(((-1.0)*pp))+(((0.109556)*pz))+(((-0.020375400936)*x2002))+(((0.09)*pz*x2002))+((x2006*x2014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2015=(px*sj3);
IkReal x2016=((0.279642)*cj6);
IkReal x2017=((0.035)*sj6);
IkReal x2018=(cj3*py);
IkReal x2019=((0.035)*cj6);
IkReal x2020=((0.279642)*sj6);
CheckValue<IkReal> x2021 = IKatan2WithCheck(IkReal(((0.010187700468)+(((-0.045)*pz))+((x2015*x2017))+(((0.275358)*x2018))+((x2016*x2018))+(((-1.0)*x2015*x2016))+((pz*x2020))+(((-0.016299839476)*sj6))+(((-1.0)*x2017*x2018))+(((-0.275358)*x2015))+((pz*x2019))+(((0.005925609532)*cj6)))),IkReal(((0.013821490524)+(((-1.0)*pz*x2016))+(((-0.275358)*pz))+(((0.005925609532)*sj6))+((x2018*x2020))+(((-0.045)*x2018))+(((0.045)*x2015))+(((-1.0)*x2015*x2019))+(((0.016299839476)*cj6))+(((-1.0)*x2015*x2020))+((x2018*x2019))+((pz*x2017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2021.valid){
continue;
}
CheckValue<IkReal> x2022=IKPowWithIntegerCheck(IKsign(((-0.157271676328)+(((-0.150853323672)*cj6))+(((0.04444284)*sj6)))),-1);
if(!x2022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2021.value)+(((1.5707963267949)*(x2022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2023=IKsin(j4);
IkReal x2024=IKcos(j4);
IkReal x2025=((0.279642)*sj6);
IkReal x2026=(px*sj3);
IkReal x2027=(cj3*py);
IkReal x2028=((0.035)*cj6);
IkReal x2029=((0.035)*sj6);
IkReal x2030=((0.279642)*cj6);
IkReal x2031=((0.035)*x2023);
IkReal x2032=((1.0)*x2023);
IkReal x2033=((1.0)*x2024);
IkReal x2034=((0.550716)*x2023);
IkReal x2035=((0.09)*x2024);
evalcond[0]=((0.275358)+(((-1.0)*pz*x2033))+x2030+((x2023*x2027))+(((-1.0)*x2026*x2032))+(((-1.0)*x2029))+(((0.054778)*x2024))+(((0.028046)*x2023)));
evalcond[1]=((0.045)+((x2024*x2026))+(((-1.0)*pz*x2032))+(((-0.028046)*x2024))+(((-1.0)*x2025))+(((-1.0)*x2028))+(((0.054778)*x2023))+(((-1.0)*x2027*x2033)));
evalcond[2]=((0.054778)+(((-1.0)*x2023*x2025))+(((-1.0)*x2023*x2028))+((x2024*x2030))+(((-1.0)*pz))+(((-1.0)*x2024*x2029))+(((0.045)*x2023))+(((0.275358)*x2024)));
evalcond[3]=((-0.028046)+(((-0.275358)*x2023))+x2026+(((-1.0)*x2023*x2030))+((x2023*x2029))+(((-1.0)*x2027))+(((-1.0)*x2024*x2025))+(((-1.0)*x2024*x2028))+(((0.045)*x2024)));
evalcond[4]=((-0.0022095874)+((x2027*x2035))+(((-0.027642981048)*x2024))+((x2026*x2034))+(((0.056092)*x2026))+(((-0.020375400936)*x2023))+(((-1.0)*pp))+(((-1.0)*x2026*x2035))+(((0.550716)*pz*x2024))+(((0.109556)*pz))+(((0.09)*pz*x2023))+(((-0.056092)*x2027))+(((-1.0)*x2027*x2034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( (((0.975881121279537)+(((-0.359925798082159)*cj3*py))+(((0.359925798082159)*px*sj3))+(((0.70298849630409)*pz))+(((-6.41670466523139)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((0.975881121279537)+(((-0.359925798082159)*cj3*py))+(((0.359925798082159)*px*sj3))+(((0.70298849630409)*pz))+(((-6.41670466523139)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2036=IKasin(((0.975881121279537)+(((-0.359925798082159)*cj3*py))+(((0.359925798082159)*px*sj3))+(((0.70298849630409)*pz))+(((-6.41670466523139)*pp))));
j6array[0]=((-1.78585154383919)+(((-1.0)*x2036)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((1.3557411097506)+x2036);
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j4eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x2037=(cj6*pz);
IkReal x2038=(px*sj3);
IkReal x2039=((5.90656536023677)*cj6);
IkReal x2040=((47.1921071562094)*sj6);
IkReal x2041=((0.279642)*sj6);
IkReal x2042=(cj3*py);
IkReal x2043=(pz*sj6);
IkReal x2044=((0.035)*cj6);
j4eval[0]=((2.42716136565038)+(((2.75074477789604)*cj6))+((x2040*x2042))+sj6+(((5.90656536023677)*x2043))+(((-46.4691435561164)*pz))+(((4.21897525731198)*x2038))+((x2039*x2042))+(((-4.21897525731198)*x2042))+(((-1.0)*x2038*x2039))+(((-1.0)*x2038*x2040))+(((-47.1921071562094)*x2037)));
j4eval[1]=IKsign(((0.014382410524)+((x2041*x2042))+(((-0.275358)*pz))+((x2042*x2044))+(((0.005925609532)*sj6))+(((-0.025)*x2042))+(((0.016299839476)*cj6))+(((0.025)*x2038))+(((0.035)*x2043))+(((-1.0)*x2038*x2044))+(((-1.0)*x2038*x2041))+(((-0.279642)*x2037))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x2045=(px*sj3);
IkReal x2046=((0.279642)*cj6);
IkReal x2047=((0.035)*sj6);
IkReal x2048=((47.1921071562094)*cj6);
IkReal x2049=(cj3*py);
IkReal x2050=(cj6*pz);
IkReal x2051=(pz*sj6);
IkReal x2052=((5.90656536023677)*sj6);
j4eval[0]=((-1.53438062681988)+(((-47.1921071562094)*x2051))+(((-1.0)*x2045*x2052))+(((2.75074477789604)*sj6))+((x2049*x2052))+(((46.4691435561164)*x2045))+((x2045*x2048))+(((4.21897525731198)*pz))+(((-46.4691435561164)*x2049))+(((-5.90656536023677)*x2050))+(((-1.0)*x2048*x2049))+(((-1.0)*cj6)));
j4eval[1]=IKsign(((-0.009092140468)+(((0.025)*pz))+(((-0.279642)*x2051))+(((-0.005925609532)*cj6))+(((0.016299839476)*sj6))+(((-1.0)*x2045*x2047))+(((-0.035)*x2050))+((x2045*x2046))+(((-0.275358)*x2049))+((x2047*x2049))+(((0.275358)*x2045))+(((-1.0)*x2046*x2049))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x2053=cj3*cj3;
IkReal x2054=px*px;
IkReal x2055=py*py;
IkReal x2056=pz*pz;
IkReal x2057=(cj3*py);
IkReal x2058=(px*sj3);
IkReal x2059=((264.04680134497)*x2054);
IkReal x2060=(x2053*x2055);
j4eval[0]=((1.0)+(((-28.9279113681495)*pz))+(((264.04680134497)*x2060))+(((-528.09360268994)*x2057*x2058))+x2059+(((264.04680134497)*x2056))+(((-1.0)*x2053*x2059))+(((14.8109131810421)*x2057))+(((-14.8109131810421)*x2058)));
j4eval[1]=IKsign(((0.0037872074)+(((-1.0)*x2053*x2054))+(((-0.109556)*pz))+x2060+x2054+x2056+(((0.056092)*x2057))+(((-2.0)*x2057*x2058))+(((-0.056092)*x2058))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2061=cj3*cj3;
IkReal x2062=px*px;
IkReal x2063=(cj3*py);
IkReal x2064=((0.035)*sj6);
IkReal x2065=(px*sj3);
IkReal x2066=((0.279642)*cj6);
IkReal x2067=((0.035)*cj6);
IkReal x2068=((0.279642)*sj6);
CheckValue<IkReal> x2069=IKPowWithIntegerCheck(IKsign(((0.0037872074)+((x2061*(py*py)))+(((-0.109556)*pz))+x2062+(((-2.0)*x2063*x2065))+(pz*pz)+(((-0.056092)*x2065))+(((-1.0)*x2061*x2062))+(((0.056092)*x2063)))),-1);
if(!x2069.valid){
continue;
}
CheckValue<IkReal> x2070 = IKatan2WithCheck(IkReal(((-0.006353240468)+(((-0.014336619476)*sj6))+(((-1.0)*x2063*x2066))+(((-1.0)*x2064*x2065))+(((-0.009760069532)*cj6))+(((-0.275358)*x2063))+((pz*x2067))+((pz*x2068))+((x2063*x2064))+(((0.275358)*x2065))+((x2065*x2066))+(((-0.025)*pz)))),IkReal(((-0.015784710524)+(((0.009760069532)*sj6))+(((-0.025)*x2063))+(((0.275358)*pz))+((pz*x2066))+(((-1.0)*x2065*x2068))+(((-1.0)*x2065*x2067))+(((0.025)*x2065))+((x2063*x2067))+((x2063*x2068))+(((-1.0)*pz*x2064))+(((-0.014336619476)*cj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2069.value)))+(x2070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2071=IKcos(j4);
IkReal x2072=IKsin(j4);
IkReal x2073=((0.035)*cj6);
IkReal x2074=(cj3*py);
IkReal x2075=(px*sj3);
IkReal x2076=((0.279642)*cj6);
IkReal x2077=((0.279642)*sj6);
IkReal x2078=((0.035)*x2072);
IkReal x2079=(pz*x2072);
IkReal x2080=(pz*x2071);
IkReal x2081=((0.550716)*x2072);
IkReal x2082=((0.05)*x2071);
IkReal x2083=(sj6*x2071);
evalcond[0]=((0.025)+x2079+(((-0.054778)*x2072))+(((-1.0)*x2077))+(((-1.0)*x2073))+(((-1.0)*x2071*x2075))+((x2071*x2074))+(((0.028046)*x2071)));
evalcond[1]=((0.275358)+(((-0.035)*sj6))+(((-1.0)*x2080))+x2076+(((0.054778)*x2071))+(((-1.0)*x2072*x2075))+((x2072*x2074))+(((0.028046)*x2072)));
evalcond[2]=((0.054778)+(((-0.025)*x2072))+((x2071*x2076))+(((-1.0)*pz))+(((-0.035)*x2083))+(((0.275358)*x2071))+((x2072*x2073))+((x2072*x2077)));
evalcond[3]=((-0.028046)+((sj6*x2078))+x2075+(((-0.025)*x2071))+((x2071*x2073))+((x2071*x2077))+(((-1.0)*x2074))+(((-0.275358)*x2072))+(((-1.0)*x2072*x2076)));
evalcond[4]=((-0.0008095874)+(((0.056092)*x2075))+(((-0.031569421048)*x2071))+(((-0.012706480936)*x2072))+(((-1.0)*x2074*x2082))+(((-1.0)*x2074*x2081))+(((-1.0)*pp))+(((-0.056092)*x2074))+(((0.109556)*pz))+(((0.550716)*x2080))+(((-0.05)*x2079))+((x2075*x2082))+((x2075*x2081)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2084=cj6*cj6;
IkReal x2085=(px*sj3);
IkReal x2086=((0.279642)*cj6);
IkReal x2087=((0.035)*sj6);
IkReal x2088=(cj3*py);
IkReal x2089=(cj6*sj6);
CheckValue<IkReal> x2090 = IKatan2WithCheck(IkReal(((0.07404639888)+(((0.076974648164)*x2084))+(((-0.01927506)*sj6))+(((-0.01957494)*x2089))+(((0.154003323672)*cj6))+(((0.109556)*pz))+(((-1.0)*(pz*pz))))),IkReal(((0.018207723788)+(((-0.054778)*x2085))+(((-0.028046)*pz))+(((-0.077876661836)*sj6))+(((0.054778)*x2088))+((pz*x2085))+(((-0.076974648164)*x2089))+(((-0.01957494)*x2084))+(((-1.0)*pz*x2088))+(((-0.00264648)*cj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2090.valid){
continue;
}
CheckValue<IkReal> x2091=IKPowWithIntegerCheck(IKsign(((-0.009092140468)+(((0.025)*pz))+((x2085*x2086))+(((-0.275358)*x2088))+(((-0.005925609532)*cj6))+(((-1.0)*x2085*x2087))+(((0.016299839476)*sj6))+(((-1.0)*x2086*x2088))+(((-0.279642)*pz*sj6))+(((-0.035)*cj6*pz))+((x2087*x2088))+(((0.275358)*x2085)))),-1);
if(!x2091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2090.value)+(((1.5707963267949)*(x2091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2092=IKcos(j4);
IkReal x2093=IKsin(j4);
IkReal x2094=((0.035)*cj6);
IkReal x2095=(cj3*py);
IkReal x2096=(px*sj3);
IkReal x2097=((0.279642)*cj6);
IkReal x2098=((0.279642)*sj6);
IkReal x2099=((0.035)*x2093);
IkReal x2100=(pz*x2093);
IkReal x2101=(pz*x2092);
IkReal x2102=((0.550716)*x2093);
IkReal x2103=((0.05)*x2092);
IkReal x2104=(sj6*x2092);
evalcond[0]=((0.025)+(((-1.0)*x2094))+(((-1.0)*x2098))+x2100+((x2092*x2095))+(((0.028046)*x2092))+(((-1.0)*x2092*x2096))+(((-0.054778)*x2093)));
evalcond[1]=((0.275358)+(((0.054778)*x2092))+(((-0.035)*sj6))+x2097+(((-1.0)*x2093*x2096))+(((0.028046)*x2093))+(((-1.0)*x2101))+((x2093*x2095)));
evalcond[2]=((0.054778)+(((-0.025)*x2093))+(((-0.035)*x2104))+(((0.275358)*x2092))+(((-1.0)*pz))+((x2092*x2097))+((x2093*x2094))+((x2093*x2098)));
evalcond[3]=((-0.028046)+(((-0.025)*x2092))+x2096+(((-1.0)*x2093*x2097))+((sj6*x2099))+((x2092*x2098))+((x2092*x2094))+(((-1.0)*x2095))+(((-0.275358)*x2093)));
evalcond[4]=((-0.0008095874)+(((-0.056092)*x2095))+(((-0.05)*x2100))+(((-1.0)*pp))+(((-1.0)*x2095*x2102))+(((-1.0)*x2095*x2103))+(((0.109556)*pz))+(((0.056092)*x2096))+(((0.550716)*x2101))+((x2096*x2103))+((x2096*x2102))+(((-0.012706480936)*x2093))+(((-0.031569421048)*x2092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2105=cj6*cj6;
IkReal x2106=(cj3*py);
IkReal x2107=(px*sj3);
IkReal x2108=((0.279642)*sj6);
IkReal x2109=(cj6*sj6);
IkReal x2110=((0.035)*cj6);
CheckValue<IkReal> x2111=IKPowWithIntegerCheck(IKsign(((0.014382410524)+(((-1.0)*x2107*x2110))+(((-0.279642)*cj6*pz))+(((-0.275358)*pz))+(((-0.025)*x2106))+(((0.005925609532)*sj6))+(((-1.0)*x2107*x2108))+((x2106*x2110))+(((0.016299839476)*cj6))+((x2106*x2108))+(((0.035)*pz*sj6))+(((0.025)*x2107)))),-1);
if(!x2111.valid){
continue;
}
CheckValue<IkReal> x2112 = IKatan2WithCheck(IkReal(((0.015135116212)+(((-0.077876661836)*sj6))+(((0.054778)*x2107))+((pz*x2106))+(((-0.076974648164)*x2109))+(((-0.01957494)*x2105))+(((0.028046)*pz))+(((-0.00264648)*cj6))+(((-0.054778)*x2106))+(((-1.0)*pz*x2107)))),IkReal(((0.07582401888)+(((0.01957494)*x2109))+(((-0.076974648164)*x2105))+(((0.109556)*pz))+(((-1.0)*(pz*pz)))+(((-0.00175)*cj6))+(((-0.0139821)*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2111.value)))+(x2112.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2113=IKcos(j4);
IkReal x2114=IKsin(j4);
IkReal x2115=((0.035)*cj6);
IkReal x2116=(cj3*py);
IkReal x2117=(px*sj3);
IkReal x2118=((0.279642)*cj6);
IkReal x2119=((0.279642)*sj6);
IkReal x2120=((0.035)*x2114);
IkReal x2121=(pz*x2114);
IkReal x2122=(pz*x2113);
IkReal x2123=((0.550716)*x2114);
IkReal x2124=((0.05)*x2113);
IkReal x2125=(sj6*x2113);
evalcond[0]=((0.025)+(((-0.054778)*x2114))+x2121+(((0.028046)*x2113))+(((-1.0)*x2113*x2117))+(((-1.0)*x2119))+(((-1.0)*x2115))+((x2113*x2116)));
evalcond[1]=((0.275358)+(((-0.035)*sj6))+x2118+(((-1.0)*x2122))+(((0.028046)*x2114))+(((0.054778)*x2113))+(((-1.0)*x2114*x2117))+((x2114*x2116)));
evalcond[2]=((0.054778)+(((0.275358)*x2113))+(((-0.025)*x2114))+(((-1.0)*pz))+((x2113*x2118))+((x2114*x2115))+((x2114*x2119))+(((-0.035)*x2125)));
evalcond[3]=((-0.028046)+(((-1.0)*x2114*x2118))+x2117+(((-0.025)*x2113))+((sj6*x2120))+(((-0.275358)*x2114))+(((-1.0)*x2116))+((x2113*x2119))+((x2113*x2115)));
evalcond[4]=((-0.0008095874)+(((-1.0)*x2116*x2124))+(((-1.0)*x2116*x2123))+(((-0.012706480936)*x2114))+(((-0.056092)*x2116))+(((-0.031569421048)*x2113))+(((-1.0)*pp))+(((0.109556)*pz))+(((0.550716)*x2122))+(((-0.05)*x2121))+((x2117*x2124))+((x2117*x2123))+(((0.056092)*x2117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2126=cj3*cj3;
IkReal x2127=px*px;
IkReal x2128=py*py;
IkReal x2129=pz*pz;
IkReal x2130=(py*sj5);
IkReal x2131=((0.02)*px);
IkReal x2132=(cj5*pp);
IkReal x2133=((0.07)*py);
IkReal x2134=(cj3*px);
IkReal x2135=(cj5*pz);
IkReal x2136=(cj3*py);
IkReal x2137=(pz*sj3);
IkReal x2138=(py*sj3);
IkReal x2139=((0.550716)*cj5);
IkReal x2140=(pz*sj5);
IkReal x2141=(cj5*px*sj3);
IkReal x2142=(px*x2126);
IkReal x2143=(cj3*sj3*x2128);
IkReal x2144=((0.056092)*cj5*x2126);
IkReal x2145=(cj3*sj3*sj5*x2127);
CheckValue<IkReal> x2146=IKPowWithIntegerCheck(IKsign(((((-0.030890761872)*cj5*x2136))+(((1.101432)*cj5*x2134*x2138))+((x2126*x2127*x2139))+(((-0.0020856757104984)*cj5))+(((-1.0)*x2126*x2128*x2139))+(((0.060334242096)*x2135))+(((-1.0)*x2127*x2139))+(((-1.0)*x2129*x2139))+(((0.030890761872)*x2141)))),-1);
if(!x2146.valid){
continue;
}
CheckValue<IkReal> x2147 = IKatan2WithCheck(IkReal((((px*x2133))+(((0.028046)*x2132))+(((0.109556)*px*sj3*x2135))+(((-0.002882743632)*x2141))+(((-0.550716)*x2130*x2137))+(((-0.109556)*x2135*x2136))+(((0.07)*cj3*sj3*x2127))+(((-0.550716)*x2134*x2140))+(((-0.07)*x2143))+((x2128*x2144))+(((-0.008579767576)*x2135))+(((0.029606201048)*sj3*x2130))+(((0.002882743632)*cj5*x2136))+(((-0.04)*x2130*x2142))+(((0.056092)*cj5*x2127))+(((0.0003383998987004)*cj5))+(((0.02)*x2145))+(((-1.0)*px*sj3*x2132))+(((-0.00196322)*x2138))+(((-0.00196322)*x2134))+(((-0.14)*py*x2142))+(((0.029606201048)*sj5*x2134))+((x2132*x2136))+(((-0.02)*sj5*x2143))+(((-1.0)*x2127*x2144))+(((-0.112184)*cj5*x2134*x2138))+((x2130*x2131)))),IkReal(((((-0.00383446)*x2134))+(((-0.00383446)*x2138))+(((-8.27172307628e-5)*cj5))+(((0.054778)*x2132))+(((0.109556)*cj5*x2129))+(((-0.016540940936)*sj5*x2134))+(((0.550716)*px*x2130))+(((-1.101432)*x2130*x2142))+(((-0.002434552424)*cj5*x2136))+(((0.056092)*px*sj3*x2135))+(((-0.016540940936)*sj3*x2130))+(((0.07)*pz*x2134))+(((0.002434552424)*x2141))+((cj3*x2131*x2140))+((x2133*x2137))+(((-0.550716)*sj5*x2143))+(((0.550716)*x2145))+(((-0.007310845968)*x2135))+(((0.02)*x2130*x2137))+(((-0.056092)*x2135*x2136))+(((-1.0)*pz*x2132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2147.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2146.value)))+(x2147.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2148=IKcos(j4);
IkReal x2149=IKsin(j4);
IkReal x2150=((0.07)*cj5);
IkReal x2151=(cj3*px);
IkReal x2152=(py*sj3);
IkReal x2153=((1.0)*sj5);
IkReal x2154=(px*sj3);
IkReal x2155=(cj3*py);
IkReal x2156=(cj5*x2148);
IkReal x2157=(pz*x2149);
IkReal x2158=((0.02)*x2148);
IkReal x2159=((0.550716)*x2149);
IkReal x2160=(sj5*x2148);
evalcond[0]=((((-0.01)*cj5))+((x2155*x2156))+(((-1.0)*x2152*x2153))+(((-1.0)*x2154*x2156))+(((-0.054778)*cj5*x2149))+(((0.028046)*x2156))+((cj5*x2157))+(((-1.0)*x2151*x2153)));
evalcond[1]=((-0.0015095874)+(((0.07)*x2155*x2160))+(((0.056092)*x2154))+(((0.07)*sj5*x2157))+(((-0.016540940936)*x2149))+((x2154*x2159))+((x2155*x2158))+(((-0.0007)*sj5))+((x2150*x2152))+((x2150*x2151))+(((-1.0)*pp))+(((0.109556)*pz))+(((-0.00383446)*sj5*x2149))+(((0.02)*x2157))+(((-1.0)*x2154*x2158))+(((-1.0)*x2155*x2159))+(((-0.029606201048)*x2148))+(((0.00196322)*x2160))+(((-0.056092)*x2155))+(((-0.07)*x2154*x2160))+(((0.550716)*pz*x2148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[2];
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2161=(cj4*cj5);
j6eval[0]=x2161;
j6eval[1]=IKsign(x2161);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2162=(cj5*sj4);
j6eval[0]=x2162;
j6eval[1]=IKsign(x2162);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2163=(cj4*pz);
IkReal x2164=(cj3*py);
IkReal x2165=((21.1036256319198)*sj4);
IkReal x2166=(px*sj3);
IkReal x2167=((6.21733107729594)*sj4);
if( IKabs(((0.193339696070658)+(((-0.591872284472822)*sj4))+(((-39.1205174358163)*pp))+(((-1.1560144048653)*cj4))+(((-2.19434806400981)*x2164))+(((21.1036256319198)*x2163))+(((4.28588740819829)*pz))+((x2165*x2166))+(((-1.0)*x2164*x2165))+(((2.19434806400981)*x2166)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.960482011420055)+(((-0.274644660817557)*x2164))+(((-0.174371267393842)*sj4))+((x2166*x2167))+(((0.536421779585828)*pz))+(((6.21733107729594)*x2163))+(((-1.0)*x2164*x2167))+(((0.274644660817557)*x2166))+(((-4.89632498070236)*pp))+(((-0.340572961752117)*cj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.193339696070658)+(((-0.591872284472822)*sj4))+(((-39.1205174358163)*pp))+(((-1.1560144048653)*cj4))+(((-2.19434806400981)*x2164))+(((21.1036256319198)*x2163))+(((4.28588740819829)*pz))+((x2165*x2166))+(((-1.0)*x2164*x2165))+(((2.19434806400981)*x2166))))+IKsqr(((-0.960482011420055)+(((-0.274644660817557)*x2164))+(((-0.174371267393842)*sj4))+((x2166*x2167))+(((0.536421779585828)*pz))+(((6.21733107729594)*x2163))+(((-1.0)*x2164*x2167))+(((0.274644660817557)*x2166))+(((-4.89632498070236)*pp))+(((-0.340572961752117)*cj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((0.193339696070658)+(((-0.591872284472822)*sj4))+(((-39.1205174358163)*pp))+(((-1.1560144048653)*cj4))+(((-2.19434806400981)*x2164))+(((21.1036256319198)*x2163))+(((4.28588740819829)*pz))+((x2165*x2166))+(((-1.0)*x2164*x2165))+(((2.19434806400981)*x2166))), ((-0.960482011420055)+(((-0.274644660817557)*x2164))+(((-0.174371267393842)*sj4))+((x2166*x2167))+(((0.536421779585828)*pz))+(((6.21733107729594)*x2163))+(((-1.0)*x2164*x2167))+(((0.274644660817557)*x2166))+(((-4.89632498070236)*pp))+(((-0.340572961752117)*cj4))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x2168=IKcos(j6);
IkReal x2169=IKsin(j6);
IkReal x2170=((1.0)*pz);
IkReal x2171=(px*sj3);
IkReal x2172=(cj3*py);
IkReal x2173=(sj4*x2168);
IkReal x2174=((0.279642)*x2169);
IkReal x2175=((0.279642)*x2168);
IkReal x2176=((0.035)*x2169);
IkReal x2177=((0.035)*x2168);
evalcond[0]=((0.153484468928)+(((-0.04444284)*x2169))+(((0.056092)*x2171))+(((-0.056092)*x2172))+(((0.150853323672)*x2168))+(((-1.0)*pp))+(((0.109556)*pz)));
evalcond[1]=((0.275358)+x2175+(((0.028046)*sj4))+(((-1.0)*cj4*x2170))+(((-1.0)*sj4*x2171))+(((0.054778)*cj4))+(((-1.0)*x2176))+((sj4*x2172)));
evalcond[2]=((0.045)+(((-1.0)*sj4*x2170))+((cj4*x2171))+(((-1.0)*cj4*x2172))+(((0.054778)*sj4))+(((-1.0)*x2174))+(((-1.0)*x2177))+(((-0.028046)*cj4)));
evalcond[3]=((0.054778)+(((0.275358)*cj4))+(((-1.0)*sj4*x2174))+(((0.045)*sj4))+(((-1.0)*cj4*x2176))+((cj4*x2175))+(((-0.035)*x2173))+(((-1.0)*x2170)));
evalcond[4]=((-0.028046)+(((0.045)*cj4))+x2171+(((-1.0)*cj4*x2177))+(((-1.0)*cj4*x2174))+(((-0.275358)*sj4))+(((-0.279642)*x2173))+(((-1.0)*x2172))+((sj4*x2176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2178=(pz*sj4);
IkReal x2179=((3.48083781259907)*cj4);
IkReal x2180=(cj3*py);
IkReal x2181=(px*sj3);
IkReal x2182=((0.760330068833476)*cj4);
if( IKabs(((0.208715155388793)+(((0.0448834235315119)*x2181))+((x2179*x2180))+(((-0.190673333698552)*sj4))+(((-0.800175132487911)*pp))+(((-1.0)*x2179*x2181))+(((3.48083781259907)*x2178))+(((-0.0448834235315119)*x2180))+(((0.0876639868148456)*pz))+(((0.0976235772921534)*cj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.953300670949507)+(((6.39321641140527)*pp))+(((-0.0416493605105601)*sj4))+(((-0.358608294948544)*x2181))+(((0.358608294948544)*x2180))+((x2180*x2182))+(((0.760330068833476)*x2178))+(((-1.0)*x2181*x2182))+(((-0.700415217167915)*pz))+(((0.0213242171105037)*cj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.208715155388793)+(((0.0448834235315119)*x2181))+((x2179*x2180))+(((-0.190673333698552)*sj4))+(((-0.800175132487911)*pp))+(((-1.0)*x2179*x2181))+(((3.48083781259907)*x2178))+(((-0.0448834235315119)*x2180))+(((0.0876639868148456)*pz))+(((0.0976235772921534)*cj4))))+IKsqr(((-0.953300670949507)+(((6.39321641140527)*pp))+(((-0.0416493605105601)*sj4))+(((-0.358608294948544)*x2181))+(((0.358608294948544)*x2180))+((x2180*x2182))+(((0.760330068833476)*x2178))+(((-1.0)*x2181*x2182))+(((-0.700415217167915)*pz))+(((0.0213242171105037)*cj4))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((0.208715155388793)+(((0.0448834235315119)*x2181))+((x2179*x2180))+(((-0.190673333698552)*sj4))+(((-0.800175132487911)*pp))+(((-1.0)*x2179*x2181))+(((3.48083781259907)*x2178))+(((-0.0448834235315119)*x2180))+(((0.0876639868148456)*pz))+(((0.0976235772921534)*cj4))), ((-0.953300670949507)+(((6.39321641140527)*pp))+(((-0.0416493605105601)*sj4))+(((-0.358608294948544)*x2181))+(((0.358608294948544)*x2180))+((x2180*x2182))+(((0.760330068833476)*x2178))+(((-1.0)*x2181*x2182))+(((-0.700415217167915)*pz))+(((0.0213242171105037)*cj4))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x2183=IKcos(j6);
IkReal x2184=IKsin(j6);
IkReal x2185=(cj3*py);
IkReal x2186=((1.0)*pz);
IkReal x2187=(px*sj3);
IkReal x2188=(sj4*x2183);
IkReal x2189=((0.279642)*x2183);
IkReal x2190=((1.0)*x2187);
IkReal x2191=(sj4*x2184);
IkReal x2192=((0.035)*x2184);
IkReal x2193=((0.279642)*x2184);
IkReal x2194=((0.035)*x2183);
evalcond[0]=((0.152084468928)+(((-0.056092)*x2185))+(((-0.03325716)*x2184))+(((0.056092)*x2187))+(((-1.0)*pp))+(((0.109556)*pz))+(((0.152253323672)*x2183)));
evalcond[1]=((0.025)+(((-1.0)*cj4*x2190))+((cj4*x2185))+(((-0.054778)*sj4))+(((-1.0)*x2194))+(((-1.0)*x2193))+(((0.028046)*cj4))+((pz*sj4)));
evalcond[2]=((0.275358)+(((-1.0)*cj4*x2186))+x2189+(((0.028046)*sj4))+(((-1.0)*sj4*x2190))+(((0.054778)*cj4))+(((-1.0)*x2192))+((sj4*x2185)));
evalcond[3]=((0.054778)+(((0.035)*x2188))+(((0.275358)*cj4))+(((-0.025)*sj4))+(((-1.0)*cj4*x2192))+((cj4*x2189))+(((-1.0)*x2186))+(((0.279642)*x2191)));
evalcond[4]=((-0.028046)+(((-0.025)*cj4))+x2187+(((-1.0)*x2185))+(((-0.279642)*x2188))+(((-0.275358)*sj4))+((cj4*x2194))+((cj4*x2193))+(((0.035)*x2191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2195=((0.440669248263212)*sj5);
IkReal x2196=(cj3*py);
IkReal x2197=(px*sj3);
IkReal x2198=((3.52084656922346)*sj5);
IkReal x2199=(cj3*cj5*px);
IkReal x2200=(cj5*py*sj3);
if( IKabs(((0.268710412867445)+(((-0.0635371971882066)*sj5))+(((-1.0)*x2196*x2198))+(((-3.52084656922346)*x2200))+(((-0.440669248263212)*pz))+(((-3.52084656922346)*x2199))+((x2197*x2198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.14693477928794)+(((-1.0)*x2195*x2196))+(((-0.440669248263212)*x2199))+(((3.52084656922346)*pz))+(((-0.00795231725415793)*sj5))+(((-0.440669248263212)*x2200))+((x2195*x2197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.268710412867445)+(((-0.0635371971882066)*sj5))+(((-1.0)*x2196*x2198))+(((-3.52084656922346)*x2200))+(((-0.440669248263212)*pz))+(((-3.52084656922346)*x2199))+((x2197*x2198))))+IKsqr(((-1.14693477928794)+(((-1.0)*x2195*x2196))+(((-0.440669248263212)*x2199))+(((3.52084656922346)*pz))+(((-0.00795231725415793)*sj5))+(((-0.440669248263212)*x2200))+((x2195*x2197))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((0.268710412867445)+(((-0.0635371971882066)*sj5))+(((-1.0)*x2196*x2198))+(((-3.52084656922346)*x2200))+(((-0.440669248263212)*pz))+(((-3.52084656922346)*x2199))+((x2197*x2198))), ((-1.14693477928794)+(((-1.0)*x2195*x2196))+(((-0.440669248263212)*x2199))+(((3.52084656922346)*pz))+(((-0.00795231725415793)*sj5))+(((-0.440669248263212)*x2200))+((x2195*x2197))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x2201=IKcos(j6);
IkReal x2202=IKsin(j6);
IkReal x2203=((1.0)*py);
IkReal x2204=((0.035)*sj5);
IkReal x2205=(px*sj3);
IkReal x2206=((0.0007)*sj5);
IkReal x2207=(sj5*x2202);
IkReal x2208=((0.279642)*x2202);
IkReal x2209=((1.0)*cj3*px);
IkReal x2210=((0.035)*x2201);
evalcond[0]=((0.330136)+(((-0.035)*x2202))+(((0.279642)*x2201))+(((-1.0)*pz)));
evalcond[1]=((((-1.0)*cj5*x2208))+(((-1.0)*sj3*x2203))+(((-1.0)*cj5*x2210))+(((-1.0)*x2209))+(((0.035)*cj5)));
evalcond[2]=((-0.018046)+(((-0.279642)*x2207))+x2204+x2205+(((-1.0)*cj3*x2203))+(((-1.0)*x2201*x2204)));
evalcond[3]=((0.035)+(((-1.0)*cj5*sj3*x2203))+(((-1.0)*cj5*x2209))+(((-1.0)*x2210))+(((-1.0)*x2208))+(((-0.018046)*sj5))+(((-1.0)*cj3*sj5*x2203))+((sj5*x2205)));
evalcond[4]=((0.152784468928)+(((-0.03885)*x2202))+x2206+(((-0.00559284)*x2207))+(((-1.0)*pp))+(((0.109556)*pz))+(((-0.056092)*cj3*py))+(((0.056092)*x2205))+(((0.151553323672)*x2201))+(((-1.0)*x2201*x2206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2211=((0.440669248263212)*sj5);
IkReal x2212=(cj3*py);
IkReal x2213=(px*sj3);
IkReal x2214=((3.52084656922346)*sj5);
IkReal x2215=(cj3*cj5*px);
IkReal x2216=(cj5*py*sj3);
if( IKabs(((0.220432452704721)+(((0.440669248263212)*pz))+(((-1.0)*x2213*x2214))+((x2212*x2214))+(((0.133954128572676)*sj5))+(((-3.52084656922346)*x2215))+(((-3.52084656922346)*x2216)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.761204912550099)+(((0.0167657022194222)*sj5))+((x2211*x2212))+(((-1.0)*x2211*x2213))+(((-3.52084656922346)*pz))+(((-0.440669248263212)*x2216))+(((-0.440669248263212)*x2215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.220432452704721)+(((0.440669248263212)*pz))+(((-1.0)*x2213*x2214))+((x2212*x2214))+(((0.133954128572676)*sj5))+(((-3.52084656922346)*x2215))+(((-3.52084656922346)*x2216))))+IKsqr(((-0.761204912550099)+(((0.0167657022194222)*sj5))+((x2211*x2212))+(((-1.0)*x2211*x2213))+(((-3.52084656922346)*pz))+(((-0.440669248263212)*x2216))+(((-0.440669248263212)*x2215))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((0.220432452704721)+(((0.440669248263212)*pz))+(((-1.0)*x2213*x2214))+((x2212*x2214))+(((0.133954128572676)*sj5))+(((-3.52084656922346)*x2215))+(((-3.52084656922346)*x2216))), ((-0.761204912550099)+(((0.0167657022194222)*sj5))+((x2211*x2212))+(((-1.0)*x2211*x2213))+(((-3.52084656922346)*pz))+(((-0.440669248263212)*x2216))+(((-0.440669248263212)*x2215))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x2217=IKcos(j6);
IkReal x2218=IKsin(j6);
IkReal x2219=((1.0)*sj3);
IkReal x2220=((0.035)*sj5);
IkReal x2221=(cj3*py);
IkReal x2222=((0.0007)*sj5);
IkReal x2223=(px*sj3);
IkReal x2224=(sj5*x2218);
IkReal x2225=((0.279642)*x2218);
IkReal x2226=((1.0)*cj3*px);
IkReal x2227=((0.035)*x2217);
evalcond[0]=((0.22058)+(((-0.035)*x2218))+(((0.279642)*x2217))+pz);
evalcond[1]=((((-1.0)*py*x2219))+(((-1.0)*cj5*x2227))+(((-1.0)*cj5*x2225))+(((-1.0)*x2226))+(((0.035)*cj5)));
evalcond[2]=((-0.038046)+x2223+(((-1.0)*x2221))+(((-1.0)*x2220))+((x2217*x2220))+(((0.279642)*x2224)));
evalcond[3]=((0.035)+(((-1.0)*cj5*py*x2219))+(((0.038046)*sj5))+(((-1.0)*px*sj5*x2219))+(((-1.0)*cj5*x2226))+((sj5*x2221))+(((-1.0)*x2225))+(((-1.0)*x2227)));
evalcond[4]=((0.152784468928)+x2222+(((-1.0)*x2217*x2222))+(((-0.056092)*x2221))+(((-1.0)*pp))+(((0.151553323672)*x2217))+(((0.109556)*pz))+(((-0.00559284)*x2224))+(((0.056092)*x2223))+(((-0.03885)*x2218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2228=((0.440669248263212)*py);
IkReal x2229=(cj5*sj3);
IkReal x2230=(pz*sj5);
IkReal x2231=((3.52084656922346)*cj3);
IkReal x2232=(cj5*px);
IkReal x2233=(px*sj3);
if( IKabs(((0.256930442522873)+(((0.228073399061157)*sj5))+(((-3.52084656922346)*x2230))+(((-3.52084656922346)*py*x2229))+(((-0.440669248263212)*x2233))+(((-1.0)*x2231*x2232))+((cj3*x2228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.05281550879946)+(((-0.440669248263212)*cj3*x2232))+(((0.0285456725639944)*sj5))+(((-1.0)*py*x2231))+(((3.52084656922346)*x2233))+(((-1.0)*x2228*x2229))+(((-0.440669248263212)*x2230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.256930442522873)+(((0.228073399061157)*sj5))+(((-3.52084656922346)*x2230))+(((-3.52084656922346)*py*x2229))+(((-0.440669248263212)*x2233))+(((-1.0)*x2231*x2232))+((cj3*x2228))))+IKsqr(((-1.05281550879946)+(((-0.440669248263212)*cj3*x2232))+(((0.0285456725639944)*sj5))+(((-1.0)*py*x2231))+(((3.52084656922346)*x2233))+(((-1.0)*x2228*x2229))+(((-0.440669248263212)*x2230))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((0.256930442522873)+(((0.228073399061157)*sj5))+(((-3.52084656922346)*x2230))+(((-3.52084656922346)*py*x2229))+(((-0.440669248263212)*x2233))+(((-1.0)*x2231*x2232))+((cj3*x2228))), ((-1.05281550879946)+(((-0.440669248263212)*cj3*x2232))+(((0.0285456725639944)*sj5))+(((-1.0)*py*x2231))+(((3.52084656922346)*x2233))+(((-1.0)*x2228*x2229))+(((-0.440669248263212)*x2230))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x2234=IKcos(j6);
IkReal x2235=IKsin(j6);
IkReal x2236=(cj3*py);
IkReal x2237=((0.035)*sj5);
IkReal x2238=((1.0)*pz);
IkReal x2239=((1.0)*sj3);
IkReal x2240=((0.0007)*sj5);
IkReal x2241=(sj5*x2235);
IkReal x2242=((0.279642)*x2235);
IkReal x2243=((1.0)*cj3*px);
IkReal x2244=((0.035)*x2234);
evalcond[0]=((0.303404)+x2236+(((-0.035)*x2235))+(((-1.0)*px*x2239))+(((0.279642)*x2234)));
evalcond[1]=((0.064778)+(((-0.279642)*x2241))+(((-1.0)*x2234*x2237))+x2237+(((-1.0)*x2238)));
evalcond[2]=((((-1.0)*cj5*x2244))+(((-1.0)*cj5*x2242))+(((-1.0)*py*x2239))+(((-1.0)*x2243))+(((0.035)*cj5)));
evalcond[3]=((0.035)+(((0.064778)*sj5))+(((-1.0)*cj5*x2243))+(((-1.0)*cj5*py*x2239))+(((-1.0)*x2244))+(((-1.0)*x2242))+(((-1.0)*sj5*x2238)));
evalcond[4]=((0.152784468928)+(((-0.00559284)*x2241))+(((0.151553323672)*x2234))+(((-1.0)*x2234*x2240))+x2240+(((0.056092)*px*sj3))+(((-0.056092)*x2236))+(((-1.0)*pp))+(((-0.03885)*x2235))+(((0.109556)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2245=(pz*sj5);
IkReal x2246=((3.52084656922346)*cj3);
IkReal x2247=(cj5*px);
IkReal x2248=((0.440669248263212)*py);
IkReal x2249=(cj5*sj3);
IkReal x2250=(px*sj3);
if( IKabs(((0.232212423049293)+(((-1.0)*cj3*x2248))+(((-1.0)*x2246*x2247))+(((3.52084656922346)*x2245))+(((0.440669248263212)*x2250))+(((-0.157656467676688)*sj5))+(((-3.52084656922346)*py*x2249)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.855324183038581)+(((-0.0197322875987301)*sj5))+(((-1.0)*x2248*x2249))+(((-3.52084656922346)*x2250))+(((-0.440669248263212)*cj3*x2247))+(((0.440669248263212)*x2245))+((py*x2246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.232212423049293)+(((-1.0)*cj3*x2248))+(((-1.0)*x2246*x2247))+(((3.52084656922346)*x2245))+(((0.440669248263212)*x2250))+(((-0.157656467676688)*sj5))+(((-3.52084656922346)*py*x2249))))+IKsqr(((-0.855324183038581)+(((-0.0197322875987301)*sj5))+(((-1.0)*x2248*x2249))+(((-3.52084656922346)*x2250))+(((-0.440669248263212)*cj3*x2247))+(((0.440669248263212)*x2245))+((py*x2246))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((0.232212423049293)+(((-1.0)*cj3*x2248))+(((-1.0)*x2246*x2247))+(((3.52084656922346)*x2245))+(((0.440669248263212)*x2250))+(((-0.157656467676688)*sj5))+(((-3.52084656922346)*py*x2249))), ((-0.855324183038581)+(((-0.0197322875987301)*sj5))+(((-1.0)*x2248*x2249))+(((-3.52084656922346)*x2250))+(((-0.440669248263212)*cj3*x2247))+(((0.440669248263212)*x2245))+((py*x2246))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x2251=IKcos(j6);
IkReal x2252=IKsin(j6);
IkReal x2253=((0.035)*sj5);
IkReal x2254=(px*sj3);
IkReal x2255=((0.0007)*sj5);
IkReal x2256=((1.0)*cj3);
IkReal x2257=(sj5*x2252);
IkReal x2258=((0.279642)*x2252);
IkReal x2259=((1.0)*py*sj3);
IkReal x2260=((0.035)*x2251);
evalcond[0]=((0.247312)+x2254+(((-1.0)*py*x2256))+(((0.279642)*x2251))+(((-0.035)*x2252)));
evalcond[1]=((0.044778)+(((-1.0)*x2253))+(((-1.0)*pz))+(((0.279642)*x2257))+((x2251*x2253)));
evalcond[2]=((((-1.0)*cj5*x2258))+(((-1.0)*cj5*x2260))+(((-1.0)*px*x2256))+(((-1.0)*x2259))+(((0.035)*cj5)));
evalcond[3]=((0.035)+(((-1.0)*cj5*x2259))+(((-1.0)*cj5*px*x2256))+(((-0.044778)*sj5))+(((-1.0)*x2258))+((pz*sj5))+(((-1.0)*x2260)));
evalcond[4]=((0.152784468928)+(((-0.00559284)*x2257))+x2255+(((-1.0)*pp))+(((0.109556)*pz))+(((-0.056092)*cj3*py))+(((-0.03885)*x2252))+(((0.151553323672)*x2251))+(((-1.0)*x2251*x2255))+(((0.056092)*x2254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2261=(cj4*sj5);
IkReal x2262=((17500.0)*sj3);
IkReal x2263=(cj5*px);
IkReal x2264=(cj5*sj4);
IkReal x2265=(py*sj4);
IkReal x2266=(cj4*cj5);
IkReal x2267=((139821.0)*sj3);
IkReal x2268=((139821.0)*cj3*px);
IkReal x2269=((17500.0)*cj3*px);
IkReal x2270=(cj3*cj5*py);
CheckValue<IkReal> x2271=IKPowWithIntegerCheck(IKsign(x2264),-1);
if(!x2271.valid){
continue;
}
CheckValue<IkReal> x2272 = IKatan2WithCheck(IkReal(((((175.0)*x2266))+(((-9712.5)*x2264))+((py*x2261*x2262))+((sj4*x2268))+((x2261*x2269))+(((-17500.0)*x2270))+((x2262*x2263))+((x2265*x2267))+(((-490.805)*cj5)))),IkReal(((((37888.330918)*x2264))+((sj4*x2269))+(((3921.419766)*cj5))+(((-1.0)*x2263*x2267))+(((-1.0)*py*x2261*x2267))+(((-1398.21)*x2266))+(((-1.0)*x2261*x2268))+(((139821.0)*x2270))+((x2262*x2265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2272.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x2271.value)))+(x2272.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2273=IKcos(j6);
IkReal x2274=IKsin(j6);
IkReal x2275=(cj4*sj5);
IkReal x2276=(cj3*py);
IkReal x2277=((1.0)*pz);
IkReal x2278=(px*sj3);
IkReal x2279=(sj4*sj5);
IkReal x2280=((0.0007)*sj5);
IkReal x2281=((1.0)*py*sj3);
IkReal x2282=(sj5*x2274);
IkReal x2283=((0.279642)*x2273);
IkReal x2284=((0.279642)*x2274);
IkReal x2285=((1.0)*cj3*px);
IkReal x2286=((0.035)*x2274);
IkReal x2287=((0.035)*x2273);
evalcond[0]=((((-1.0)*x2285))+(((-1.0)*x2281))+(((0.035)*cj5))+(((-1.0)*cj5*x2284))+(((-1.0)*cj5*x2287)));
evalcond[1]=((0.275358)+x2283+((sj4*x2276))+(((-1.0)*cj4*x2277))+(((-1.0)*x2286))+(((0.028046)*sj4))+(((0.054778)*cj4))+(((-1.0)*sj4*x2278)));
evalcond[2]=((0.152784468928)+x2280+(((-0.00559284)*x2282))+(((0.056092)*x2278))+(((-0.03885)*x2274))+(((0.151553323672)*x2273))+(((-0.056092)*x2276))+(((-1.0)*pp))+(((0.109556)*pz))+(((-1.0)*x2273*x2280)));
evalcond[3]=((0.054778)+(((0.035)*x2279))+(((0.275358)*cj4))+(((-1.0)*x2279*x2284))+(((-1.0)*x2279*x2287))+((cj4*x2283))+(((-1.0)*x2277))+(((-1.0)*cj4*x2286))+(((0.01)*sj4)));
evalcond[4]=((-0.028046)+(((0.035)*x2275))+x2278+(((0.01)*cj4))+(((-0.275358)*sj4))+(((-1.0)*x2275*x2284))+(((-1.0)*x2275*x2287))+((sj4*x2286))+(((-1.0)*sj4*x2283))+(((-1.0)*x2276)));
evalcond[5]=((0.035)+(((-1.0)*x2275*x2276))+(((-1.0)*x2287))+(((-1.0)*x2284))+(((-0.028046)*x2275))+(((-1.0)*x2277*x2279))+(((0.01)*sj5))+(((0.054778)*x2279))+(((-1.0)*cj5*x2285))+(((-1.0)*cj5*x2281))+((x2275*x2278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2288=(cj3*px);
IkReal x2289=(sj4*sj5);
IkReal x2290=(cj4*cj5);
IkReal x2291=(py*sj3);
IkReal x2292=((139821.0)*cj4);
IkReal x2293=(cj5*sj4);
IkReal x2294=((17500.0)*cj4);
IkReal x2295=(cj5*pz);
CheckValue<IkReal> x2296=IKPowWithIntegerCheck(IKsign(x2290),-1);
if(!x2296.valid){
continue;
}
CheckValue<IkReal> x2297 = IKatan2WithCheck(IkReal(((((17500.0)*x2288*x2289))+(((175.0)*x2293))+(((17500.0)*x2289*x2291))+(((-1.0)*x2288*x2292))+(((-1.0)*x2291*x2292))+(((-17500.0)*x2295))+(((9712.5)*x2290))+(((958.615)*cj5)))),IkReal(((((-139821.0)*x2288*x2289))+(((-37888.330918)*x2290))+(((-1398.21)*x2293))+(((-1.0)*x2288*x2294))+(((139821.0)*x2295))+(((-1.0)*x2291*x2294))+(((-7659.114738)*cj5))+(((-139821.0)*x2289*x2291)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2297.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2296.value)))+(x2297.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2298=IKcos(j6);
IkReal x2299=IKsin(j6);
IkReal x2300=(cj4*sj5);
IkReal x2301=(cj3*py);
IkReal x2302=((1.0)*pz);
IkReal x2303=(px*sj3);
IkReal x2304=(sj4*sj5);
IkReal x2305=((0.0007)*sj5);
IkReal x2306=((1.0)*py*sj3);
IkReal x2307=(sj5*x2299);
IkReal x2308=((0.279642)*x2298);
IkReal x2309=((0.279642)*x2299);
IkReal x2310=((1.0)*cj3*px);
IkReal x2311=((0.035)*x2299);
IkReal x2312=((0.035)*x2298);
evalcond[0]=((((-1.0)*x2306))+(((-1.0)*cj5*x2309))+(((0.035)*cj5))+(((-1.0)*cj5*x2312))+(((-1.0)*x2310)));
evalcond[1]=((0.275358)+x2308+(((-1.0)*sj4*x2303))+(((0.028046)*sj4))+(((0.054778)*cj4))+(((-1.0)*cj4*x2302))+((sj4*x2301))+(((-1.0)*x2311)));
evalcond[2]=((0.152784468928)+(((0.151553323672)*x2298))+x2305+(((-0.056092)*x2301))+(((-0.03885)*x2299))+(((-1.0)*pp))+(((0.056092)*x2303))+(((-0.00559284)*x2307))+(((0.109556)*pz))+(((-1.0)*x2298*x2305)));
evalcond[3]=((0.054778)+(((-1.0)*x2304*x2312))+(((0.275358)*cj4))+(((-1.0)*x2304*x2309))+(((-1.0)*x2302))+((cj4*x2308))+(((0.035)*x2304))+(((-1.0)*cj4*x2311))+(((0.01)*sj4)));
evalcond[4]=((-0.028046)+(((-1.0)*x2301))+(((-1.0)*x2300*x2309))+x2303+(((0.01)*cj4))+(((-0.275358)*sj4))+(((-1.0)*sj4*x2308))+((sj4*x2311))+(((0.035)*x2300))+(((-1.0)*x2300*x2312)));
evalcond[5]=((0.035)+((x2300*x2303))+(((-0.028046)*x2300))+(((0.054778)*x2304))+(((-1.0)*x2309))+(((-1.0)*x2300*x2301))+(((-1.0)*cj5*x2306))+(((-1.0)*x2302*x2304))+(((-1.0)*cj5*x2310))+(((0.01)*sj5))+(((-1.0)*x2312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2313=(py*sj3);
IkReal x2314=(cj4*cj5);
IkReal x2315=((8750000000.0)*cj3);
IkReal x2316=(px*sj3);
IkReal x2317=(cj5*sj4);
IkReal x2318=((69910500000.0)*x2317);
CheckValue<IkReal> x2319 = IKatan2WithCheck(IkReal(((((4856250000.0)*cj5))+(((479307500.0)*x2314))+(((-69910500000.0)*cj3*px))+(((-8750000000.0)*x2316*x2317))+(((245402500.0)*x2317))+(((-69910500000.0)*x2313))+(((-8750000000.0)*pz*x2314))+((py*x2315*x2317)))),IkReal(((((-8750000000.0)*x2313))+((x2316*x2318))+(((-3829557369.0)*x2314))+(((69910500000.0)*pz*x2314))+(((-1.0)*cj3*py*x2318))+(((-1.0)*px*x2315))+(((-1960709883.0)*x2317))+(((-18944165459.0)*cj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2319.valid){
continue;
}
CheckValue<IkReal> x2320=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x2320.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2319.value)+(((1.5707963267949)*(x2320.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2321=IKcos(j6);
IkReal x2322=IKsin(j6);
IkReal x2323=(cj4*sj5);
IkReal x2324=(cj3*py);
IkReal x2325=((1.0)*pz);
IkReal x2326=(px*sj3);
IkReal x2327=(sj4*sj5);
IkReal x2328=((0.0007)*sj5);
IkReal x2329=((1.0)*py*sj3);
IkReal x2330=(sj5*x2322);
IkReal x2331=((0.279642)*x2321);
IkReal x2332=((0.279642)*x2322);
IkReal x2333=((1.0)*cj3*px);
IkReal x2334=((0.035)*x2322);
IkReal x2335=((0.035)*x2321);
evalcond[0]=((((-1.0)*x2333))+(((0.035)*cj5))+(((-1.0)*cj5*x2332))+(((-1.0)*cj5*x2335))+(((-1.0)*x2329)));
evalcond[1]=((0.275358)+(((-1.0)*x2334))+x2331+(((0.028046)*sj4))+(((-1.0)*sj4*x2326))+((sj4*x2324))+(((0.054778)*cj4))+(((-1.0)*cj4*x2325)));
evalcond[2]=((0.152784468928)+(((-1.0)*x2321*x2328))+(((0.056092)*x2326))+(((-0.056092)*x2324))+x2328+(((-0.03885)*x2322))+(((-1.0)*pp))+(((0.151553323672)*x2321))+(((0.109556)*pz))+(((-0.00559284)*x2330)));
evalcond[3]=((0.054778)+(((0.035)*x2327))+(((0.275358)*cj4))+((cj4*x2331))+(((-1.0)*x2327*x2332))+(((-1.0)*x2327*x2335))+(((-1.0)*cj4*x2334))+(((0.01)*sj4))+(((-1.0)*x2325)));
evalcond[4]=((-0.028046)+(((0.035)*x2323))+(((-1.0)*sj4*x2331))+x2326+(((0.01)*cj4))+(((-0.275358)*sj4))+(((-1.0)*x2323*x2335))+(((-1.0)*x2323*x2332))+((sj4*x2334))+(((-1.0)*x2324)));
evalcond[5]=((0.035)+(((-1.0)*x2332))+(((-1.0)*x2335))+(((-0.028046)*x2323))+(((-1.0)*x2325*x2327))+(((-1.0)*cj5*x2329))+((x2323*x2326))+(((0.01)*sj5))+(((0.054778)*x2327))+(((-1.0)*x2323*x2324))+(((-1.0)*cj5*x2333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2336=((7842.839532)*cj5);
IkReal x2337=(cj3*py);
IkReal x2338=((350.0)*sj5);
IkReal x2339=(py*sj3);
IkReal x2340=(cj5*pp);
IkReal x2341=(cj3*px);
IkReal x2342=((2796.42)*sj5);
IkReal x2343=(cj5*pz);
IkReal x2344=(px*sj3);
IkReal x2345=((981.61)*cj5);
CheckValue<IkReal> x2346 = IKatan2WithCheck(IkReal(((((-1.0)*x2337*x2345))+(((1917.23)*x2343))+((x2338*x2341))+((x2344*x2345))+(((-75776.661836)*x2339))+(((5325.9113705)*cj5))+(((-75776.661836)*x2341))+(((-17500.0)*x2340))+((x2338*x2339)))),IkReal(((((-1.0)*x2339*x2342))+(((-20682.6022299819)*cj5))+(((-1.0)*x2341*x2342))+(((139821.0)*x2340))+((x2336*x2337))+(((-1.0)*x2336*x2344))+(((-19425.0)*x2341))+(((-19425.0)*x2339))+(((-15318.229476)*x2343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2346.valid){
continue;
}
CheckValue<IkReal> x2347=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x2347.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2346.value)+(((1.5707963267949)*(x2347.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x2348=IKcos(j6);
IkReal x2349=IKsin(j6);
IkReal x2350=((0.0007)*sj5);
IkReal x2351=((0.035)*cj5);
evalcond[0]=((((-0.279642)*cj5*x2349))+x2351+(((-1.0)*cj3*px))+(((-1.0)*x2348*x2351))+(((-1.0)*py*sj3)));
evalcond[1]=((0.152784468928)+x2350+(((0.056092)*px*sj3))+(((-0.00559284)*sj5*x2349))+(((-1.0)*x2348*x2350))+(((-1.0)*pp))+(((0.109556)*pz))+(((0.151553323672)*x2348))+(((-0.056092)*cj3*py))+(((-0.03885)*x2349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x2352=((0.00191723)*sj5);
IkReal x2353=((1.95314839905869)*sj5);
IkReal x2354=(pz*sj5);
IkReal x2355=(px*sj3);
IkReal x2356=((0.279642)*cj6);
IkReal x2357=((0.035)*sj6);
IkReal x2358=(cj3*py);
IkReal x2359=((35.6557084789275)*sj6);
IkReal x2360=((284.880960870407)*cj6);
IkReal x2361=(sj5*sj6);
j4eval[0]=((-7.30932902884037)+sj6+(((-1.0)*cj6*x2353))+x2353+(((-1.0)*x2355*x2359))+(((35.6557084789275)*cj6*x2354))+(((280.516702152586)*x2355))+(((-1.0)*x2358*x2360))+((x2358*x2359))+((x2355*x2360))+(((-7.98977142857143)*cj6))+(((284.880960870407)*sj6*x2354))+(((-15.6052092745591)*x2361))+(((-35.6557084789275)*x2354))+(((-280.516702152586)*x2358))+(((-10.1873452796936)*pz)));
j4eval[1]=IKsign(((-0.007174910468)+(((-1.0)*x2356*x2358))+(((-1.0)*cj6*x2352))+((x2357*x2358))+x2352+(((-1.0)*x2355*x2357))+(((-0.007842839532)*cj6))+(((0.279642)*sj6*x2354))+(((0.00098161)*sj6))+((x2355*x2356))+(((-0.275358)*x2358))+(((-0.015318229476)*x2361))+(((-0.035)*x2354))+(((0.035)*cj6*x2354))+(((-0.01)*pz))+(((0.275358)*x2355))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2362=((284.880960870407)*sj6);
IkReal x2363=(cj6*sj5);
IkReal x2364=(pz*sj6);
IkReal x2365=(cj3*py);
IkReal x2366=(cj6*pz);
IkReal x2367=(sj5*sj6);
IkReal x2368=(px*sj3);
IkReal x2369=(sj5*x2368);
j4eval[0]=((-15.6518581962286)+(((-35.6557084789275)*x2363*x2368))+(((10.1873452796936)*x2368))+(((-1.0)*sj5))+((sj5*x2362*x2365))+(((7.98977142857143)*x2367))+x2363+(((280.516702152586)*pz))+(((35.6557084789275)*x2369))+(((1.95314839905869)*sj6))+(((-35.6557084789275)*x2364))+(((284.880960870407)*x2366))+(((35.6557084789275)*x2363*x2365))+(((-15.6052092745591)*cj6))+(((-1.0)*x2362*x2369))+(((-10.1873452796936)*x2365))+(((-35.6557084789275)*sj5*x2365)));
j4eval[1]=IKsign(((-0.015364020524)+(((-0.015318229476)*cj6))+(((-0.01)*x2365))+(((-0.035)*sj5*x2365))+(((-0.035)*x2364))+(((0.007842839532)*x2367))+(((0.275358)*pz))+(((0.00191723)*sj6))+(((0.01)*x2368))+(((0.00098161)*x2363))+(((-0.279642)*x2367*x2368))+(((0.035)*x2363*x2365))+(((-0.00098161)*sj5))+(((0.279642)*x2365*x2367))+(((-0.035)*x2363*x2368))+(((0.035)*x2369))+(((0.279642)*x2366))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2370=cj5*cj5;
IkReal x2371=cj6*cj6;
IkReal x2372=((0.01957494)*sj6);
IkReal x2373=(sj5*sj6);
IkReal x2374=((0.0007)*sj5);
IkReal x2375=(cj6*x2370);
IkReal x2376=((27.9642)*sj6*x2370);
IkReal x2377=(x2370*x2371);
j4eval[0]=((-223.673823325714)+(((55.5)*sj6))+(((-1.0)*sj5))+((cj6*sj5))+(((7.98977142857143)*x2373))+(((-1.0)*x2376))+(((-3.5)*x2375))+(((-216.504748102857)*cj6))+(((-109.963783091429)*x2377))+(((113.463783091429)*x2370))+(((27.9642)*sj6*x2375)));
j4eval[1]=IKsign(((-0.156571676328)+((x2372*x2375))+(((-1.0)*x2374))+(((0.03885)*sj6))+(((-1.0)*x2370*x2372))+(((-0.076974648164)*x2377))+(((-0.00245)*x2375))+((cj6*x2374))+(((0.079424648164)*x2370))+(((-0.151553323672)*cj6))+(((0.00559284)*x2373))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2378=cj5*cj5;
IkReal x2379=((0.00191723)*sj5);
IkReal x2380=(cj6*sj5);
IkReal x2381=(cj3*py);
IkReal x2382=((0.035)*sj6);
IkReal x2383=(px*sj3);
IkReal x2384=((0.279642)*cj6);
IkReal x2385=(sj5*sj6);
IkReal x2386=((0.035)*sj5);
IkReal x2387=((0.01957494)*sj6*x2378);
CheckValue<IkReal> x2388=IKPowWithIntegerCheck(IKsign(((-0.156571676328)+(((-0.076974648164)*x2378*(cj6*cj6)))+(((0.00559284)*x2385))+(((-0.0007)*sj5))+(((-1.0)*x2387))+(((0.03885)*sj6))+(((0.0007)*x2380))+((cj6*x2387))+(((-0.00245)*cj6*x2378))+(((0.079424648164)*x2378))+(((-0.151553323672)*cj6)))),-1);
if(!x2388.valid){
continue;
}
CheckValue<IkReal> x2389 = IKatan2WithCheck(IkReal(((0.008270470468)+(((-1.0)*x2381*x2382))+(((-1.0)*cj6*x2379))+((x2381*x2384))+x2379+((x2382*x2383))+(((0.279642)*pz*x2385))+(((-0.275358)*x2383))+(((-1.0)*pz*x2386))+(((-1.0)*x2383*x2384))+(((0.007842839532)*cj6))+(((-0.015318229476)*x2385))+(((0.275358)*x2381))+(((-0.00098161)*sj6))+(((0.035)*pz*x2380))+(((-0.01)*pz)))),IkReal(((0.014803100524)+(((-0.01)*x2381))+(((-1.0)*x2381*x2386))+(((-0.275358)*pz))+(((-0.279642)*x2383*x2385))+(((0.007842839532)*x2385))+(((0.279642)*x2381*x2385))+(((0.00098161)*x2380))+((pz*x2382))+(((-0.035)*x2380*x2383))+((x2383*x2386))+(((-1.0)*pz*x2384))+(((0.01)*x2383))+(((0.015318229476)*cj6))+(((-0.00191723)*sj6))+(((-0.00098161)*sj5))+(((0.035)*x2380*x2381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2389.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2388.value)))+(x2389.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2390=IKsin(j4);
IkReal x2391=IKcos(j4);
IkReal x2392=((0.035)*sj6);
IkReal x2393=((0.07)*cj5);
IkReal x2394=(cj3*px);
IkReal x2395=((0.279642)*sj6);
IkReal x2396=(py*sj3);
IkReal x2397=((1.0)*cj5);
IkReal x2398=((0.035)*cj6);
IkReal x2399=(px*sj3);
IkReal x2400=((0.07)*sj5);
IkReal x2401=(cj3*py);
IkReal x2402=((0.279642)*cj6);
IkReal x2403=((1.0)*sj5);
IkReal x2404=(cj5*x2391);
IkReal x2405=(pz*x2390);
IkReal x2406=(py*x2403);
IkReal x2407=(cj3*x2391);
IkReal x2408=(sj5*x2391);
IkReal x2409=(pz*x2391);
IkReal x2410=((0.550716)*x2390);
IkReal x2411=(sj5*x2390);
evalcond[0]=((0.275358)+(((-1.0)*x2409))+x2402+((x2390*x2401))+(((0.054778)*x2391))+(((-1.0)*x2392))+(((0.028046)*x2390))+(((-1.0)*x2390*x2399)));
evalcond[1]=((0.054778)+(((-1.0)*pz))+(((0.01)*x2390))+(((0.275358)*x2391))+(((-1.0)*x2395*x2411))+(((-1.0)*x2398*x2411))+(((0.035)*x2411))+(((-1.0)*x2391*x2392))+((x2391*x2402)));
evalcond[2]=((((0.028046)*x2404))+(((-1.0)*x2394*x2403))+(((-0.01)*cj5))+((x2401*x2404))+(((-1.0)*x2391*x2397*x2399))+(((-1.0)*x2396*x2403))+((cj5*x2405))+(((-0.054778)*cj5*x2390)));
evalcond[3]=((-0.028046)+(((-1.0)*x2401))+x2399+(((0.035)*x2408))+(((-0.275358)*x2390))+((x2390*x2392))+(((-1.0)*x2395*x2408))+(((0.01)*x2391))+(((-1.0)*x2390*x2402))+(((-1.0)*x2398*x2408)));
evalcond[4]=((0.035)+(((-1.0)*x2391*x2401*x2403))+(((-0.028046)*x2408))+(((-1.0)*x2396*x2397))+(((-1.0)*x2403*x2405))+((x2399*x2408))+(((0.054778)*x2411))+(((-1.0)*x2395))+(((-1.0)*x2398))+(((-1.0)*x2394*x2397))+(((0.01)*sj5)));
evalcond[5]=((-0.0015095874)+(((-0.016540940936)*x2390))+(((-0.02)*x2391*x2399))+((x2399*x2410))+(((-1.0)*x2391*x2399*x2400))+((x2393*x2396))+((x2393*x2394))+(((-0.0007)*sj5))+(((-0.00383446)*x2411))+(((-0.056092)*x2401))+(((-1.0)*pp))+((x2391*x2400*x2401))+((x2400*x2405))+(((0.056092)*x2399))+(((0.109556)*pz))+(((0.02)*x2405))+(((0.02)*x2391*x2401))+(((0.550716)*x2409))+(((-1.0)*x2401*x2410))+(((0.00196322)*x2408))+(((-0.029606201048)*x2391)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2412=cj6*cj6;
IkReal x2413=cj3*cj3;
IkReal x2414=px*px;
IkReal x2415=(px*sj3);
IkReal x2416=((0.035)*sj5);
IkReal x2417=((0.00098161)*sj5);
IkReal x2418=(cj3*py);
IkReal x2419=(sj5*sj6);
CheckValue<IkReal> x2420 = IKatan2WithCheck(IkReal(((0.004289883788)+(((-1.0)*pz*x2418))+(((-0.028046)*pz))+(((0.019425)*sj5))+(((-0.078226661836)*x2419))+(((0.00279642)*cj6))+((pz*x2415))+(((-0.00035)*sj6))+(((0.00014994)*cj6*sj5))+(((-0.01957494)*sj5*x2412))+(((0.054778)*x2418))+(((-0.076974648164)*cj6*x2419))+(((-0.054778)*x2415)))),IkReal(((0.076260450048)+(((-0.01957494)*cj6*sj6))+(((-1.0)*x2414))+((x2413*x2414))+(((2.0)*x2415*x2418))+(((-0.01927506)*sj6))+(((0.056092)*x2415))+(((-1.0)*x2413*(py*py)))+(((0.154003323672)*cj6))+(((-0.056092)*x2418))+(((0.076974648164)*x2412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2420.valid){
continue;
}
CheckValue<IkReal> x2421=IKPowWithIntegerCheck(IKsign(((-0.015364020524)+((cj6*x2416*x2418))+(((-0.015318229476)*cj6))+((cj6*x2417))+(((-1.0)*x2416*x2418))+(((-0.279642)*x2415*x2419))+(((0.007842839532)*x2419))+(((-0.035)*pz*sj6))+((x2415*x2416))+(((0.275358)*pz))+(((0.00191723)*sj6))+(((0.01)*x2415))+(((-1.0)*x2417))+(((0.279642)*x2418*x2419))+(((0.279642)*cj6*pz))+(((-0.01)*x2418))+(((-1.0)*cj6*x2415*x2416)))),-1);
if(!x2421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2420.value)+(((1.5707963267949)*(x2421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2422=IKsin(j4);
IkReal x2423=IKcos(j4);
IkReal x2424=((0.035)*sj6);
IkReal x2425=((0.07)*cj5);
IkReal x2426=(cj3*px);
IkReal x2427=((0.279642)*sj6);
IkReal x2428=(py*sj3);
IkReal x2429=((1.0)*cj5);
IkReal x2430=((0.035)*cj6);
IkReal x2431=(px*sj3);
IkReal x2432=((0.07)*sj5);
IkReal x2433=(cj3*py);
IkReal x2434=((0.279642)*cj6);
IkReal x2435=((1.0)*sj5);
IkReal x2436=(cj5*x2423);
IkReal x2437=(pz*x2422);
IkReal x2438=(py*x2435);
IkReal x2439=(cj3*x2423);
IkReal x2440=(sj5*x2423);
IkReal x2441=(pz*x2423);
IkReal x2442=((0.550716)*x2422);
IkReal x2443=(sj5*x2422);
evalcond[0]=((0.275358)+(((-1.0)*x2422*x2431))+x2434+(((-1.0)*x2441))+(((0.028046)*x2422))+(((-1.0)*x2424))+(((0.054778)*x2423))+((x2422*x2433)));
evalcond[1]=((0.054778)+(((-1.0)*x2427*x2443))+(((-1.0)*x2430*x2443))+(((-1.0)*x2423*x2424))+(((0.275358)*x2423))+(((-1.0)*pz))+(((0.035)*x2443))+(((0.01)*x2422))+((x2423*x2434)));
evalcond[2]=((((0.028046)*x2436))+(((-0.054778)*cj5*x2422))+(((-1.0)*x2423*x2429*x2431))+(((-0.01)*cj5))+(((-1.0)*x2426*x2435))+(((-1.0)*x2428*x2435))+((x2433*x2436))+((cj5*x2437)));
evalcond[3]=((-0.028046)+(((-1.0)*x2433))+(((-1.0)*x2427*x2440))+x2431+(((-1.0)*x2430*x2440))+((x2422*x2424))+(((-0.275358)*x2422))+(((0.035)*x2440))+(((0.01)*x2423))+(((-1.0)*x2422*x2434)));
evalcond[4]=((0.035)+((x2431*x2440))+(((-1.0)*x2428*x2429))+(((-1.0)*x2430))+(((-0.028046)*x2440))+(((-1.0)*x2423*x2433*x2435))+(((-1.0)*x2427))+(((-1.0)*x2435*x2437))+(((0.01)*sj5))+(((-1.0)*x2426*x2429))+(((0.054778)*x2443)));
evalcond[5]=((-0.0015095874)+(((-0.02)*x2423*x2431))+(((0.056092)*x2431))+(((0.02)*x2423*x2433))+(((-1.0)*x2423*x2431*x2432))+((x2431*x2442))+(((0.550716)*x2441))+((x2432*x2437))+(((-0.0007)*sj5))+(((-0.016540940936)*x2422))+(((-1.0)*pp))+(((-0.00383446)*x2443))+(((0.00196322)*x2440))+(((-0.056092)*x2433))+(((0.109556)*pz))+(((0.02)*x2437))+((x2425*x2426))+((x2425*x2428))+(((-1.0)*x2433*x2442))+(((-0.029606201048)*x2423))+((x2423*x2432*x2433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2444=cj6*cj6;
IkReal x2445=((0.00191723)*sj5);
IkReal x2446=(px*sj3);
IkReal x2447=((0.279642)*cj6);
IkReal x2448=((0.035)*sj6);
IkReal x2449=(sj5*sj6);
IkReal x2450=(cj3*py);
IkReal x2451=((0.035)*pz*sj5);
CheckValue<IkReal> x2452 = IKatan2WithCheck(IkReal(((0.07404639888)+(((-0.01957494)*cj6*sj6))+(((0.076974648164)*x2444))+(((-0.01927506)*sj6))+(((0.154003323672)*cj6))+(((0.109556)*pz))+(((-1.0)*(pz*pz))))),IkReal(((-0.001217276212)+(((-0.028046)*pz))+(((0.00035)*sj6))+(((-0.054778)*x2446))+(((-1.0)*pz*x2450))+((pz*x2446))+(((-0.00279642)*cj6))+(((-0.019425)*sj5))+(((0.076974648164)*cj6*x2449))+(((0.078226661836)*x2449))+(((0.01957494)*sj5*x2444))+(((0.054778)*x2450))+(((-0.00014994)*cj6*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2452.valid){
continue;
}
CheckValue<IkReal> x2453=IKPowWithIntegerCheck(IKsign(((-0.007174910468)+((x2446*x2447))+x2445+(((0.275358)*x2446))+(((-0.007842839532)*cj6))+(((0.00098161)*sj6))+(((-0.275358)*x2450))+((x2448*x2450))+(((-1.0)*x2446*x2448))+(((-1.0)*cj6*x2445))+(((-1.0)*x2451))+(((-1.0)*x2447*x2450))+(((-0.015318229476)*x2449))+(((0.279642)*pz*x2449))+((cj6*x2451))+(((-0.01)*pz)))),-1);
if(!x2453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2452.value)+(((1.5707963267949)*(x2453.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2454=IKsin(j4);
IkReal x2455=IKcos(j4);
IkReal x2456=((0.035)*sj6);
IkReal x2457=((0.07)*cj5);
IkReal x2458=(cj3*px);
IkReal x2459=((0.279642)*sj6);
IkReal x2460=(py*sj3);
IkReal x2461=((1.0)*cj5);
IkReal x2462=((0.035)*cj6);
IkReal x2463=(px*sj3);
IkReal x2464=((0.07)*sj5);
IkReal x2465=(cj3*py);
IkReal x2466=((0.279642)*cj6);
IkReal x2467=((1.0)*sj5);
IkReal x2468=(cj5*x2455);
IkReal x2469=(pz*x2454);
IkReal x2470=(py*x2467);
IkReal x2471=(cj3*x2455);
IkReal x2472=(sj5*x2455);
IkReal x2473=(pz*x2455);
IkReal x2474=((0.550716)*x2454);
IkReal x2475=(sj5*x2454);
evalcond[0]=((0.275358)+x2466+(((-1.0)*x2473))+((x2454*x2465))+(((0.028046)*x2454))+(((-1.0)*x2454*x2463))+(((-1.0)*x2456))+(((0.054778)*x2455)));
evalcond[1]=((0.054778)+(((0.275358)*x2455))+(((-1.0)*pz))+(((-1.0)*x2459*x2475))+(((-1.0)*x2462*x2475))+(((0.01)*x2454))+(((-1.0)*x2455*x2456))+(((0.035)*x2475))+((x2455*x2466)));
evalcond[2]=((((-0.01)*cj5))+(((0.028046)*x2468))+(((-0.054778)*cj5*x2454))+((x2465*x2468))+((cj5*x2469))+(((-1.0)*x2455*x2461*x2463))+(((-1.0)*x2460*x2467))+(((-1.0)*x2458*x2467)));
evalcond[3]=((-0.028046)+x2463+(((-1.0)*x2454*x2466))+(((-1.0)*x2465))+((x2454*x2456))+(((-0.275358)*x2454))+(((-1.0)*x2459*x2472))+(((-1.0)*x2462*x2472))+(((0.01)*x2455))+(((0.035)*x2472)));
evalcond[4]=((0.035)+(((-1.0)*x2455*x2465*x2467))+(((-0.028046)*x2472))+(((0.054778)*x2475))+((x2463*x2472))+(((-1.0)*x2467*x2469))+(((-1.0)*x2460*x2461))+(((-1.0)*x2462))+(((-1.0)*x2459))+(((0.01)*sj5))+(((-1.0)*x2458*x2461)));
evalcond[5]=((-0.0015095874)+(((0.02)*x2469))+(((0.550716)*x2473))+(((-0.056092)*x2465))+(((-0.016540940936)*x2454))+((x2464*x2469))+(((0.02)*x2455*x2465))+(((-0.0007)*sj5))+(((0.056092)*x2463))+(((-1.0)*pp))+((x2463*x2474))+((x2457*x2458))+(((-0.00383446)*x2475))+((x2457*x2460))+(((0.109556)*pz))+(((0.00196322)*x2472))+((x2455*x2464*x2465))+(((-1.0)*x2455*x2463*x2464))+(((-0.02)*x2455*x2463))+(((-1.0)*x2465*x2474))+(((-0.029606201048)*x2455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x386=(cj4*sj6);
IkReal x387=((1.0)*sj3);
IkReal x388=(cj5*sj6);
IkReal x389=(cj4*cj6);
IkReal x390=((1.0)*sj5);
IkReal x391=(cj5*sj4);
IkReal x392=(sj4*sj6);
IkReal x393=(cj4*cj5);
IkReal x394=(cj6*sj4);
IkReal x395=(cj5*cj6);
IkReal x396=(cj3*x395);
IkReal x397=((-1.0)*sj3);
IkReal x398=((((-1.0)*x392))+((sj5*x389)));
IkReal x399=(x386+((sj5*x394)));
IkReal x400=((((-1.0)*sj5*x387))+((cj3*x393)));
IkReal x401=(x389+(((-1.0)*x390*x392)));
IkReal x402=((((-1.0)*x387*x393))+(((-1.0)*cj3*x390)));
IkReal x403=((((-1.0)*x394))+(((-1.0)*x386*x390)));
IkReal x404=(((sj3*x395))+((cj3*x398)));
IkReal x405=(x396+((x397*x398)));
IkReal x406=((((-1.0)*x387*x388))+((cj3*x403)));
IkReal x407=(((x397*x403))+(((-1.0)*cj3*x388)));
new_r00=(((r20*x399))+((r00*x405))+((r10*x404)));
new_r01=(((r11*x404))+((r01*x405))+((r21*x399)));
new_r02=(((r12*x404))+((r22*x399))+((r02*(((((-1.0)*x387*x398))+x396)))));
new_r10=(((r20*x391))+((r00*x402))+((r10*x400)));
new_r11=(((r11*x400))+((r01*x402))+((r21*x391)));
new_r12=(((r12*x400))+((r22*x391))+((r02*x402)));
new_r20=(((r00*x407))+((r10*x406))+((r20*x401)));
new_r21=(((r11*x406))+((r01*x407))+((r21*x401)));
new_r22=(((r22*x401))+((r12*x406))+((r02*x407)));
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
sj8array[0]=new_r22;
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j7eval[3];
j7eval[0]=cj8;
j7eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j7eval[2]=IKsign(cj8);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
j9eval[0]=cj8;
j9eval[1]=IKsign(cj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj8;
j7eval[1]=new_r12;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j9mul = 1;
j9=0;
j7mul=-1.0;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].fmul = j7mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].fmul = j9mul;
vinfos[9].freeind = 0;
vinfos[9].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 9;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j9mul = 1;
j9=0;
j7mul=1.0;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7=IKatan2(((-1.0)*new_r00), new_r01);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].fmul = j7mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].fmul = j9mul;
vinfos[9].freeind = 0;
vinfos[9].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 9;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x408=new_r22*new_r22;
IkReal x409=((16.0)*new_r11);
IkReal x410=((16.0)*new_r00);
IkReal x411=((16.0)*new_r01);
IkReal x412=(new_r10*new_r22);
IkReal x413=((8.0)*new_r01);
IkReal x414=((16.0)*x408);
IkReal x415=(x408*x409);
IkReal x416=(x408*x410);
j7eval[0]=((IKabs(((((8.0)*x412))+x413)))+(IKabs(((((32.0)*new_r10))+((new_r22*x411))+(((-1.0)*new_r10*x414)))))+(IKabs(((((32.0)*new_r01*x408))+(((16.0)*x412))+(((-1.0)*x411)))))+(IKabs((((new_r22*x413))+(((8.0)*new_r10*x408)))))+(IKabs((x415+(((-1.0)*x409)))))+(IKabs((x410+(((-1.0)*x416)))))+(IKabs((x416+(((-1.0)*x410)))))+(IKabs((x409+(((-1.0)*x415))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j9]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j7evalpoly[1];
IkReal x417=new_r22*new_r22;
IkReal x418=((16.0)*new_r11);
IkReal x419=(new_r10*new_r22);
IkReal x420=(x417*x418);
IkReal x421=((((8.0)*x419))+(((8.0)*new_r01)));
op[0]=x421;
op[1]=(x420+(((-1.0)*x418)));
op[2]=((((32.0)*new_r01*x417))+(((16.0)*x419))+(((-16.0)*new_r01)));
op[3]=((((-1.0)*x420))+x418);
op[4]=x421;
polyroots4(op,zeror,numroots);
IkReal j7array[4], cj7array[4], sj7array[4], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[4]={true,true,true,true};
_nj7 = 4;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x422=new_r22*new_r22;
IkReal x423=((16.0)*new_r00);
IkReal x424=(new_r01*new_r22);
IkReal x425=((8.0)*x424);
IkReal x426=((16.0)*x422);
IkReal x427=(x422*x423);
IkReal x428=((8.0)*new_r10*x422);
IkReal x429=(x428+x425);
j7evalpoly[0]=(((x429*(htj7*htj7*htj7*htj7)))+x429+((htj7*(((((-1.0)*x427))+x423))))+(((htj7*htj7*htj7)*(((((-1.0)*x423))+x427))))+(((htj7*htj7)*(((((32.0)*new_r10))+(((-1.0)*new_r10*x426))+(((16.0)*x424)))))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j9eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x430=cj7*cj7;
IkReal x431=((1.0)*cj7*new_r22);
IkReal x432=((1.0)+(((-1.0)*x430))+((x430*(new_r22*new_r22))));
j9eval[0]=x432;
j9eval[1]=IKsign(x432);
j9eval[2]=((IKabs(((((-1.0)*new_r00*x431))+((new_r01*sj7)))))+(IKabs(((((-1.0)*new_r01*x431))+(((-1.0)*new_r00*sj7))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j9eval[0]=new_r22;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x433=new_r22*new_r22;
j9eval[0]=(((cj7*x433))+(((-1.0)*cj7)));
j9eval[1]=((((-1.0)*sj7))+((sj7*x433)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x434=IKcos(j9);
IkReal x435=IKsin(j9);
evalcond[0]=(x434+new_r00);
evalcond[1]=((-1.0)*x435);
evalcond[2]=((-1.0)*x434);
evalcond[3]=(x435+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x436=IKsin(j9);
IkReal x437=IKcos(j9);
evalcond[0]=(x436+new_r01);
evalcond[1]=((-1.0)*x436);
evalcond[2]=((-1.0)*x437);
evalcond[3]=(x437+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x438=IKsin(j9);
IkReal x439=IKcos(j9);
evalcond[0]=(x438+new_r11);
evalcond[1]=((-1.0)*x438);
evalcond[2]=((-1.0)*x439);
evalcond[3]=(x439+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x440=IKcos(j9);
IkReal x441=IKsin(j9);
evalcond[0]=(x440+new_r10);
evalcond[1]=((-1.0)*x441);
evalcond[2]=((-1.0)*x440);
evalcond[3]=(x441+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x442=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x442.valid){
continue;
}
if((((-1.0)*(x442.value))) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(((-1.0)*(x442.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj7)))))+(IKabs(((((-1.0)*gconst50))+cj7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
sj7=IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))));
cj7=gconst50;
if( (gconst50) < -1-IKFAST_SINCOS_THRESH || (gconst50) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=IKacos(gconst50);
CheckValue<IkReal> x443=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x443.valid){
continue;
}
if((((-1.0)*(x443.value))) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(((-1.0)*(x443.value)))));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x444=IKPowWithIntegerCheck(gconst50,-1);
if(!x444.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r11*(x444.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+((gconst50*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x444.value)))+IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+((gconst50*new_r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11*(x444.value)), ((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+((gconst50*new_r10))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x445=IKsin(j9);
IkReal x446=IKcos(j9);
IkReal x447=((1.0)*gconst50);
if((((1.0)+(((-1.0)*gconst50*x447)))) < -0.00001)
continue;
IkReal x448=IKsqrt(((1.0)+(((-1.0)*gconst50*x447))));
IkReal x449=((1.0)*x448);
evalcond[0]=((-1.0)*x445);
evalcond[1]=((-1.0)*x446);
evalcond[2]=(((gconst50*x445))+new_r11);
evalcond[3]=(new_r10+(((-1.0)*x446*x447)));
evalcond[4]=(((x446*x448))+new_r00);
evalcond[5]=((((-1.0)*x445*x449))+new_r01);
evalcond[6]=((((-1.0)*new_r01*x449))+x445+((gconst50*new_r11)));
evalcond[7]=(((new_r00*x448))+x446+(((-1.0)*new_r10*x447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x450=IKPowWithIntegerCheck(IKsign(gconst50),-1);
if(!x450.valid){
continue;
}
CheckValue<IkReal> x451 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x451.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x450.value)))+(x451.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x452=IKsin(j9);
IkReal x453=IKcos(j9);
IkReal x454=((1.0)*gconst50);
if((((1.0)+(((-1.0)*gconst50*x454)))) < -0.00001)
continue;
IkReal x455=IKsqrt(((1.0)+(((-1.0)*gconst50*x454))));
IkReal x456=((1.0)*x455);
evalcond[0]=((-1.0)*x452);
evalcond[1]=((-1.0)*x453);
evalcond[2]=(((gconst50*x452))+new_r11);
evalcond[3]=((((-1.0)*x453*x454))+new_r10);
evalcond[4]=(((x453*x455))+new_r00);
evalcond[5]=((((-1.0)*x452*x456))+new_r01);
evalcond[6]=((((-1.0)*new_r01*x456))+x452+((gconst50*new_r11)));
evalcond[7]=((((-1.0)*new_r10*x454))+((new_r00*x455))+x453);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x457=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x457.valid){
continue;
}
if((((-1.0)*(x457.value))) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(((-1.0)*(x457.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst50))+cj7)))+(IKabs(((1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
sj7=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))))));
cj7=gconst50;
if( (gconst50) < -1-IKFAST_SINCOS_THRESH || (gconst50) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=((-1.0)*(IKacos(gconst50)));
CheckValue<IkReal> x458=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x458.valid){
continue;
}
if((((-1.0)*(x458.value))) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(((-1.0)*(x458.value)))));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
CheckValue<IkReal> x459=IKPowWithIntegerCheck(gconst50,-1);
if(!x459.valid){
continue;
}
if( IKabs(((((-1.0)*gconst50*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x459.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst50*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))))+IKsqr((new_r10*(x459.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*gconst50*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))), (new_r10*(x459.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x460=IKsin(j9);
IkReal x461=IKcos(j9);
IkReal x462=((1.0)*gconst50);
if((((1.0)+(((-1.0)*gconst50*x462)))) < -0.00001)
continue;
IkReal x463=IKsqrt(((1.0)+(((-1.0)*gconst50*x462))));
IkReal x464=((1.0)*x463);
evalcond[0]=((-1.0)*x460);
evalcond[1]=((-1.0)*x461);
evalcond[2]=(((gconst50*x460))+new_r11);
evalcond[3]=((((-1.0)*x461*x462))+new_r10);
evalcond[4]=(((x460*x463))+new_r01);
evalcond[5]=((((-1.0)*x461*x464))+new_r00);
evalcond[6]=(((new_r01*x463))+x460+((gconst50*new_r11)));
evalcond[7]=((((-1.0)*new_r10*x462))+(((-1.0)*new_r00*x464))+x461);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x465=IKPowWithIntegerCheck(IKsign(gconst50),-1);
if(!x465.valid){
continue;
}
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x465.value)))+(x466.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x467=IKsin(j9);
IkReal x468=IKcos(j9);
IkReal x469=((1.0)*gconst50);
if((((1.0)+(((-1.0)*gconst50*x469)))) < -0.00001)
continue;
IkReal x470=IKsqrt(((1.0)+(((-1.0)*gconst50*x469))));
IkReal x471=((1.0)*x470);
evalcond[0]=((-1.0)*x467);
evalcond[1]=((-1.0)*x468);
evalcond[2]=(((gconst50*x467))+new_r11);
evalcond[3]=((((-1.0)*x468*x469))+new_r10);
evalcond[4]=(((x467*x470))+new_r01);
evalcond[5]=((((-1.0)*x468*x471))+new_r00);
evalcond[6]=(((new_r01*x470))+x467+((gconst50*new_r11)));
evalcond[7]=((((-1.0)*new_r10*x469))+(((-1.0)*new_r00*x471))+x468);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x472=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x472.valid){
continue;
}
if((((-1.0)*(x472.value))) < -0.00001)
continue;
IkReal gconst51=IKsqrt(((-1.0)*(x472.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj7)))))+(IKabs(((((-1.0)*gconst51))+cj7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
sj7=IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))));
cj7=gconst51;
if( (gconst51) < -1-IKFAST_SINCOS_THRESH || (gconst51) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=IKacos(gconst51);
CheckValue<IkReal> x473=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x473.valid){
continue;
}
if((((-1.0)*(x473.value))) < -0.00001)
continue;
IkReal gconst51=IKsqrt(((-1.0)*(x473.value)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x474=IKPowWithIntegerCheck(gconst51,-1);
if(!x474.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r11*(x474.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))+((gconst51*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x474.value)))+IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))+((gconst51*new_r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11*(x474.value)), ((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))+((gconst51*new_r10))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x475=IKsin(j9);
IkReal x476=IKcos(j9);
IkReal x477=((1.0)*gconst51);
if((((1.0)+(((-1.0)*gconst51*x477)))) < -0.00001)
continue;
IkReal x478=IKsqrt(((1.0)+(((-1.0)*gconst51*x477))));
IkReal x479=((1.0)*x478);
evalcond[0]=((-1.0)*x475);
evalcond[1]=((-1.0)*x476);
evalcond[2]=(((gconst51*x475))+new_r11);
evalcond[3]=((((-1.0)*x476*x477))+new_r10);
evalcond[4]=(new_r00+((x476*x478)));
evalcond[5]=((((-1.0)*x475*x479))+new_r01);
evalcond[6]=((((-1.0)*new_r01*x479))+x475+((gconst51*new_r11)));
evalcond[7]=(((new_r00*x478))+(((-1.0)*new_r10*x477))+x476);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x480=IKPowWithIntegerCheck(IKsign(gconst51),-1);
if(!x480.valid){
continue;
}
CheckValue<IkReal> x481 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x481.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x480.value)))+(x481.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x482=IKsin(j9);
IkReal x483=IKcos(j9);
IkReal x484=((1.0)*gconst51);
if((((1.0)+(((-1.0)*gconst51*x484)))) < -0.00001)
continue;
IkReal x485=IKsqrt(((1.0)+(((-1.0)*gconst51*x484))));
IkReal x486=((1.0)*x485);
evalcond[0]=((-1.0)*x482);
evalcond[1]=((-1.0)*x483);
evalcond[2]=(new_r11+((gconst51*x482)));
evalcond[3]=((((-1.0)*x483*x484))+new_r10);
evalcond[4]=(((x483*x485))+new_r00);
evalcond[5]=((((-1.0)*x482*x486))+new_r01);
evalcond[6]=((((-1.0)*new_r01*x486))+x482+((gconst51*new_r11)));
evalcond[7]=((((-1.0)*new_r10*x484))+x483+((new_r00*x485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x487=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x487.valid){
continue;
}
if((((-1.0)*(x487.value))) < -0.00001)
continue;
IkReal gconst51=IKsqrt(((-1.0)*(x487.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj7)))))+(IKabs(((((-1.0)*gconst51))+cj7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
sj7=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))))));
cj7=gconst51;
if( (gconst51) < -1-IKFAST_SINCOS_THRESH || (gconst51) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=((-1.0)*(IKacos(gconst51)));
CheckValue<IkReal> x488=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x488.valid){
continue;
}
if((((-1.0)*(x488.value))) < -0.00001)
continue;
IkReal gconst51=IKsqrt(((-1.0)*(x488.value)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
CheckValue<IkReal> x489=IKPowWithIntegerCheck(gconst51,-1);
if(!x489.valid){
continue;
}
if( IKabs(((((-1.0)*gconst51*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x489.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst51*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))))+IKsqr((new_r10*(x489.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*gconst51*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))), (new_r10*(x489.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x490=IKsin(j9);
IkReal x491=IKcos(j9);
IkReal x492=((1.0)*x491);
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
IkReal x493=IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))));
evalcond[0]=((-1.0)*x490);
evalcond[1]=((-1.0)*x491);
evalcond[2]=(((gconst51*x490))+new_r11);
evalcond[3]=((((-1.0)*gconst51*x492))+new_r10);
evalcond[4]=(((x490*x493))+new_r01);
evalcond[5]=(new_r00+(((-1.0)*x492*x493)));
evalcond[6]=(x490+((new_r01*x493))+((gconst51*new_r11)));
evalcond[7]=((((-1.0)*gconst51*new_r10))+(((-1.0)*new_r00*x493))+x491);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x494=IKPowWithIntegerCheck(IKsign(gconst51),-1);
if(!x494.valid){
continue;
}
CheckValue<IkReal> x495 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x495.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x494.value)))+(x495.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x496=IKsin(j9);
IkReal x497=IKcos(j9);
IkReal x498=((1.0)*x497);
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
IkReal x499=IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))));
evalcond[0]=((-1.0)*x496);
evalcond[1]=((-1.0)*x497);
evalcond[2]=(((gconst51*x496))+new_r11);
evalcond[3]=((((-1.0)*gconst51*x498))+new_r10);
evalcond[4]=(((x496*x499))+new_r01);
evalcond[5]=((((-1.0)*x498*x499))+new_r00);
evalcond[6]=(x496+((new_r01*x499))+((gconst51*new_r11)));
evalcond[7]=((((-1.0)*gconst51*new_r10))+(((-1.0)*new_r00*x499))+x497);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x500=new_r22*new_r22;
IkReal x501=((1.0)*new_r22);
CheckValue<IkReal> x502=IKPowWithIntegerCheck((((cj7*x500))+(((-1.0)*cj7))),-1);
if(!x502.valid){
continue;
}
CheckValue<IkReal> x503=IKPowWithIntegerCheck(((((-1.0)*sj7))+((sj7*x500))),-1);
if(!x503.valid){
continue;
}
if( IKabs(((x502.value)*(((((-1.0)*new_r00*x501))+new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x503.value)*(((((-1.0)*new_r11*x501))+new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x502.value)*(((((-1.0)*new_r00*x501))+new_r11))))+IKsqr(((x503.value)*(((((-1.0)*new_r11*x501))+new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x502.value)*(((((-1.0)*new_r00*x501))+new_r11))), ((x503.value)*(((((-1.0)*new_r11*x501))+new_r00))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x504=IKsin(j9);
IkReal x505=IKcos(j9);
IkReal x506=((1.0)*new_r10);
IkReal x507=(new_r22*sj7);
IkReal x508=(cj7*new_r01);
IkReal x509=((1.0)*new_r22);
IkReal x510=(cj7*new_r00);
IkReal x511=((1.0)*sj7);
IkReal x512=(new_r22*x504);
IkReal x513=(new_r22*x505);
IkReal x514=((1.0)*x505);
evalcond[0]=((((-1.0)*new_r01*x511))+x504+((cj7*new_r11)));
evalcond[1]=((((-1.0)*cj7*x506))+((new_r00*sj7))+x505);
evalcond[2]=(((new_r10*sj7))+x512+x510);
evalcond[3]=(((new_r11*sj7))+x508+x513);
evalcond[4]=(((sj7*x505))+((cj7*x512))+new_r00);
evalcond[5]=(((x505*x507))+new_r11+((cj7*x504)));
evalcond[6]=((((-1.0)*x504*x511))+((cj7*x513))+new_r01);
evalcond[7]=((((-1.0)*cj7*x514))+new_r10+((x504*x507)));
evalcond[8]=((((-1.0)*x506*x507))+(((-1.0)*x504))+(((-1.0)*x509*x510)));
evalcond[9]=((((-1.0)*new_r11*x507))+(((-1.0)*x508*x509))+(((-1.0)*x514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x515=((1.0)*sj7);
CheckValue<IkReal> x516=IKPowWithIntegerCheck(new_r22,-1);
if(!x516.valid){
continue;
}
if( IKabs(((x516.value)*(((((-1.0)*new_r10*x515))+(((-1.0)*cj7*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*x515))+((cj7*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x516.value)*(((((-1.0)*new_r10*x515))+(((-1.0)*cj7*new_r00))))))+IKsqr(((((-1.0)*new_r00*x515))+((cj7*new_r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x516.value)*(((((-1.0)*new_r10*x515))+(((-1.0)*cj7*new_r00))))), ((((-1.0)*new_r00*x515))+((cj7*new_r10))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x517=IKsin(j9);
IkReal x518=IKcos(j9);
IkReal x519=((1.0)*new_r10);
IkReal x520=(new_r22*sj7);
IkReal x521=(cj7*new_r01);
IkReal x522=((1.0)*new_r22);
IkReal x523=(cj7*new_r00);
IkReal x524=((1.0)*sj7);
IkReal x525=(new_r22*x517);
IkReal x526=(new_r22*x518);
IkReal x527=((1.0)*x518);
evalcond[0]=((((-1.0)*new_r01*x524))+x517+((cj7*new_r11)));
evalcond[1]=((((-1.0)*cj7*x519))+((new_r00*sj7))+x518);
evalcond[2]=(((new_r10*sj7))+x523+x525);
evalcond[3]=(((new_r11*sj7))+x521+x526);
evalcond[4]=(((cj7*x525))+((sj7*x518))+new_r00);
evalcond[5]=(((cj7*x517))+((x518*x520))+new_r11);
evalcond[6]=(((cj7*x526))+(((-1.0)*x517*x524))+new_r01);
evalcond[7]=(((x517*x520))+(((-1.0)*cj7*x527))+new_r10);
evalcond[8]=((((-1.0)*x517))+(((-1.0)*x522*x523))+(((-1.0)*x519*x520)));
evalcond[9]=((((-1.0)*x521*x522))+(((-1.0)*x527))+(((-1.0)*new_r11*x520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x528=cj7*cj7;
IkReal x529=((1.0)*cj7*new_r22);
CheckValue<IkReal> x530 = IKatan2WithCheck(IkReal((((new_r01*sj7))+(((-1.0)*new_r00*x529)))),IkReal(((((-1.0)*new_r01*x529))+(((-1.0)*new_r00*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x530.valid){
continue;
}
CheckValue<IkReal> x531=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x528))+((x528*(new_r22*new_r22))))),-1);
if(!x531.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x530.value)+(((1.5707963267949)*(x531.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x532=IKsin(j9);
IkReal x533=IKcos(j9);
IkReal x534=((1.0)*new_r10);
IkReal x535=(new_r22*sj7);
IkReal x536=(cj7*new_r01);
IkReal x537=((1.0)*new_r22);
IkReal x538=(cj7*new_r00);
IkReal x539=((1.0)*sj7);
IkReal x540=(new_r22*x532);
IkReal x541=(new_r22*x533);
IkReal x542=((1.0)*x533);
evalcond[0]=((((-1.0)*new_r01*x539))+x532+((cj7*new_r11)));
evalcond[1]=(((new_r00*sj7))+(((-1.0)*cj7*x534))+x533);
evalcond[2]=(((new_r10*sj7))+x540+x538);
evalcond[3]=(((new_r11*sj7))+x541+x536);
evalcond[4]=(((cj7*x540))+((sj7*x533))+new_r00);
evalcond[5]=(((cj7*x532))+new_r11+((x533*x535)));
evalcond[6]=((((-1.0)*x532*x539))+((cj7*x541))+new_r01);
evalcond[7]=((((-1.0)*cj7*x542))+new_r10+((x532*x535)));
evalcond[8]=((((-1.0)*x537*x538))+(((-1.0)*x534*x535))+(((-1.0)*x532)));
evalcond[9]=((((-1.0)*x542))+(((-1.0)*new_r11*x535))+(((-1.0)*x536*x537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x544=IKPowWithIntegerCheck(cj8,-1);
if(!x544.valid){
continue;
}
IkReal x543=x544.value;
CheckValue<IkReal> x545=IKPowWithIntegerCheck(new_r12,-1);
if(!x545.valid){
continue;
}
CheckValue<IkReal> x546=IKPowWithIntegerCheck(x543,-2);
if(!x546.valid){
continue;
}
if( IKabs((x543*(x545.value)*(((((-1.0)*(new_r02*new_r02)))+(x546.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x543)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x543*(x545.value)*(((((-1.0)*(new_r02*new_r02)))+(x546.value)))))+IKsqr((new_r02*x543))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x543*(x545.value)*(((((-1.0)*(new_r02*new_r02)))+(x546.value)))), (new_r02*x543));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x547=IKcos(j7);
IkReal x548=IKsin(j7);
IkReal x549=((1.0)*new_r02);
IkReal x550=(cj8*x547);
IkReal x551=(new_r12*x548);
IkReal x552=(cj8*x548);
evalcond[0]=((((-1.0)*x550))+new_r02);
evalcond[1]=((((-1.0)*x552))+new_r12);
evalcond[2]=(((new_r12*x547))+(((-1.0)*x548*x549)));
evalcond[3]=(((new_r02*x547))+x551+(((-1.0)*cj8)));
evalcond[4]=(((new_r20*sj8))+((new_r10*x552))+((new_r00*x550)));
evalcond[5]=(((new_r11*x552))+((new_r21*sj8))+((new_r01*x550)));
evalcond[6]=((-1.0)+((new_r02*x550))+((new_r22*sj8))+((cj8*x551)));
evalcond[7]=(((cj8*new_r22))+(((-1.0)*sj8*x551))+(((-1.0)*sj8*x547*x549)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=cj8;
j9eval[1]=IKsign(cj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=cj8;
j9eval[1]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
j9eval[0]=cj8;
j9eval[1]=sj7;
j9eval[2]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x553=((1.0)*cj7);
if( IKabs((((new_r01*sj7))+(((-1.0)*new_r00*x553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x553))+(((-1.0)*new_r00*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*sj7))+(((-1.0)*new_r00*x553))))+IKsqr(((((-1.0)*new_r01*x553))+(((-1.0)*new_r00*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((new_r01*sj7))+(((-1.0)*new_r00*x553))), ((((-1.0)*new_r01*x553))+(((-1.0)*new_r00*sj7))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x554=IKsin(j9);
IkReal x555=IKcos(j9);
IkReal x556=((1.0)*cj7);
IkReal x557=(sj7*x555);
IkReal x558=(cj7*x554);
IkReal x559=(sj7*x554);
IkReal x560=(x558+x557);
evalcond[0]=(((new_r10*sj7))+x554+((cj7*new_r00)));
evalcond[1]=(((new_r11*sj7))+x555+((cj7*new_r01)));
evalcond[2]=((((-1.0)*new_r01*sj7))+x554+((cj7*new_r11)));
evalcond[3]=((((-1.0)*new_r10*x556))+((new_r00*sj7))+x555);
evalcond[4]=(x560+new_r00);
evalcond[5]=(x560+new_r11);
evalcond[6]=((((-1.0)*x559))+((cj7*x555))+new_r01);
evalcond[7]=((((-1.0)*x555*x556))+x559+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs((((new_r01*sj7))+((cj7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*sj7))+((cj7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*sj7))+((cj7*new_r00))))+IKsqr(((((-1.0)*new_r00*sj7))+((cj7*new_r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((new_r01*sj7))+((cj7*new_r00))), ((((-1.0)*new_r00*sj7))+((cj7*new_r01))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x561=IKsin(j9);
IkReal x562=IKcos(j9);
IkReal x563=((1.0)*cj7);
IkReal x564=((1.0)*sj7);
IkReal x565=(((x562*x563))+((x561*x564)));
evalcond[0]=(x561+((cj7*new_r11))+(((-1.0)*new_r01*x564)));
evalcond[1]=(((new_r00*sj7))+x562+(((-1.0)*new_r10*x563)));
evalcond[2]=(((new_r10*sj7))+(((-1.0)*x561))+((cj7*new_r00)));
evalcond[3]=(((new_r11*sj7))+(((-1.0)*x562))+((cj7*new_r01)));
evalcond[4]=(((sj7*x562))+new_r00+(((-1.0)*x561*x563)));
evalcond[5]=((((-1.0)*x562*x564))+((cj7*x561))+new_r11);
evalcond[6]=(new_r01+(((-1.0)*x565)));
evalcond[7]=(new_r10+(((-1.0)*x565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x566=IKsin(j9);
IkReal x567=IKcos(j9);
IkReal x568=((1.0)*cj8);
IkReal x569=((1.0)*sj8);
evalcond[0]=(x566+new_r11);
evalcond[1]=(x567+(((-1.0)*new_r10)));
evalcond[2]=(((sj8*x566))+new_r00);
evalcond[3]=(((sj8*x567))+new_r01);
evalcond[4]=((((-1.0)*x566*x568))+new_r20);
evalcond[5]=((((-1.0)*x567*x568))+new_r21);
evalcond[6]=((((-1.0)*new_r00*x569))+((cj8*new_r20))+(((-1.0)*x566)));
evalcond[7]=(((cj8*new_r21))+(((-1.0)*x567))+(((-1.0)*new_r01*x569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x570=IKsin(j9);
IkReal x571=IKcos(j9);
IkReal x572=((1.0)*cj8);
evalcond[0]=(x571+new_r10);
evalcond[1]=(x570+(((-1.0)*new_r11)));
evalcond[2]=((((-1.0)*x570*x572))+new_r20);
evalcond[3]=((((-1.0)*x571*x572))+new_r21);
evalcond[4]=((((-1.0)*new_r00))+((sj8*x570)));
evalcond[5]=((((-1.0)*new_r01))+((sj8*x571)));
evalcond[6]=(((cj8*new_r20))+((new_r00*sj8))+(((-1.0)*x570)));
evalcond[7]=(((cj8*new_r21))+((new_r01*sj8))+(((-1.0)*x571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r20, new_r21);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x573=IKcos(j9);
IkReal x574=IKsin(j9);
IkReal x575=((1.0)*cj7);
IkReal x576=((1.0)*x574);
evalcond[0]=((((-1.0)*x576))+new_r20);
evalcond[1]=((((-1.0)*x573))+new_r21);
evalcond[2]=(((sj7*x573))+new_r00);
evalcond[3]=(((cj7*x574))+new_r11);
evalcond[4]=((((-1.0)*sj7*x576))+new_r01);
evalcond[5]=((((-1.0)*x573*x575))+new_r10);
evalcond[6]=((((-1.0)*new_r01*sj7))+x574+((cj7*new_r11)));
evalcond[7]=(((new_r00*sj7))+(((-1.0)*new_r10*x575))+x573);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x577=IKcos(j9);
IkReal x578=IKsin(j9);
IkReal x579=((1.0)*cj7);
IkReal x580=((1.0)*sj7);
evalcond[0]=(x578+new_r20);
evalcond[1]=(x577+new_r21);
evalcond[2]=(((sj7*x577))+new_r00);
evalcond[3]=(((cj7*x578))+new_r11);
evalcond[4]=((((-1.0)*x578*x580))+new_r01);
evalcond[5]=((((-1.0)*x577*x579))+new_r10);
evalcond[6]=((((-1.0)*new_r01*x580))+x578+((cj7*new_r11)));
evalcond[7]=(((new_r00*sj7))+(((-1.0)*new_r10*x579))+x577);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=IKabs(new_r22);
if( IKabs(j9eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j9]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j9array[2], cj9array[2], sj9array[2], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[2]={true,true};
_nj9 = 2;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x582=IKPowWithIntegerCheck(cj8,-1);
if(!x582.valid){
continue;
}
IkReal x581=x582.value;
CheckValue<IkReal> x583=IKPowWithIntegerCheck(sj7,-1);
if(!x583.valid){
continue;
}
CheckValue<IkReal> x584=IKPowWithIntegerCheck(sj8,-1);
if(!x584.valid){
continue;
}
if( IKabs((new_r20*x581)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x581*(x583.value)*(x584.value)*(((((-1.0)*cj8*new_r11))+(((-1.0)*cj7*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x581))+IKsqr((x581*(x583.value)*(x584.value)*(((((-1.0)*cj8*new_r11))+(((-1.0)*cj7*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r20*x581), (x581*(x583.value)*(x584.value)*(((((-1.0)*cj8*new_r11))+(((-1.0)*cj7*new_r20))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x585=IKsin(j9);
IkReal x586=IKcos(j9);
IkReal x587=((1.0)*new_r10);
IkReal x588=(sj7*sj8);
IkReal x589=(cj7*new_r01);
IkReal x590=((1.0)*sj8);
IkReal x591=(cj7*new_r00);
IkReal x592=(cj7*x585);
IkReal x593=(sj8*x586);
IkReal x594=((1.0)*x585);
IkReal x595=((1.0)*x586);
evalcond[0]=((((-1.0)*cj8*x594))+new_r20);
evalcond[1]=((((-1.0)*cj8*x595))+new_r21);
evalcond[2]=((((-1.0)*new_r01*sj7))+x585+((cj7*new_r11)));
evalcond[3]=((((-1.0)*cj7*x587))+((new_r00*sj7))+x586);
evalcond[4]=(((sj8*x585))+((new_r10*sj7))+x591);
evalcond[5]=(((new_r11*sj7))+x589+x593);
evalcond[6]=(((sj8*x592))+new_r00+((sj7*x586)));
evalcond[7]=(((x586*x588))+x592+new_r11);
evalcond[8]=((((-1.0)*sj7*x594))+new_r01+((cj7*x593)));
evalcond[9]=(((x585*x588))+(((-1.0)*cj7*x595))+new_r10);
evalcond[10]=(((cj8*new_r20))+(((-1.0)*x587*x588))+(((-1.0)*x590*x591))+(((-1.0)*x594)));
evalcond[11]=(((cj8*new_r21))+(((-1.0)*x589*x590))+(((-1.0)*x595))+(((-1.0)*new_r11*x588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x597=IKPowWithIntegerCheck(cj8,-1);
if(!x597.valid){
continue;
}
IkReal x596=x597.value;
CheckValue<IkReal> x598=IKPowWithIntegerCheck(sj7,-1);
if(!x598.valid){
continue;
}
if( IKabs((new_r20*x596)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x596*(x598.value)*(((((-1.0)*cj7*new_r20*sj8))+(((-1.0)*cj8*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x596))+IKsqr((x596*(x598.value)*(((((-1.0)*cj7*new_r20*sj8))+(((-1.0)*cj8*new_r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r20*x596), (x596*(x598.value)*(((((-1.0)*cj7*new_r20*sj8))+(((-1.0)*cj8*new_r00))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x599=IKsin(j9);
IkReal x600=IKcos(j9);
IkReal x601=((1.0)*new_r10);
IkReal x602=(sj7*sj8);
IkReal x603=(cj7*new_r01);
IkReal x604=((1.0)*sj8);
IkReal x605=(cj7*new_r00);
IkReal x606=(cj7*x599);
IkReal x607=(sj8*x600);
IkReal x608=((1.0)*x599);
IkReal x609=((1.0)*x600);
evalcond[0]=((((-1.0)*cj8*x608))+new_r20);
evalcond[1]=((((-1.0)*cj8*x609))+new_r21);
evalcond[2]=((((-1.0)*new_r01*sj7))+x599+((cj7*new_r11)));
evalcond[3]=(((new_r00*sj7))+x600+(((-1.0)*cj7*x601)));
evalcond[4]=(((new_r10*sj7))+((sj8*x599))+x605);
evalcond[5]=(((new_r11*sj7))+x603+x607);
evalcond[6]=(((sj7*x600))+((sj8*x606))+new_r00);
evalcond[7]=(((x600*x602))+x606+new_r11);
evalcond[8]=(((cj7*x607))+(((-1.0)*sj7*x608))+new_r01);
evalcond[9]=(((x599*x602))+new_r10+(((-1.0)*cj7*x609)));
evalcond[10]=(((cj8*new_r20))+(((-1.0)*x604*x605))+(((-1.0)*x608))+(((-1.0)*x601*x602)));
evalcond[11]=(((cj8*new_r21))+(((-1.0)*x603*x604))+(((-1.0)*x609))+(((-1.0)*new_r11*x602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x610=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x610.valid){
continue;
}
CheckValue<IkReal> x611 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x611.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x610.value)))+(x611.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x612=IKsin(j9);
IkReal x613=IKcos(j9);
IkReal x614=((1.0)*new_r10);
IkReal x615=(sj7*sj8);
IkReal x616=(cj7*new_r01);
IkReal x617=((1.0)*sj8);
IkReal x618=(cj7*new_r00);
IkReal x619=(cj7*x612);
IkReal x620=(sj8*x613);
IkReal x621=((1.0)*x612);
IkReal x622=((1.0)*x613);
evalcond[0]=((((-1.0)*cj8*x621))+new_r20);
evalcond[1]=((((-1.0)*cj8*x622))+new_r21);
evalcond[2]=((((-1.0)*new_r01*sj7))+x612+((cj7*new_r11)));
evalcond[3]=(((new_r00*sj7))+x613+(((-1.0)*cj7*x614)));
evalcond[4]=(((sj8*x612))+((new_r10*sj7))+x618);
evalcond[5]=(((new_r11*sj7))+x616+x620);
evalcond[6]=(((sj8*x619))+new_r00+((sj7*x613)));
evalcond[7]=(((x613*x615))+x619+new_r11);
evalcond[8]=((((-1.0)*sj7*x621))+((cj7*x620))+new_r01);
evalcond[9]=(((x612*x615))+(((-1.0)*cj7*x622))+new_r10);
evalcond[10]=((((-1.0)*x614*x615))+((cj8*new_r20))+(((-1.0)*x621))+(((-1.0)*x617*x618)));
evalcond[11]=(((cj8*new_r21))+(((-1.0)*x622))+(((-1.0)*new_r11*x615))+(((-1.0)*x616*x617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x623=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x623.valid){
continue;
}
CheckValue<IkReal> x624 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x624.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x623.value)))+(x624.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x625=((1.0)*cj8);
evalcond[0]=(new_r20+(((-1.0)*x625*(IKsin(j9)))));
evalcond[1]=((((-1.0)*x625*(IKcos(j9))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=cj8;
j7eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j7eval[2]=IKsign(cj8);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj8;
j7eval[1]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
IkReal x626=(((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)));
j7eval[0]=x626;
j7eval[1]=IKsign(x626);
j7eval[2]=((IKabs(((((-1.0)*cj9*new_r00))+((new_r01*sj9)))))+(IKabs((((cj9*new_r10))+(((-1.0)*new_r11*sj9))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
IkReal x627=(((cj9*new_r01))+(((-1.0)*new_r11*sj9)));
j7eval[0]=x627;
j7eval[1]=((IKabs((((cj9*sj9))+(((-1.0)*new_r00*new_r01)))))+(IKabs(((((-1.0)*(cj9*cj9)))+((new_r00*new_r11))))));
j7eval[2]=IKsign(x627);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
IkReal x628=((1.0)*sj9);
IkReal x629=(((cj9*new_r00))+(((-1.0)*new_r10*x628)));
j7eval[0]=x629;
j7eval[1]=((IKabs(((((-1.0)*cj9*x628))+((new_r10*new_r11)))))+(IKabs(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*new_r00*new_r11))))));
j7eval[2]=IKsign(x629);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x632 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x632)==0){
continue;
}
IkReal x630=pow(x632,-0.5);
IkReal x631=((-1.0)*x630);
CheckValue<IkReal> x633 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x633.valid){
continue;
}
IkReal gconst26=((-1.0)*(x633.value));
IkReal gconst27=(new_r00*x631);
IkReal gconst28=(new_r10*x631);
CheckValue<IkReal> x634 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x634.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x634.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x638 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x638.valid){
continue;
}
IkReal x635=((-1.0)*(x638.value));
IkReal x636=x630;
IkReal x637=((-1.0)*x636);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x635;
IkReal gconst26=x635;
IkReal gconst27=(new_r00*x637);
IkReal gconst28=(new_r10*x637);
IkReal x639=new_r10*new_r10;
IkReal x640=(new_r00*new_r11);
IkReal x641=(x640+(((-1.0)*new_r01*new_r10)));
IkReal x642=x630;
IkReal x643=((1.0)*x642);
j7eval[0]=x641;
j7eval[1]=IKsign(x641);
j7eval[2]=((IKabs(((((-1.0)*new_r00*new_r01*x643))+((new_r00*new_r10*x642)))))+(IKabs(((((-1.0)*x639*x643))+((x640*x642))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x647 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x647.valid){
continue;
}
IkReal x644=((-1.0)*(x647.value));
IkReal x645=x630;
IkReal x646=((-1.0)*x645);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x644;
IkReal gconst26=x644;
IkReal gconst27=(new_r00*x646);
IkReal gconst28=(new_r10*x646);
IkReal x648=new_r10*new_r10;
IkReal x649=((1.0)*new_r00);
CheckValue<IkReal> x652=IKPowWithIntegerCheck((x648+(new_r00*new_r00)),-1);
if(!x652.valid){
continue;
}
IkReal x650=x652.value;
IkReal x651=(x648*x650);
j7eval[0]=((IKabs(((((-1.0)*new_r11*x649))+x651)))+(IKabs((((new_r01*x650*(new_r00*new_r00*new_r00)))+((new_r00*new_r01*x651))+(((-1.0)*new_r10*x649*x650))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x656 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x656.valid){
continue;
}
IkReal x653=((-1.0)*(x656.value));
IkReal x654=x630;
IkReal x655=((-1.0)*x654);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x653;
IkReal gconst26=x653;
IkReal gconst27=(new_r00*x655);
IkReal gconst28=(new_r10*x655);
IkReal x657=new_r00*new_r00;
IkReal x658=(new_r00*new_r01);
IkReal x659=(((new_r10*new_r11))+x658);
IkReal x660=x630;
IkReal x661=(new_r00*x660);
j7eval[0]=x659;
j7eval[1]=((IKabs((((new_r11*x661))+(((-1.0)*x657*x660)))))+(IKabs((((new_r10*x661))+((x658*x660))))));
j7eval[2]=IKsign(x659);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x662=((-1.0)*new_r10);
CheckValue<IkReal> x664 = IKatan2WithCheck(IkReal(0),IkReal(x662),IKFAST_ATAN2_MAGTHRESH);
if(!x664.valid){
continue;
}
IkReal x663=((-1.0)*(x664.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x663;
new_r11=0;
new_r00=0;
IkReal gconst26=x663;
IkReal gconst27=0;
IkReal x665 = new_r10*new_r10;
if(IKabs(x665)==0){
continue;
}
IkReal gconst28=(x662*(pow(x665,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x666=IKPowWithIntegerCheck(gconst28,-1);
if(!x666.valid){
continue;
}
cj7array[0]=(new_r10*(x666.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x667=IKsin(j7);
IkReal x668=IKcos(j7);
evalcond[0]=(new_r10*x667);
evalcond[1]=(gconst28*x667);
evalcond[2]=((-1.0)*new_r01*x667);
evalcond[3]=(gconst28+((new_r01*x668)));
evalcond[4]=(((gconst28*x668))+new_r01);
evalcond[5]=(gconst28+(((-1.0)*new_r10*x668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x669=IKPowWithIntegerCheck(new_r10,-1);
if(!x669.valid){
continue;
}
cj7array[0]=(gconst28*(x669.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x670=IKsin(j7);
IkReal x671=IKcos(j7);
IkReal x672=(gconst28*x671);
evalcond[0]=(new_r10*x670);
evalcond[1]=(gconst28*x670);
evalcond[2]=((-1.0)*new_r01*x670);
evalcond[3]=(((new_r01*x671))+gconst28);
evalcond[4]=(x672+new_r01);
evalcond[5]=((((-1.0)*x672))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst27;
evalcond[2]=gconst28;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x673=((-1.0)*new_r10);
CheckValue<IkReal> x675 = IKatan2WithCheck(IkReal(new_r00),IkReal(x673),IKFAST_ATAN2_MAGTHRESH);
if(!x675.valid){
continue;
}
IkReal x674=((-1.0)*(x675.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x674;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst26=x674;
IkReal gconst27=((-1.0)*new_r00);
IkReal gconst28=x673;
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x676=((-1.0)*new_r10);
CheckValue<IkReal> x678 = IKatan2WithCheck(IkReal(new_r00),IkReal(x676),IKFAST_ATAN2_MAGTHRESH);
if(!x678.valid){
continue;
}
IkReal x677=((-1.0)*(x678.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x677;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst26=x677;
IkReal gconst27=((-1.0)*new_r00);
IkReal gconst28=x676;
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs(new_r10*new_r10))+(IKabs((new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x679=((-1.0)*new_r10);
CheckValue<IkReal> x681 = IKatan2WithCheck(IkReal(new_r00),IkReal(x679),IKFAST_ATAN2_MAGTHRESH);
if(!x681.valid){
continue;
}
IkReal x680=((-1.0)*(x681.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x680;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst26=x680;
IkReal gconst27=((-1.0)*new_r00);
IkReal gconst28=x679;
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(((-1.0)+(new_r10*new_r10))))+(IKabs((new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x682=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst27*gconst27)))+(((-1.0)*(gconst28*gconst28))))),-1);
if(!x682.valid){
continue;
}
CheckValue<IkReal> x683 = IKatan2WithCheck(IkReal((gconst28*new_r00)),IkReal((gconst27*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x683.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x682.value)))+(x683.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x684=IKcos(j7);
IkReal x685=IKsin(j7);
IkReal x686=(gconst27*x684);
IkReal x687=(gconst28*x685);
IkReal x688=(gconst28*x684);
IkReal x689=(gconst27*x685);
IkReal x690=(x687+x686);
evalcond[0]=x690;
evalcond[1]=(gconst27+((new_r00*x684))+((new_r10*x685)));
evalcond[2]=(x690+new_r00);
evalcond[3]=(x688+(((-1.0)*x689)));
evalcond[4]=((((-1.0)*new_r10*x684))+gconst28+((new_r00*x685)));
evalcond[5]=(x689+new_r10+(((-1.0)*x688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x691 = IKatan2WithCheck(IkReal((gconst27*gconst28)),IkReal(((-1.0)*(gconst28*gconst28))),IKFAST_ATAN2_MAGTHRESH);
if(!x691.valid){
continue;
}
CheckValue<IkReal> x692=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*new_r10))+(((-1.0)*gconst27*new_r00)))),-1);
if(!x692.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x691.value)+(((1.5707963267949)*(x692.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x693=IKcos(j7);
IkReal x694=IKsin(j7);
IkReal x695=(gconst27*x693);
IkReal x696=(gconst28*x694);
IkReal x697=(gconst28*x693);
IkReal x698=(gconst27*x694);
IkReal x699=(x695+x696);
evalcond[0]=x699;
evalcond[1]=(gconst27+((new_r10*x694))+((new_r00*x693)));
evalcond[2]=(x699+new_r00);
evalcond[3]=(x697+(((-1.0)*x698)));
evalcond[4]=(gconst28+((new_r00*x694))+(((-1.0)*new_r10*x693)));
evalcond[5]=(x698+new_r10+(((-1.0)*x697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x700 = IKatan2WithCheck(IkReal((gconst27*gconst28)),IkReal(gconst27*gconst27),IKFAST_ATAN2_MAGTHRESH);
if(!x700.valid){
continue;
}
CheckValue<IkReal> x701=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*new_r10))+(((-1.0)*gconst27*new_r00)))),-1);
if(!x701.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x700.value)+(((1.5707963267949)*(x701.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x702=IKcos(j7);
IkReal x703=IKsin(j7);
IkReal x704=(gconst27*x702);
IkReal x705=(gconst28*x703);
IkReal x706=(gconst28*x702);
IkReal x707=(gconst27*x703);
IkReal x708=(x704+x705);
evalcond[0]=x708;
evalcond[1]=(((new_r00*x702))+gconst27+((new_r10*x703)));
evalcond[2]=(x708+new_r00);
evalcond[3]=((((-1.0)*x707))+x706);
evalcond[4]=(((new_r00*x703))+gconst28+(((-1.0)*new_r10*x702)));
evalcond[5]=((((-1.0)*x706))+x707+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
IkReal x709=((-1.0)*(x710.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x709;
new_r01=0;
new_r10=0;
IkReal gconst26=x709;
IkReal x711 = new_r00*new_r00;
if(IKabs(x711)==0){
continue;
}
IkReal gconst27=((-1.0)*new_r00*(pow(x711,-0.5)));
IkReal gconst28=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x713 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x713.valid){
continue;
}
IkReal x712=((-1.0)*(x713.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x712;
new_r01=0;
new_r10=0;
IkReal gconst26=x712;
IkReal x714 = new_r00*new_r00;
if(IKabs(x714)==0){
continue;
}
IkReal gconst27=((-1.0)*new_r00*(pow(x714,-0.5)));
IkReal gconst28=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x715=IKPowWithIntegerCheck(gconst27,-1);
if(!x715.valid){
continue;
}
cj7array[0]=((-1.0)*new_r00*(x715.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x716=IKsin(j7);
IkReal x717=IKcos(j7);
evalcond[0]=(new_r00*x716);
evalcond[1]=(new_r11*x716);
evalcond[2]=((-1.0)*gconst27*x716);
evalcond[3]=(gconst27+((new_r11*x717)));
evalcond[4]=(((new_r00*x717))+gconst27);
evalcond[5]=(((gconst27*x717))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x718=IKPowWithIntegerCheck(new_r00,-1);
if(!x718.valid){
continue;
}
cj7array[0]=((-1.0)*gconst27*(x718.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x719=IKsin(j7);
IkReal x720=IKcos(j7);
IkReal x721=(gconst27*x720);
evalcond[0]=(new_r00*x719);
evalcond[1]=(new_r11*x719);
evalcond[2]=((-1.0)*gconst27*x719);
evalcond[3]=(gconst27+((new_r11*x720)));
evalcond[4]=(x721+new_r00);
evalcond[5]=(x721+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x722=IKPowWithIntegerCheck(new_r11,-1);
if(!x722.valid){
continue;
}
cj7array[0]=((-1.0)*gconst27*(x722.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x723=IKsin(j7);
IkReal x724=IKcos(j7);
IkReal x725=(gconst27*x724);
evalcond[0]=(new_r00*x723);
evalcond[1]=(new_r11*x723);
evalcond[2]=((-1.0)*gconst27*x723);
evalcond[3]=(((new_r00*x724))+gconst27);
evalcond[4]=(x725+new_r00);
evalcond[5]=(x725+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x726=((-1.0)*new_r10);
CheckValue<IkReal> x728 = IKatan2WithCheck(IkReal(0),IkReal(x726),IKFAST_ATAN2_MAGTHRESH);
if(!x728.valid){
continue;
}
IkReal x727=((-1.0)*(x728.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x727;
new_r00=0;
IkReal gconst26=x727;
IkReal gconst27=0;
IkReal x729 = new_r10*new_r10;
if(IKabs(x729)==0){
continue;
}
IkReal gconst28=(x726*(pow(x729,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x730=((-1.0)*new_r10);
CheckValue<IkReal> x732 = IKatan2WithCheck(IkReal(0),IkReal(x730),IKFAST_ATAN2_MAGTHRESH);
if(!x732.valid){
continue;
}
IkReal x731=((-1.0)*(x732.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x731;
new_r00=0;
IkReal gconst26=x731;
IkReal gconst27=0;
IkReal x733 = new_r10*new_r10;
if(IKabs(x733)==0){
continue;
}
IkReal gconst28=(x730*(pow(x733,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x734=((-1.0)*new_r10);
CheckValue<IkReal> x736 = IKatan2WithCheck(IkReal(0),IkReal(x734),IKFAST_ATAN2_MAGTHRESH);
if(!x736.valid){
continue;
}
IkReal x735=((-1.0)*(x736.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x735;
new_r00=0;
IkReal gconst26=x735;
IkReal gconst27=0;
IkReal x737 = new_r10*new_r10;
if(IKabs(x737)==0){
continue;
}
IkReal gconst28=(x734*(pow(x737,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x738=IKPowWithIntegerCheck(gconst28,-1);
if(!x738.valid){
continue;
}
CheckValue<IkReal> x739=IKPowWithIntegerCheck(new_r10,-1);
if(!x739.valid){
continue;
}
if( IKabs(((-1.0)*new_r11*(x738.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst28*(x739.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x738.value)))+IKsqr((gconst28*(x739.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r11*(x738.value)), (gconst28*(x739.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x740=IKsin(j7);
IkReal x741=IKcos(j7);
IkReal x742=(gconst28*x740);
IkReal x743=(gconst28*x741);
evalcond[0]=(new_r10*x740);
evalcond[1]=x742;
evalcond[2]=(x742+new_r11);
evalcond[3]=(x743+new_r01);
evalcond[4]=((((-1.0)*new_r10*x741))+gconst28);
evalcond[5]=((((-1.0)*x743))+new_r10);
evalcond[6]=(((new_r11*x741))+(((-1.0)*new_r01*x740)));
evalcond[7]=(gconst28+((new_r01*x741))+((new_r11*x740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x744 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x744.valid){
continue;
}
CheckValue<IkReal> x745=IKPowWithIntegerCheck(IKsign(gconst28),-1);
if(!x745.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x744.value)+(((1.5707963267949)*(x745.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x746=IKsin(j7);
IkReal x747=IKcos(j7);
IkReal x748=(gconst28*x746);
IkReal x749=(gconst28*x747);
evalcond[0]=(new_r10*x746);
evalcond[1]=x748;
evalcond[2]=(x748+new_r11);
evalcond[3]=(x749+new_r01);
evalcond[4]=((((-1.0)*new_r10*x747))+gconst28);
evalcond[5]=((((-1.0)*x749))+new_r10);
evalcond[6]=(((new_r11*x747))+(((-1.0)*new_r01*x746)));
evalcond[7]=(gconst28+((new_r01*x747))+((new_r11*x746)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x750 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x750.valid){
continue;
}
CheckValue<IkReal> x751=IKPowWithIntegerCheck(IKsign(gconst28),-1);
if(!x751.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x750.value)+(((1.5707963267949)*(x751.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x752=IKsin(j7);
IkReal x753=IKcos(j7);
IkReal x754=(gconst28*x752);
IkReal x755=(gconst28*x753);
evalcond[0]=(new_r10*x752);
evalcond[1]=x754;
evalcond[2]=(x754+new_r11);
evalcond[3]=(x755+new_r01);
evalcond[4]=(gconst28+(((-1.0)*new_r10*x753)));
evalcond[5]=((((-1.0)*x755))+new_r10);
evalcond[6]=(((new_r11*x753))+(((-1.0)*new_r01*x752)));
evalcond[7]=(gconst28+((new_r11*x752))+((new_r01*x753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x757 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x757.valid){
continue;
}
IkReal x756=((-1.0)*(x757.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x756;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst26=x756;
IkReal x758 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x758)==0){
continue;
}
IkReal gconst27=((-1.0)*new_r00*(pow(x758,-0.5)));
IkReal gconst28=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x760 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x760.valid){
continue;
}
IkReal x759=((-1.0)*(x760.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x759;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst26=x759;
IkReal x761 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x761)==0){
continue;
}
IkReal gconst27=((-1.0)*new_r00*(pow(x761,-0.5)));
IkReal gconst28=0;
j7eval[0]=new_r01;
j7eval[1]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x763 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x763.valid){
continue;
}
IkReal x762=((-1.0)*(x763.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x762;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst26=x762;
IkReal x764 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x764)==0){
continue;
}
IkReal gconst27=((-1.0)*new_r00*(pow(x764,-0.5)));
IkReal gconst28=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x765=IKPowWithIntegerCheck(gconst27,-1);
if(!x765.valid){
continue;
}
CheckValue<IkReal> x766=IKPowWithIntegerCheck(new_r00,-1);
if(!x766.valid){
continue;
}
if( IKabs((new_r01*(x765.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst27*(x766.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01*(x765.value)))+IKsqr(((-1.0)*gconst27*(x766.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r01*(x765.value)), ((-1.0)*gconst27*(x766.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x767=IKcos(j7);
IkReal x768=IKsin(j7);
IkReal x769=(gconst27*x767);
IkReal x770=((1.0)*x768);
evalcond[0]=(new_r00*x768);
evalcond[1]=(new_r01*x767);
evalcond[2]=x769;
evalcond[3]=(gconst27*x768);
evalcond[4]=(gconst27+((new_r00*x767)));
evalcond[5]=(x769+new_r00);
evalcond[6]=((((-1.0)*new_r01*x770))+gconst27);
evalcond[7]=((((-1.0)*gconst27*x770))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x771=IKPowWithIntegerCheck(new_r01,-1);
if(!x771.valid){
continue;
}
CheckValue<IkReal> x772=IKPowWithIntegerCheck(new_r00,-1);
if(!x772.valid){
continue;
}
if( IKabs((gconst27*(x771.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst27*(x772.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst27*(x771.value)))+IKsqr(((-1.0)*gconst27*(x772.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst27*(x771.value)), ((-1.0)*gconst27*(x772.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x773=IKcos(j7);
IkReal x774=IKsin(j7);
IkReal x775=(gconst27*x773);
IkReal x776=((1.0)*x774);
evalcond[0]=(new_r00*x774);
evalcond[1]=(new_r01*x773);
evalcond[2]=x775;
evalcond[3]=(gconst27*x774);
evalcond[4]=(gconst27+((new_r00*x773)));
evalcond[5]=(x775+new_r00);
evalcond[6]=((((-1.0)*new_r01*x776))+gconst27);
evalcond[7]=((((-1.0)*gconst27*x776))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x777=IKPowWithIntegerCheck(IKsign(gconst27),-1);
if(!x777.valid){
continue;
}
CheckValue<IkReal> x778 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x778.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x777.value)))+(x778.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x779=IKcos(j7);
IkReal x780=IKsin(j7);
IkReal x781=(gconst27*x779);
IkReal x782=((1.0)*x780);
evalcond[0]=(new_r00*x780);
evalcond[1]=(new_r01*x779);
evalcond[2]=x781;
evalcond[3]=(gconst27*x780);
evalcond[4]=(gconst27+((new_r00*x779)));
evalcond[5]=(x781+new_r00);
evalcond[6]=((((-1.0)*new_r01*x782))+gconst27);
evalcond[7]=((((-1.0)*gconst27*x782))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x783=((1.0)*gconst27);
CheckValue<IkReal> x784 = IKatan2WithCheck(IkReal((((gconst27*new_r00))+(((-1.0)*new_r11*x783)))),IkReal(((((-1.0)*new_r01*x783))+(((-1.0)*new_r10*x783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x784.valid){
continue;
}
CheckValue<IkReal> x785=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x785.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x784.value)+(((1.5707963267949)*(x785.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x786=IKcos(j7);
IkReal x787=IKsin(j7);
IkReal x788=(gconst27*x786);
IkReal x789=(gconst28*x787);
IkReal x790=(gconst28*x786);
IkReal x791=((1.0)*x787);
IkReal x792=(x788+x789);
evalcond[0]=(((new_r10*x787))+gconst27+((new_r00*x786)));
evalcond[1]=(((new_r11*x787))+gconst28+((new_r01*x786)));
evalcond[2]=(x792+new_r00);
evalcond[3]=(x792+new_r11);
evalcond[4]=((((-1.0)*new_r01*x791))+((new_r11*x786))+gconst27);
evalcond[5]=(gconst28+((new_r00*x787))+(((-1.0)*new_r10*x786)));
evalcond[6]=((((-1.0)*gconst27*x791))+x790+new_r01);
evalcond[7]=(((gconst27*x787))+(((-1.0)*x790))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x793=((1.0)*gconst28);
CheckValue<IkReal> x794=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r01*x793))+((gconst27*new_r11)))),-1);
if(!x794.valid){
continue;
}
CheckValue<IkReal> x795 = IKatan2WithCheck(IkReal((((new_r00*new_r01))+(((-1.0)*gconst27*x793)))),IkReal(((gconst28*gconst28)+(((-1.0)*new_r00*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x795.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x794.value)))+(x795.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x796=IKcos(j7);
IkReal x797=IKsin(j7);
IkReal x798=(gconst27*x796);
IkReal x799=(gconst28*x797);
IkReal x800=(gconst28*x796);
IkReal x801=((1.0)*x797);
IkReal x802=(x799+x798);
evalcond[0]=(((new_r10*x797))+gconst27+((new_r00*x796)));
evalcond[1]=(((new_r11*x797))+gconst28+((new_r01*x796)));
evalcond[2]=(new_r00+x802);
evalcond[3]=(new_r11+x802);
evalcond[4]=((((-1.0)*new_r01*x801))+((new_r11*x796))+gconst27);
evalcond[5]=(gconst28+((new_r00*x797))+(((-1.0)*new_r10*x796)));
evalcond[6]=((((-1.0)*gconst27*x801))+new_r01+x800);
evalcond[7]=((((-1.0)*x800))+((gconst27*x797))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x803=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x803.valid){
continue;
}
CheckValue<IkReal> x804 = IKatan2WithCheck(IkReal((((gconst27*new_r01))+(((-1.0)*gconst28*new_r00)))),IkReal((((gconst28*new_r10))+(((-1.0)*gconst27*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x804.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x803.value)))+(x804.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x805=IKcos(j7);
IkReal x806=IKsin(j7);
IkReal x807=(gconst27*x805);
IkReal x808=(gconst28*x806);
IkReal x809=(gconst28*x805);
IkReal x810=((1.0)*x806);
IkReal x811=(x808+x807);
evalcond[0]=(gconst27+((new_r00*x805))+((new_r10*x806)));
evalcond[1]=(gconst28+((new_r11*x806))+((new_r01*x805)));
evalcond[2]=(new_r00+x811);
evalcond[3]=(new_r11+x811);
evalcond[4]=(gconst27+(((-1.0)*new_r01*x810))+((new_r11*x805)));
evalcond[5]=(gconst28+((new_r00*x806))+(((-1.0)*new_r10*x805)));
evalcond[6]=((((-1.0)*gconst27*x810))+new_r01+x809);
evalcond[7]=((((-1.0)*x809))+new_r10+((gconst27*x806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x814 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x814)==0){
continue;
}
IkReal x812=pow(x814,-0.5);
IkReal x813=((1.0)*x812);
CheckValue<IkReal> x815 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x815.valid){
continue;
}
IkReal gconst29=((3.14159265358979)+(((-1.0)*(x815.value))));
IkReal gconst30=(new_r00*x813);
IkReal gconst31=(new_r10*x813);
CheckValue<IkReal> x816 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x816.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x816.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x820 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x820.valid){
continue;
}
IkReal x817=((1.0)*(x820.value));
IkReal x818=x812;
IkReal x819=((1.0)*x818);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x817)));
IkReal gconst29=((3.14159265358979)+(((-1.0)*x817)));
IkReal gconst30=(new_r00*x819);
IkReal gconst31=(new_r10*x819);
IkReal x821=new_r10*new_r10;
IkReal x822=((1.0)*new_r10);
IkReal x823=(new_r00*new_r11);
IkReal x824=((((-1.0)*new_r01*x822))+x823);
IkReal x825=x812;
IkReal x826=(new_r00*x825);
j7eval[0]=x824;
j7eval[1]=((IKabs((((x821*x825))+(((-1.0)*x823*x825)))))+(IKabs(((((-1.0)*x822*x826))+((new_r01*x826))))));
j7eval[2]=IKsign(x824);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x830 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x830.valid){
continue;
}
IkReal x827=((1.0)*(x830.value));
IkReal x828=x812;
IkReal x829=((1.0)*x828);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x827)));
IkReal gconst29=((3.14159265358979)+(((-1.0)*x827)));
IkReal gconst30=(new_r00*x829);
IkReal gconst31=(new_r10*x829);
IkReal x831=new_r10*new_r10;
IkReal x832=new_r00*new_r00*new_r00;
CheckValue<IkReal> x836=IKPowWithIntegerCheck((x831+(new_r00*new_r00)),-1);
if(!x836.valid){
continue;
}
IkReal x833=x836.value;
IkReal x834=((1.0)*x833);
IkReal x835=(x831*x833);
j7eval[0]=((IKabs((((new_r01*x832*x833))+((new_r00*new_r01*x835))+(((-1.0)*new_r00*new_r10*x834)))))+(IKabs(((((-1.0)*new_r11*x832*x834))+x835+(((-1.0)*new_r00*new_r11*x831*x834))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x840 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x840.valid){
continue;
}
IkReal x837=((1.0)*(x840.value));
IkReal x838=x812;
IkReal x839=((1.0)*x838);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x837)));
IkReal gconst29=((3.14159265358979)+(((-1.0)*x837)));
IkReal gconst30=(new_r00*x839);
IkReal gconst31=(new_r10*x839);
IkReal x841=new_r00*new_r00;
IkReal x842=(new_r00*new_r01);
IkReal x843=(((new_r10*new_r11))+x842);
IkReal x844=x812;
IkReal x845=((1.0)*x844);
j7eval[0]=x843;
j7eval[1]=((IKabs(((((-1.0)*x842*x845))+(((-1.0)*new_r00*new_r10*x845)))))+(IKabs(((((-1.0)*new_r00*new_r11*x845))+((x841*x844))))));
j7eval[2]=IKsign(x843);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x847 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x847.valid){
continue;
}
IkReal x846=((1.0)*(x847.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x846)));
new_r11=0;
new_r00=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x846)));
IkReal gconst30=0;
IkReal x848 = new_r10*new_r10;
if(IKabs(x848)==0){
continue;
}
IkReal gconst31=((1.0)*new_r10*(pow(x848,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x849=IKPowWithIntegerCheck(gconst31,-1);
if(!x849.valid){
continue;
}
cj7array[0]=(new_r10*(x849.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x850=IKsin(j7);
IkReal x851=IKcos(j7);
evalcond[0]=(new_r10*x850);
evalcond[1]=(gconst31*x850);
evalcond[2]=((-1.0)*new_r01*x850);
evalcond[3]=(gconst31+((new_r01*x851)));
evalcond[4]=(new_r01+((gconst31*x851)));
evalcond[5]=(gconst31+(((-1.0)*new_r10*x851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x852=IKPowWithIntegerCheck(new_r10,-1);
if(!x852.valid){
continue;
}
cj7array[0]=(gconst31*(x852.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x853=IKsin(j7);
IkReal x854=IKcos(j7);
IkReal x855=(gconst31*x854);
evalcond[0]=(new_r10*x853);
evalcond[1]=(gconst31*x853);
evalcond[2]=((-1.0)*new_r01*x853);
evalcond[3]=(gconst31+((new_r01*x854)));
evalcond[4]=(new_r01+x855);
evalcond[5]=((((-1.0)*x855))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst30;
evalcond[2]=gconst31;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x857 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x857.valid){
continue;
}
IkReal x856=((1.0)*(x857.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x856)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x856)));
IkReal gconst30=((1.0)*new_r00);
IkReal gconst31=((1.0)*new_r10);
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[4];
CheckValue<IkReal> x859 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x859.valid){
continue;
}
IkReal x858=((1.0)*(x859.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x858)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x858)));
IkReal gconst30=((1.0)*new_r00);
IkReal gconst31=((1.0)*new_r10);
j7eval[0]=-1.0;
j7eval[1]=new_r10;
j7eval[2]=1.0;
j7eval[3]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x861 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x861.valid){
continue;
}
IkReal x860=((1.0)*(x861.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x860)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x860)));
IkReal gconst30=((1.0)*new_r00);
IkReal gconst31=((1.0)*new_r10);
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x862=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst31*gconst31)))+(((-1.0)*(gconst30*gconst30))))),-1);
if(!x862.valid){
continue;
}
CheckValue<IkReal> x863 = IKatan2WithCheck(IkReal((gconst31*new_r00)),IkReal((gconst30*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x863.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x862.value)))+(x863.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x864=IKcos(j7);
IkReal x865=IKsin(j7);
IkReal x866=(gconst31*x865);
IkReal x867=(gconst30*x864);
IkReal x868=(gconst31*x864);
IkReal x869=(gconst30*x865);
IkReal x870=(x867+x866);
evalcond[0]=x870;
evalcond[1]=(((new_r00*x864))+gconst30+((new_r10*x865)));
evalcond[2]=(new_r00+x870);
evalcond[3]=((((-1.0)*x869))+x868);
evalcond[4]=(((new_r00*x865))+(((-1.0)*new_r10*x864))+gconst31);
evalcond[5]=((((-1.0)*x868))+new_r10+x869);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x871 = IKatan2WithCheck(IkReal((gconst30*gconst31)),IkReal(((-1.0)*(gconst31*gconst31))),IKFAST_ATAN2_MAGTHRESH);
if(!x871.valid){
continue;
}
CheckValue<IkReal> x872=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*new_r10))+(((-1.0)*gconst30*new_r00)))),-1);
if(!x872.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x871.value)+(((1.5707963267949)*(x872.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x873=IKcos(j7);
IkReal x874=IKsin(j7);
IkReal x875=(gconst31*x874);
IkReal x876=(gconst30*x873);
IkReal x877=(gconst31*x873);
IkReal x878=(gconst30*x874);
IkReal x879=(x875+x876);
evalcond[0]=x879;
evalcond[1]=(((new_r00*x873))+gconst30+((new_r10*x874)));
evalcond[2]=(new_r00+x879);
evalcond[3]=((((-1.0)*x878))+x877);
evalcond[4]=(((new_r00*x874))+gconst31+(((-1.0)*new_r10*x873)));
evalcond[5]=((((-1.0)*x877))+new_r10+x878);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x880 = IKatan2WithCheck(IkReal((gconst30*gconst31)),IkReal(gconst30*gconst30),IKFAST_ATAN2_MAGTHRESH);
if(!x880.valid){
continue;
}
CheckValue<IkReal> x881=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*new_r10))+(((-1.0)*gconst30*new_r00)))),-1);
if(!x881.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x880.value)+(((1.5707963267949)*(x881.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x882=IKcos(j7);
IkReal x883=IKsin(j7);
IkReal x884=(gconst31*x883);
IkReal x885=(gconst30*x882);
IkReal x886=(gconst31*x882);
IkReal x887=(gconst30*x883);
IkReal x888=(x885+x884);
evalcond[0]=x888;
evalcond[1]=(((new_r10*x883))+((new_r00*x882))+gconst30);
evalcond[2]=(new_r00+x888);
evalcond[3]=((((-1.0)*x887))+x886);
evalcond[4]=((((-1.0)*new_r10*x882))+((new_r00*x883))+gconst31);
evalcond[5]=((((-1.0)*x886))+new_r10+x887);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x890 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x890.valid){
continue;
}
IkReal x889=((1.0)*(x890.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x889)));
new_r01=0;
new_r10=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x889)));
IkReal x891 = new_r00*new_r00;
if(IKabs(x891)==0){
continue;
}
IkReal gconst30=((1.0)*new_r00*(pow(x891,-0.5)));
IkReal gconst31=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x893 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x893.valid){
continue;
}
IkReal x892=((1.0)*(x893.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x892)));
new_r01=0;
new_r10=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x892)));
IkReal x894 = new_r00*new_r00;
if(IKabs(x894)==0){
continue;
}
IkReal gconst30=((1.0)*new_r00*(pow(x894,-0.5)));
IkReal gconst31=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x895=IKPowWithIntegerCheck(gconst30,-1);
if(!x895.valid){
continue;
}
cj7array[0]=((-1.0)*new_r00*(x895.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x896=IKsin(j7);
IkReal x897=IKcos(j7);
evalcond[0]=(new_r00*x896);
evalcond[1]=(new_r11*x896);
evalcond[2]=((-1.0)*gconst30*x896);
evalcond[3]=(((new_r11*x897))+gconst30);
evalcond[4]=(((new_r00*x897))+gconst30);
evalcond[5]=(((gconst30*x897))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x898=IKPowWithIntegerCheck(new_r00,-1);
if(!x898.valid){
continue;
}
cj7array[0]=((-1.0)*gconst30*(x898.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x899=IKsin(j7);
IkReal x900=IKcos(j7);
IkReal x901=(gconst30*x900);
evalcond[0]=(new_r00*x899);
evalcond[1]=(new_r11*x899);
evalcond[2]=((-1.0)*gconst30*x899);
evalcond[3]=(gconst30+((new_r11*x900)));
evalcond[4]=(new_r00+x901);
evalcond[5]=(new_r11+x901);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x902=IKPowWithIntegerCheck(new_r11,-1);
if(!x902.valid){
continue;
}
cj7array[0]=((-1.0)*gconst30*(x902.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x903=IKsin(j7);
IkReal x904=IKcos(j7);
IkReal x905=(gconst30*x904);
evalcond[0]=(new_r00*x903);
evalcond[1]=(new_r11*x903);
evalcond[2]=((-1.0)*gconst30*x903);
evalcond[3]=(gconst30+((new_r00*x904)));
evalcond[4]=(new_r00+x905);
evalcond[5]=(new_r11+x905);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x907 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x907.valid){
continue;
}
IkReal x906=((1.0)*(x907.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x906)));
new_r00=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x906)));
IkReal gconst30=0;
IkReal x908 = new_r10*new_r10;
if(IKabs(x908)==0){
continue;
}
IkReal gconst31=((1.0)*new_r10*(pow(x908,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x910 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x910.valid){
continue;
}
IkReal x909=((1.0)*(x910.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x909)));
new_r00=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x909)));
IkReal gconst30=0;
IkReal x911 = new_r10*new_r10;
if(IKabs(x911)==0){
continue;
}
IkReal gconst31=((1.0)*new_r10*(pow(x911,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x913 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x913.valid){
continue;
}
IkReal x912=((1.0)*(x913.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x912)));
new_r00=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x912)));
IkReal gconst30=0;
IkReal x914 = new_r10*new_r10;
if(IKabs(x914)==0){
continue;
}
IkReal gconst31=((1.0)*new_r10*(pow(x914,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x915=IKPowWithIntegerCheck(gconst31,-1);
if(!x915.valid){
continue;
}
CheckValue<IkReal> x916=IKPowWithIntegerCheck(new_r10,-1);
if(!x916.valid){
continue;
}
if( IKabs(((-1.0)*new_r11*(x915.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst31*(x916.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x915.value)))+IKsqr((gconst31*(x916.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r11*(x915.value)), (gconst31*(x916.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x917=IKsin(j7);
IkReal x918=IKcos(j7);
IkReal x919=(gconst31*x917);
IkReal x920=(gconst31*x918);
evalcond[0]=(new_r10*x917);
evalcond[1]=x919;
evalcond[2]=(new_r11+x919);
evalcond[3]=(new_r01+x920);
evalcond[4]=(gconst31+(((-1.0)*new_r10*x918)));
evalcond[5]=((((-1.0)*x920))+new_r10);
evalcond[6]=(((new_r11*x918))+(((-1.0)*new_r01*x917)));
evalcond[7]=(gconst31+((new_r11*x917))+((new_r01*x918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x921=IKPowWithIntegerCheck(IKsign(gconst31),-1);
if(!x921.valid){
continue;
}
CheckValue<IkReal> x922 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x922.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x921.value)))+(x922.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x923=IKsin(j7);
IkReal x924=IKcos(j7);
IkReal x925=(gconst31*x923);
IkReal x926=(gconst31*x924);
evalcond[0]=(new_r10*x923);
evalcond[1]=x925;
evalcond[2]=(new_r11+x925);
evalcond[3]=(new_r01+x926);
evalcond[4]=(gconst31+(((-1.0)*new_r10*x924)));
evalcond[5]=((((-1.0)*x926))+new_r10);
evalcond[6]=((((-1.0)*new_r01*x923))+((new_r11*x924)));
evalcond[7]=(gconst31+((new_r01*x924))+((new_r11*x923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x927=IKPowWithIntegerCheck(IKsign(gconst31),-1);
if(!x927.valid){
continue;
}
CheckValue<IkReal> x928 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x928.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x927.value)))+(x928.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x929=IKsin(j7);
IkReal x930=IKcos(j7);
IkReal x931=(gconst31*x929);
IkReal x932=(gconst31*x930);
evalcond[0]=(new_r10*x929);
evalcond[1]=x931;
evalcond[2]=(new_r11+x931);
evalcond[3]=(new_r01+x932);
evalcond[4]=(gconst31+(((-1.0)*new_r10*x930)));
evalcond[5]=((((-1.0)*x932))+new_r10);
evalcond[6]=((((-1.0)*new_r01*x929))+((new_r11*x930)));
evalcond[7]=(gconst31+((new_r01*x930))+((new_r11*x929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x934 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x934.valid){
continue;
}
IkReal x933=((1.0)*(x934.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x933)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x933)));
IkReal x935 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x935)==0){
continue;
}
IkReal gconst30=((1.0)*new_r00*(pow(x935,-0.5)));
IkReal gconst31=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x937 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x937.valid){
continue;
}
IkReal x936=((1.0)*(x937.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x936)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x936)));
IkReal x938 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x938)==0){
continue;
}
IkReal gconst30=((1.0)*new_r00*(pow(x938,-0.5)));
IkReal gconst31=0;
j7eval[0]=new_r01;
j7eval[1]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x940 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x940.valid){
continue;
}
IkReal x939=((1.0)*(x940.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x939)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x939)));
IkReal x941 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x941)==0){
continue;
}
IkReal gconst30=((1.0)*new_r00*(pow(x941,-0.5)));
IkReal gconst31=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x942=IKPowWithIntegerCheck(gconst30,-1);
if(!x942.valid){
continue;
}
CheckValue<IkReal> x943=IKPowWithIntegerCheck(new_r00,-1);
if(!x943.valid){
continue;
}
if( IKabs((new_r01*(x942.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst30*(x943.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01*(x942.value)))+IKsqr(((-1.0)*gconst30*(x943.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r01*(x942.value)), ((-1.0)*gconst30*(x943.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x944=IKcos(j7);
IkReal x945=IKsin(j7);
IkReal x946=(gconst30*x944);
IkReal x947=((1.0)*x945);
evalcond[0]=(new_r00*x945);
evalcond[1]=(new_r01*x944);
evalcond[2]=x946;
evalcond[3]=(gconst30*x945);
evalcond[4]=(((new_r00*x944))+gconst30);
evalcond[5]=(new_r00+x946);
evalcond[6]=(gconst30+(((-1.0)*new_r01*x947)));
evalcond[7]=(new_r01+(((-1.0)*gconst30*x947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x948=IKPowWithIntegerCheck(new_r01,-1);
if(!x948.valid){
continue;
}
CheckValue<IkReal> x949=IKPowWithIntegerCheck(new_r00,-1);
if(!x949.valid){
continue;
}
if( IKabs((gconst30*(x948.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst30*(x949.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst30*(x948.value)))+IKsqr(((-1.0)*gconst30*(x949.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst30*(x948.value)), ((-1.0)*gconst30*(x949.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x950=IKcos(j7);
IkReal x951=IKsin(j7);
IkReal x952=(gconst30*x950);
IkReal x953=((1.0)*x951);
evalcond[0]=(new_r00*x951);
evalcond[1]=(new_r01*x950);
evalcond[2]=x952;
evalcond[3]=(gconst30*x951);
evalcond[4]=(((new_r00*x950))+gconst30);
evalcond[5]=(new_r00+x952);
evalcond[6]=(gconst30+(((-1.0)*new_r01*x953)));
evalcond[7]=((((-1.0)*gconst30*x953))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x954=IKPowWithIntegerCheck(IKsign(gconst30),-1);
if(!x954.valid){
continue;
}
CheckValue<IkReal> x955 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x955.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x954.value)))+(x955.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x956=IKcos(j7);
IkReal x957=IKsin(j7);
IkReal x958=(gconst30*x956);
IkReal x959=((1.0)*x957);
evalcond[0]=(new_r00*x957);
evalcond[1]=(new_r01*x956);
evalcond[2]=x958;
evalcond[3]=(gconst30*x957);
evalcond[4]=(((new_r00*x956))+gconst30);
evalcond[5]=(new_r00+x958);
evalcond[6]=(gconst30+(((-1.0)*new_r01*x959)));
evalcond[7]=((((-1.0)*gconst30*x959))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x960=((1.0)*gconst30);
CheckValue<IkReal> x961 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x960))+((gconst30*new_r00)))),IkReal(((((-1.0)*new_r01*x960))+(((-1.0)*new_r10*x960)))),IKFAST_ATAN2_MAGTHRESH);
if(!x961.valid){
continue;
}
CheckValue<IkReal> x962=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x962.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x961.value)+(((1.5707963267949)*(x962.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x963=IKcos(j7);
IkReal x964=IKsin(j7);
IkReal x965=(gconst31*x964);
IkReal x966=(gconst30*x963);
IkReal x967=((1.0)*x964);
IkReal x968=(gconst31*x963);
IkReal x969=(x966+x965);
evalcond[0]=(((new_r00*x963))+gconst30+((new_r10*x964)));
evalcond[1]=(((new_r11*x964))+((new_r01*x963))+gconst31);
evalcond[2]=(new_r00+x969);
evalcond[3]=(new_r11+x969);
evalcond[4]=(((new_r11*x963))+gconst30+(((-1.0)*new_r01*x967)));
evalcond[5]=(((new_r00*x964))+gconst31+(((-1.0)*new_r10*x963)));
evalcond[6]=((((-1.0)*gconst30*x967))+new_r01+x968);
evalcond[7]=(((gconst30*x964))+(((-1.0)*x968))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x970=((1.0)*gconst31);
CheckValue<IkReal> x971=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r01*x970))+((gconst30*new_r11)))),-1);
if(!x971.valid){
continue;
}
CheckValue<IkReal> x972 = IKatan2WithCheck(IkReal(((((-1.0)*gconst30*x970))+((new_r00*new_r01)))),IkReal(((gconst31*gconst31)+(((-1.0)*new_r00*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x972.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x971.value)))+(x972.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x973=IKcos(j7);
IkReal x974=IKsin(j7);
IkReal x975=(gconst31*x974);
IkReal x976=(gconst30*x973);
IkReal x977=((1.0)*x974);
IkReal x978=(gconst31*x973);
IkReal x979=(x975+x976);
evalcond[0]=(gconst30+((new_r10*x974))+((new_r00*x973)));
evalcond[1]=(((new_r01*x973))+gconst31+((new_r11*x974)));
evalcond[2]=(new_r00+x979);
evalcond[3]=(new_r11+x979);
evalcond[4]=(gconst30+(((-1.0)*new_r01*x977))+((new_r11*x973)));
evalcond[5]=(gconst31+(((-1.0)*new_r10*x973))+((new_r00*x974)));
evalcond[6]=((((-1.0)*gconst30*x977))+new_r01+x978);
evalcond[7]=((((-1.0)*x978))+((gconst30*x974))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x980=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x980.valid){
continue;
}
CheckValue<IkReal> x981 = IKatan2WithCheck(IkReal(((((-1.0)*gconst31*new_r00))+((gconst30*new_r01)))),IkReal(((((-1.0)*gconst30*new_r11))+((gconst31*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x981.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x980.value)))+(x981.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x982=IKcos(j7);
IkReal x983=IKsin(j7);
IkReal x984=(gconst31*x983);
IkReal x985=(gconst30*x982);
IkReal x986=((1.0)*x983);
IkReal x987=(gconst31*x982);
IkReal x988=(x984+x985);
evalcond[0]=(((new_r00*x982))+gconst30+((new_r10*x983)));
evalcond[1]=(gconst31+((new_r11*x983))+((new_r01*x982)));
evalcond[2]=(new_r00+x988);
evalcond[3]=(new_r11+x988);
evalcond[4]=(gconst30+(((-1.0)*new_r01*x986))+((new_r11*x982)));
evalcond[5]=(((new_r00*x983))+gconst31+(((-1.0)*new_r10*x982)));
evalcond[6]=((((-1.0)*gconst30*x986))+new_r01+x987);
evalcond[7]=((((-1.0)*x987))+((gconst30*x983))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x989=((-1.0)*new_r11);
IkReal x991 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x991)==0){
continue;
}
IkReal x990=pow(x991,-0.5);
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal(new_r01),IkReal(x989),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
IkReal gconst32=((-1.0)*(x992.value));
IkReal gconst33=((-1.0)*new_r01*x990);
IkReal gconst34=(x989*x990);
CheckValue<IkReal> x993 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x993.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x993.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x994=((-1.0)*new_r11);
CheckValue<IkReal> x997 = IKatan2WithCheck(IkReal(new_r01),IkReal(x994),IKFAST_ATAN2_MAGTHRESH);
if(!x997.valid){
continue;
}
IkReal x995=((-1.0)*(x997.value));
IkReal x996=x990;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x995;
IkReal gconst32=x995;
IkReal gconst33=((-1.0)*new_r01*x996);
IkReal gconst34=(x994*x996);
IkReal x998=new_r01*new_r01;
IkReal x999=((1.0)*new_r10);
IkReal x1000=((((-1.0)*new_r01*x999))+((new_r00*new_r11)));
IkReal x1001=x990;
IkReal x1002=(new_r11*x1001);
j7eval[0]=x1000;
j7eval[1]=((IKabs(((((-1.0)*x1001*x998))+((new_r00*x1002)))))+(IKabs(((((-1.0)*x1002*x999))+((new_r01*x1002))))));
j7eval[2]=IKsign(x1000);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1003=((-1.0)*new_r11);
CheckValue<IkReal> x1006 = IKatan2WithCheck(IkReal(new_r01),IkReal(x1003),IKFAST_ATAN2_MAGTHRESH);
if(!x1006.valid){
continue;
}
IkReal x1004=((-1.0)*(x1006.value));
IkReal x1005=x990;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1004;
IkReal gconst32=x1004;
IkReal gconst33=((-1.0)*new_r01*x1005);
IkReal gconst34=(x1003*x1005);
IkReal x1007=new_r01*new_r01;
IkReal x1008=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x1009=x990;
IkReal x1010=(new_r01*x1009);
j7eval[0]=x1008;
j7eval[1]=((IKabs((((new_r11*x1010))+(((-1.0)*new_r00*x1010)))))+(IKabs((((new_r10*x1010))+((x1007*x1009))))));
j7eval[2]=IKsign(x1008);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1011=((-1.0)*new_r11);
CheckValue<IkReal> x1014 = IKatan2WithCheck(IkReal(new_r01),IkReal(x1011),IKFAST_ATAN2_MAGTHRESH);
if(!x1014.valid){
continue;
}
IkReal x1012=((-1.0)*(x1014.value));
IkReal x1013=x990;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1012;
IkReal gconst32=x1012;
IkReal gconst33=((-1.0)*new_r01*x1013);
IkReal gconst34=(x1011*x1013);
IkReal x1015=new_r01*new_r01;
CheckValue<IkReal> x1017=IKPowWithIntegerCheck((x1015+(new_r11*new_r11)),-1);
if(!x1017.valid){
continue;
}
IkReal x1016=x1017.value;
j7eval[0]=((IKabs(((((-1.0)*x1015*x1016))+(new_r00*new_r00))))+(IKabs((((new_r01*new_r11*x1016))+(((-1.0)*new_r00*new_r10))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst34;
evalcond[2]=gconst33;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1018=((-1.0)*new_r11);
CheckValue<IkReal> x1020 = IKatan2WithCheck(IkReal(new_r01),IkReal(x1018),IKFAST_ATAN2_MAGTHRESH);
if(!x1020.valid){
continue;
}
IkReal x1019=((-1.0)*(x1020.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1019;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst32=x1019;
IkReal gconst33=((-1.0)*new_r01);
IkReal gconst34=x1018;
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1021=((-1.0)*new_r11);
CheckValue<IkReal> x1023 = IKatan2WithCheck(IkReal(new_r01),IkReal(x1021),IKFAST_ATAN2_MAGTHRESH);
if(!x1023.valid){
continue;
}
IkReal x1022=((-1.0)*(x1023.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1022;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst32=x1022;
IkReal gconst33=((-1.0)*new_r01);
IkReal gconst34=x1021;
j7eval[0]=1.0;
j7eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1024=((-1.0)*new_r11);
CheckValue<IkReal> x1026 = IKatan2WithCheck(IkReal(new_r01),IkReal(x1024),IKFAST_ATAN2_MAGTHRESH);
if(!x1026.valid){
continue;
}
IkReal x1025=((-1.0)*(x1026.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1025;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst32=x1025;
IkReal gconst33=((-1.0)*new_r01);
IkReal gconst34=x1024;
j7eval[0]=1.0;
j7eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1027=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst33*new_r01))+(((-1.0)*gconst34*new_r11)))),-1);
if(!x1027.valid){
continue;
}
CheckValue<IkReal> x1028 = IKatan2WithCheck(IkReal(gconst34*gconst34),IkReal((gconst33*gconst34)),IKFAST_ATAN2_MAGTHRESH);
if(!x1028.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1027.value)))+(x1028.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1029=IKcos(j7);
IkReal x1030=IKsin(j7);
IkReal x1031=(gconst33*x1029);
IkReal x1032=(gconst34*x1030);
IkReal x1033=((1.0)*x1030);
IkReal x1034=(gconst34*x1029);
IkReal x1035=(x1032+x1031);
evalcond[0]=x1035;
evalcond[1]=(gconst34+((new_r11*x1030))+((new_r01*x1029)));
evalcond[2]=(x1035+new_r11);
evalcond[3]=((((-1.0)*x1034))+((gconst33*x1030)));
evalcond[4]=(((new_r11*x1029))+gconst33+(((-1.0)*new_r01*x1033)));
evalcond[5]=(x1034+(((-1.0)*gconst33*x1033))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1036 = IKatan2WithCheck(IkReal((gconst33*new_r01)),IkReal(((-1.0)*gconst34*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1036.valid){
continue;
}
CheckValue<IkReal> x1037=IKPowWithIntegerCheck(IKsign(((gconst34*gconst34)+(gconst33*gconst33))),-1);
if(!x1037.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1036.value)+(((1.5707963267949)*(x1037.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1038=IKcos(j7);
IkReal x1039=IKsin(j7);
IkReal x1040=(gconst33*x1038);
IkReal x1041=(gconst34*x1039);
IkReal x1042=((1.0)*x1039);
IkReal x1043=(gconst34*x1038);
IkReal x1044=(x1041+x1040);
evalcond[0]=x1044;
evalcond[1]=(gconst34+((new_r11*x1039))+((new_r01*x1038)));
evalcond[2]=(x1044+new_r11);
evalcond[3]=((((-1.0)*x1043))+((gconst33*x1039)));
evalcond[4]=(gconst33+((new_r11*x1038))+(((-1.0)*new_r01*x1042)));
evalcond[5]=(x1043+(((-1.0)*gconst33*x1042))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1045=IKPowWithIntegerCheck(IKsign((((gconst33*new_r01))+((gconst34*new_r11)))),-1);
if(!x1045.valid){
continue;
}
CheckValue<IkReal> x1046 = IKatan2WithCheck(IkReal(gconst33*gconst33),IkReal(((-1.0)*gconst33*gconst34)),IKFAST_ATAN2_MAGTHRESH);
if(!x1046.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1045.value)))+(x1046.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1047=IKcos(j7);
IkReal x1048=IKsin(j7);
IkReal x1049=(gconst33*x1047);
IkReal x1050=(gconst34*x1048);
IkReal x1051=((1.0)*x1048);
IkReal x1052=(gconst34*x1047);
IkReal x1053=(x1050+x1049);
evalcond[0]=x1053;
evalcond[1]=(gconst34+((new_r11*x1048))+((new_r01*x1047)));
evalcond[2]=(x1053+new_r11);
evalcond[3]=(((gconst33*x1048))+(((-1.0)*x1052)));
evalcond[4]=(gconst33+(((-1.0)*new_r01*x1051))+((new_r11*x1047)));
evalcond[5]=((((-1.0)*gconst33*x1051))+x1052+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x1054=((-1.0)*new_r11);
CheckValue<IkReal> x1056 = IKatan2WithCheck(IkReal(0),IkReal(x1054),IKFAST_ATAN2_MAGTHRESH);
if(!x1056.valid){
continue;
}
IkReal x1055=((-1.0)*(x1056.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1055;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst32=x1055;
IkReal gconst33=0;
IkReal x1057 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1057)==0){
continue;
}
IkReal gconst34=(x1054*(pow(x1057,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1058=((-1.0)*new_r11);
CheckValue<IkReal> x1060 = IKatan2WithCheck(IkReal(0),IkReal(x1058),IKFAST_ATAN2_MAGTHRESH);
if(!x1060.valid){
continue;
}
IkReal x1059=((-1.0)*(x1060.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1059;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst32=x1059;
IkReal gconst33=0;
IkReal x1061 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1061)==0){
continue;
}
IkReal gconst34=(x1058*(pow(x1061,-0.5)));
j7eval[0]=new_r11;
j7eval[1]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1062=((-1.0)*new_r11);
CheckValue<IkReal> x1064 = IKatan2WithCheck(IkReal(0),IkReal(x1062),IKFAST_ATAN2_MAGTHRESH);
if(!x1064.valid){
continue;
}
IkReal x1063=((-1.0)*(x1064.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1063;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst32=x1063;
IkReal gconst33=0;
IkReal x1065 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1065)==0){
continue;
}
IkReal gconst34=(x1062*(pow(x1065,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1066=IKPowWithIntegerCheck(new_r11,-1);
if(!x1066.valid){
continue;
}
CheckValue<IkReal> x1067=IKPowWithIntegerCheck(gconst34,-1);
if(!x1067.valid){
continue;
}
if( IKabs(((-1.0)*gconst34*(x1066.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x1067.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst34*(x1066.value)))+IKsqr((new_r10*(x1067.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst34*(x1066.value)), (new_r10*(x1067.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1068=IKsin(j7);
IkReal x1069=IKcos(j7);
IkReal x1070=(gconst34*x1068);
IkReal x1071=((1.0)*x1069);
evalcond[0]=(new_r11*x1069);
evalcond[1]=(new_r10*x1068);
evalcond[2]=x1070;
evalcond[3]=(gconst34*x1069);
evalcond[4]=(gconst34+((new_r11*x1068)));
evalcond[5]=(x1070+new_r11);
evalcond[6]=(gconst34+(((-1.0)*new_r10*x1071)));
evalcond[7]=((((-1.0)*gconst34*x1071))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1072=IKPowWithIntegerCheck(new_r11,-1);
if(!x1072.valid){
continue;
}
CheckValue<IkReal> x1073=IKPowWithIntegerCheck(new_r10,-1);
if(!x1073.valid){
continue;
}
if( IKabs(((-1.0)*gconst34*(x1072.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst34*(x1073.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst34*(x1072.value)))+IKsqr((gconst34*(x1073.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst34*(x1072.value)), (gconst34*(x1073.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1074=IKsin(j7);
IkReal x1075=IKcos(j7);
IkReal x1076=(gconst34*x1074);
IkReal x1077=((1.0)*x1075);
evalcond[0]=(new_r11*x1075);
evalcond[1]=(new_r10*x1074);
evalcond[2]=x1076;
evalcond[3]=(gconst34*x1075);
evalcond[4]=(gconst34+((new_r11*x1074)));
evalcond[5]=(x1076+new_r11);
evalcond[6]=(gconst34+(((-1.0)*new_r10*x1077)));
evalcond[7]=((((-1.0)*gconst34*x1077))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1078 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1078.valid){
continue;
}
CheckValue<IkReal> x1079=IKPowWithIntegerCheck(IKsign(gconst34),-1);
if(!x1079.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1078.value)+(((1.5707963267949)*(x1079.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1080=IKsin(j7);
IkReal x1081=IKcos(j7);
IkReal x1082=(gconst34*x1080);
IkReal x1083=((1.0)*x1081);
evalcond[0]=(new_r11*x1081);
evalcond[1]=(new_r10*x1080);
evalcond[2]=x1082;
evalcond[3]=(gconst34*x1081);
evalcond[4]=(gconst34+((new_r11*x1080)));
evalcond[5]=(x1082+new_r11);
evalcond[6]=((((-1.0)*new_r10*x1083))+gconst34);
evalcond[7]=((((-1.0)*gconst34*x1083))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1085 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1085.valid){
continue;
}
IkReal x1084=((-1.0)*(x1085.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1084;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst32=x1084;
IkReal x1086 = new_r01*new_r01;
if(IKabs(x1086)==0){
continue;
}
IkReal gconst33=((-1.0)*new_r01*(pow(x1086,-0.5)));
IkReal gconst34=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x1088 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1088.valid){
continue;
}
IkReal x1087=((-1.0)*(x1088.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1087;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst32=x1087;
IkReal x1089 = new_r01*new_r01;
if(IKabs(x1089)==0){
continue;
}
IkReal gconst33=((-1.0)*new_r01*(pow(x1089,-0.5)));
IkReal gconst34=0;
j7eval[0]=new_r01;
j7eval[1]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1091 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1091.valid){
continue;
}
IkReal x1090=((-1.0)*(x1091.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1090;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst32=x1090;
IkReal x1092 = new_r01*new_r01;
if(IKabs(x1092)==0){
continue;
}
IkReal gconst33=((-1.0)*new_r01*(pow(x1092,-0.5)));
IkReal gconst34=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1093=IKPowWithIntegerCheck(gconst33,-1);
if(!x1093.valid){
continue;
}
CheckValue<IkReal> x1094=IKPowWithIntegerCheck(new_r00,-1);
if(!x1094.valid){
continue;
}
if( IKabs((new_r01*(x1093.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst33*(x1094.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01*(x1093.value)))+IKsqr(((-1.0)*gconst33*(x1094.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r01*(x1093.value)), ((-1.0)*gconst33*(x1094.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1095=IKcos(j7);
IkReal x1096=IKsin(j7);
IkReal x1097=(gconst33*x1095);
IkReal x1098=((1.0)*x1096);
evalcond[0]=(new_r00*x1096);
evalcond[1]=(new_r01*x1095);
evalcond[2]=x1097;
evalcond[3]=(gconst33*x1096);
evalcond[4]=(((new_r00*x1095))+gconst33);
evalcond[5]=(x1097+new_r00);
evalcond[6]=(gconst33+(((-1.0)*new_r01*x1098)));
evalcond[7]=((((-1.0)*gconst33*x1098))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1099=IKPowWithIntegerCheck(new_r01,-1);
if(!x1099.valid){
continue;
}
CheckValue<IkReal> x1100=IKPowWithIntegerCheck(new_r00,-1);
if(!x1100.valid){
continue;
}
if( IKabs((gconst33*(x1099.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst33*(x1100.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst33*(x1099.value)))+IKsqr(((-1.0)*gconst33*(x1100.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst33*(x1099.value)), ((-1.0)*gconst33*(x1100.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1101=IKcos(j7);
IkReal x1102=IKsin(j7);
IkReal x1103=(gconst33*x1101);
IkReal x1104=((1.0)*x1102);
evalcond[0]=(new_r00*x1102);
evalcond[1]=(new_r01*x1101);
evalcond[2]=x1103;
evalcond[3]=(gconst33*x1102);
evalcond[4]=(gconst33+((new_r00*x1101)));
evalcond[5]=(x1103+new_r00);
evalcond[6]=(gconst33+(((-1.0)*new_r01*x1104)));
evalcond[7]=((((-1.0)*gconst33*x1104))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1105 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1105.valid){
continue;
}
CheckValue<IkReal> x1106=IKPowWithIntegerCheck(IKsign(gconst33),-1);
if(!x1106.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1105.value)+(((1.5707963267949)*(x1106.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1107=IKcos(j7);
IkReal x1108=IKsin(j7);
IkReal x1109=(gconst33*x1107);
IkReal x1110=((1.0)*x1108);
evalcond[0]=(new_r00*x1108);
evalcond[1]=(new_r01*x1107);
evalcond[2]=x1109;
evalcond[3]=(gconst33*x1108);
evalcond[4]=(gconst33+((new_r00*x1107)));
evalcond[5]=(x1109+new_r00);
evalcond[6]=(gconst33+(((-1.0)*new_r01*x1110)));
evalcond[7]=(new_r01+(((-1.0)*gconst33*x1110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1111=((1.0)*new_r00);
CheckValue<IkReal> x1112 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst33*gconst33)))+(new_r00*new_r00))),IkReal((((gconst33*gconst34))+(((-1.0)*new_r10*x1111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1112.valid){
continue;
}
CheckValue<IkReal> x1113=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*x1111))+((gconst33*new_r10)))),-1);
if(!x1113.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1112.value)+(((1.5707963267949)*(x1113.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1114=IKcos(j7);
IkReal x1115=IKsin(j7);
IkReal x1116=(gconst33*x1114);
IkReal x1117=(gconst34*x1115);
IkReal x1118=((1.0)*x1115);
IkReal x1119=((1.0)*x1114);
IkReal x1120=(x1117+x1116);
evalcond[0]=(gconst33+((new_r00*x1114))+((new_r10*x1115)));
evalcond[1]=(gconst34+((new_r11*x1115))+((new_r01*x1114)));
evalcond[2]=(x1120+new_r00);
evalcond[3]=(x1120+new_r11);
evalcond[4]=(gconst33+((new_r11*x1114))+(((-1.0)*new_r01*x1118)));
evalcond[5]=(gconst34+((new_r00*x1115))+(((-1.0)*new_r10*x1119)));
evalcond[6]=(((gconst34*x1114))+new_r01+(((-1.0)*gconst33*x1118)));
evalcond[7]=((((-1.0)*gconst34*x1119))+new_r10+((gconst33*x1115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1121=((1.0)*gconst33);
CheckValue<IkReal> x1122 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x1121))+((gconst33*new_r00)))),IkReal(((((-1.0)*new_r10*x1121))+(((-1.0)*new_r01*x1121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1122.valid){
continue;
}
CheckValue<IkReal> x1123=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1123.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1122.value)+(((1.5707963267949)*(x1123.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1124=IKcos(j7);
IkReal x1125=IKsin(j7);
IkReal x1126=(gconst33*x1124);
IkReal x1127=(gconst34*x1125);
IkReal x1128=((1.0)*x1125);
IkReal x1129=((1.0)*x1124);
IkReal x1130=(x1126+x1127);
evalcond[0]=(gconst33+((new_r10*x1125))+((new_r00*x1124)));
evalcond[1]=(gconst34+((new_r01*x1124))+((new_r11*x1125)));
evalcond[2]=(x1130+new_r00);
evalcond[3]=(x1130+new_r11);
evalcond[4]=(gconst33+(((-1.0)*new_r01*x1128))+((new_r11*x1124)));
evalcond[5]=((((-1.0)*new_r10*x1129))+gconst34+((new_r00*x1125)));
evalcond[6]=(new_r01+(((-1.0)*gconst33*x1128))+((gconst34*x1124)));
evalcond[7]=(((gconst33*x1125))+new_r10+(((-1.0)*gconst34*x1129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1131 = IKatan2WithCheck(IkReal((((gconst33*new_r01))+(((-1.0)*gconst34*new_r00)))),IkReal(((((-1.0)*gconst33*new_r11))+((gconst34*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1131.valid){
continue;
}
CheckValue<IkReal> x1132=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x1132.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1131.value)+(((1.5707963267949)*(x1132.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1133=IKcos(j7);
IkReal x1134=IKsin(j7);
IkReal x1135=(gconst33*x1133);
IkReal x1136=(gconst34*x1134);
IkReal x1137=((1.0)*x1134);
IkReal x1138=((1.0)*x1133);
IkReal x1139=(x1136+x1135);
evalcond[0]=(gconst33+((new_r00*x1133))+((new_r10*x1134)));
evalcond[1]=(gconst34+((new_r11*x1134))+((new_r01*x1133)));
evalcond[2]=(x1139+new_r00);
evalcond[3]=(x1139+new_r11);
evalcond[4]=(gconst33+(((-1.0)*new_r01*x1137))+((new_r11*x1133)));
evalcond[5]=(gconst34+(((-1.0)*new_r10*x1138))+((new_r00*x1134)));
evalcond[6]=((((-1.0)*gconst33*x1137))+((gconst34*x1133))+new_r01);
evalcond[7]=(((gconst33*x1134))+new_r10+(((-1.0)*gconst34*x1138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1142 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1142)==0){
continue;
}
IkReal x1140=pow(x1142,-0.5);
IkReal x1141=((1.0)*x1140);
CheckValue<IkReal> x1143 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1143.valid){
continue;
}
IkReal gconst35=((3.14159265358979)+(((-1.0)*(x1143.value))));
IkReal gconst36=(new_r01*x1141);
IkReal gconst37=(new_r11*x1141);
CheckValue<IkReal> x1144 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1144.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1144.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x1148 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1148.valid){
continue;
}
IkReal x1145=((1.0)*(x1148.value));
IkReal x1146=x1140;
IkReal x1147=((1.0)*x1146);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst36;
cj9=gconst37;
j9=((3.14159265)+(((-1.0)*x1145)));
IkReal gconst35=((3.14159265358979)+(((-1.0)*x1145)));
IkReal gconst36=(new_r01*x1147);
IkReal gconst37=(new_r11*x1147);
IkReal x1149=new_r01*new_r01;
IkReal x1150=((1.0)*new_r01);
IkReal x1151=(((new_r00*new_r11))+(((-1.0)*new_r10*x1150)));
IkReal x1152=x1140;
IkReal x1153=(new_r11*x1152);
j7eval[0]=x1151;
j7eval[1]=IKsign(x1151);
j7eval[2]=((IKabs((((x1149*x1152))+(((-1.0)*new_r00*x1153)))))+(IKabs((((new_r10*x1153))+(((-1.0)*x1150*x1153))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1157 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1157.valid){
continue;
}
IkReal x1154=((1.0)*(x1157.value));
IkReal x1155=x1140;
IkReal x1156=((1.0)*x1155);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst36;
cj9=gconst37;
j9=((3.14159265)+(((-1.0)*x1154)));
IkReal gconst35=((3.14159265358979)+(((-1.0)*x1154)));
IkReal gconst36=(new_r01*x1156);
IkReal gconst37=(new_r11*x1156);
IkReal x1158=new_r01*new_r01;
IkReal x1159=(new_r00*new_r01);
IkReal x1160=(x1159+((new_r10*new_r11)));
IkReal x1161=x1140;
IkReal x1162=((1.0)*new_r01*x1161);
j7eval[0]=x1160;
j7eval[1]=IKsign(x1160);
j7eval[2]=((IKabs((((x1159*x1161))+(((-1.0)*new_r11*x1162)))))+(IKabs(((((-1.0)*new_r10*x1162))+(((-1.0)*x1158*x1161))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1163=((1.0)*new_r00);
CheckValue<IkReal> x1164 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst36*gconst36)))+(new_r00*new_r00))),IkReal(((((-1.0)*new_r10*x1163))+((gconst36*gconst37)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1164.valid){
continue;
}
CheckValue<IkReal> x1165=IKPowWithIntegerCheck(IKsign((((gconst36*new_r10))+(((-1.0)*gconst37*x1163)))),-1);
if(!x1165.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1164.value)+(((1.5707963267949)*(x1165.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1166=IKcos(j7);
IkReal x1167=IKsin(j7);
IkReal x1168=(gconst36*x1166);
IkReal x1169=(gconst37*x1167);
IkReal x1170=((1.0)*x1167);
IkReal x1171=((1.0)*x1166);
IkReal x1172=(x1168+x1169);
evalcond[0]=(gconst36+((new_r10*x1167))+((new_r00*x1166)));
evalcond[1]=(gconst37+((new_r11*x1167))+((new_r01*x1166)));
evalcond[2]=(x1172+new_r00);
evalcond[3]=(x1172+new_r11);
evalcond[4]=(gconst36+((new_r11*x1166))+(((-1.0)*new_r01*x1170)));
evalcond[5]=((((-1.0)*new_r10*x1171))+gconst37+((new_r00*x1167)));
evalcond[6]=(((gconst37*x1166))+(((-1.0)*gconst36*x1170))+new_r01);
evalcond[7]=(((gconst36*x1167))+new_r10+(((-1.0)*gconst37*x1171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1173=((1.0)*gconst36);
CheckValue<IkReal> x1174 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x1173))+((gconst36*new_r00)))),IkReal(((((-1.0)*new_r10*x1173))+(((-1.0)*new_r01*x1173)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1174.valid){
continue;
}
CheckValue<IkReal> x1175=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1175.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1174.value)+(((1.5707963267949)*(x1175.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1176=IKcos(j7);
IkReal x1177=IKsin(j7);
IkReal x1178=(gconst36*x1176);
IkReal x1179=(gconst37*x1177);
IkReal x1180=((1.0)*x1177);
IkReal x1181=((1.0)*x1176);
IkReal x1182=(x1179+x1178);
evalcond[0]=(gconst36+((new_r10*x1177))+((new_r00*x1176)));
evalcond[1]=(gconst37+((new_r11*x1177))+((new_r01*x1176)));
evalcond[2]=(x1182+new_r00);
evalcond[3]=(x1182+new_r11);
evalcond[4]=(gconst36+((new_r11*x1176))+(((-1.0)*new_r01*x1180)));
evalcond[5]=(gconst37+(((-1.0)*new_r10*x1181))+((new_r00*x1177)));
evalcond[6]=(new_r01+((gconst37*x1176))+(((-1.0)*gconst36*x1180)));
evalcond[7]=((((-1.0)*gconst37*x1181))+((gconst36*x1177))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1183 = IKatan2WithCheck(IkReal((((gconst36*new_r01))+(((-1.0)*gconst37*new_r00)))),IkReal(((((-1.0)*gconst36*new_r11))+((gconst37*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1183.valid){
continue;
}
CheckValue<IkReal> x1184=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x1184.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1183.value)+(((1.5707963267949)*(x1184.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1185=IKcos(j7);
IkReal x1186=IKsin(j7);
IkReal x1187=(gconst36*x1185);
IkReal x1188=(gconst37*x1186);
IkReal x1189=((1.0)*x1186);
IkReal x1190=((1.0)*x1185);
IkReal x1191=(x1188+x1187);
evalcond[0]=(gconst36+((new_r10*x1186))+((new_r00*x1185)));
evalcond[1]=(gconst37+((new_r01*x1185))+((new_r11*x1186)));
evalcond[2]=(x1191+new_r00);
evalcond[3]=(x1191+new_r11);
evalcond[4]=(gconst36+(((-1.0)*new_r01*x1189))+((new_r11*x1185)));
evalcond[5]=(gconst37+(((-1.0)*new_r10*x1190))+((new_r00*x1186)));
evalcond[6]=(((gconst37*x1185))+new_r01+(((-1.0)*gconst36*x1189)));
evalcond[7]=((((-1.0)*gconst37*x1190))+new_r10+((gconst36*x1186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1193 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1193.valid){
continue;
}
IkReal x1192=x1193.value;
j7array[0]=((-1.0)*x1192);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1192)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r10*(IKcos(j7))))+((new_r00*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j7eval[0]=new_r01;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r01);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j7eval[0]=new_r00;
j7eval[1]=IKsign(new_r00);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j7eval[0]=new_r01;
j7eval[1]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1194=IKPowWithIntegerCheck(new_r01,-1);
if(!x1194.valid){
continue;
}
CheckValue<IkReal> x1195=IKPowWithIntegerCheck(new_r00,-1);
if(!x1195.valid){
continue;
}
if( IKabs((sj9*(x1194.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj9*(x1195.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj9*(x1194.value)))+IKsqr(((-1.0)*sj9*(x1195.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((sj9*(x1194.value)), ((-1.0)*sj9*(x1195.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1196=IKcos(j7);
IkReal x1197=IKsin(j7);
IkReal x1198=(sj9*x1196);
IkReal x1199=(cj9*x1197);
IkReal x1200=(sj9*x1197);
IkReal x1201=(cj9*x1196);
IkReal x1202=(x1199+x1198);
evalcond[0]=(cj9+((new_r00*x1197)));
evalcond[1]=(sj9+((new_r00*x1196)));
evalcond[2]=(cj9+((new_r01*x1196)));
evalcond[3]=(sj9+(((-1.0)*new_r01*x1197)));
evalcond[4]=x1202;
evalcond[5]=(x1202+new_r00);
evalcond[6]=(x1200+(((-1.0)*x1201)));
evalcond[7]=(x1201+(((-1.0)*x1200))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1203=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x1203.valid){
continue;
}
CheckValue<IkReal> x1204 = IKatan2WithCheck(IkReal(((-1.0)*cj9)),IkReal(((-1.0)*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x1204.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1203.value)))+(x1204.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1205=IKcos(j7);
IkReal x1206=IKsin(j7);
IkReal x1207=(sj9*x1205);
IkReal x1208=(cj9*x1206);
IkReal x1209=(sj9*x1206);
IkReal x1210=(cj9*x1205);
IkReal x1211=(x1208+x1207);
evalcond[0]=(((new_r00*x1206))+cj9);
evalcond[1]=(((new_r00*x1205))+sj9);
evalcond[2]=(cj9+((new_r01*x1205)));
evalcond[3]=((((-1.0)*new_r01*x1206))+sj9);
evalcond[4]=x1211;
evalcond[5]=(x1211+new_r00);
evalcond[6]=(x1209+(((-1.0)*x1210)));
evalcond[7]=(x1210+(((-1.0)*x1209))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1212=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x1212.valid){
continue;
}
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal(sj9),IkReal(((-1.0)*cj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1212.value)))+(x1213.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1214=IKcos(j7);
IkReal x1215=IKsin(j7);
IkReal x1216=(sj9*x1214);
IkReal x1217=(cj9*x1215);
IkReal x1218=(sj9*x1215);
IkReal x1219=(cj9*x1214);
IkReal x1220=(x1216+x1217);
evalcond[0]=(cj9+((new_r00*x1215)));
evalcond[1]=(sj9+((new_r00*x1214)));
evalcond[2]=(cj9+((new_r01*x1214)));
evalcond[3]=((((-1.0)*new_r01*x1215))+sj9);
evalcond[4]=x1220;
evalcond[5]=(x1220+new_r00);
evalcond[6]=(x1218+(((-1.0)*x1219)));
evalcond[7]=(x1219+new_r01+(((-1.0)*x1218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j7eval[0]=new_r10;
j7eval[1]=IKsign(new_r10);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j7eval[0]=new_r11;
j7eval[1]=IKsign(new_r11);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j7eval[0]=new_r11;
j7eval[1]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1221=IKPowWithIntegerCheck(new_r11,-1);
if(!x1221.valid){
continue;
}
CheckValue<IkReal> x1222=IKPowWithIntegerCheck(new_r10,-1);
if(!x1222.valid){
continue;
}
if( IKabs(((-1.0)*cj9*(x1221.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj9*(x1222.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj9*(x1221.value)))+IKsqr((cj9*(x1222.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*cj9*(x1221.value)), (cj9*(x1222.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1223=IKsin(j7);
IkReal x1224=IKcos(j7);
IkReal x1225=(sj9*x1224);
IkReal x1226=(cj9*x1223);
IkReal x1227=(sj9*x1223);
IkReal x1228=(cj9*x1224);
IkReal x1229=(x1226+x1225);
evalcond[0]=(sj9+((new_r11*x1224)));
evalcond[1]=(sj9+((new_r10*x1223)));
evalcond[2]=(cj9+((new_r11*x1223)));
evalcond[3]=((((-1.0)*new_r10*x1224))+cj9);
evalcond[4]=x1229;
evalcond[5]=(x1229+new_r11);
evalcond[6]=(x1228+(((-1.0)*x1227)));
evalcond[7]=(x1227+(((-1.0)*x1228))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1230=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x1230.valid){
continue;
}
CheckValue<IkReal> x1231 = IKatan2WithCheck(IkReal(((-1.0)*cj9)),IkReal(((-1.0)*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x1231.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1230.value)))+(x1231.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1232=IKsin(j7);
IkReal x1233=IKcos(j7);
IkReal x1234=(sj9*x1233);
IkReal x1235=(cj9*x1232);
IkReal x1236=(sj9*x1232);
IkReal x1237=(cj9*x1233);
IkReal x1238=(x1234+x1235);
evalcond[0]=(sj9+((new_r11*x1233)));
evalcond[1]=(sj9+((new_r10*x1232)));
evalcond[2]=(cj9+((new_r11*x1232)));
evalcond[3]=(cj9+(((-1.0)*new_r10*x1233)));
evalcond[4]=x1238;
evalcond[5]=(x1238+new_r11);
evalcond[6]=((((-1.0)*x1236))+x1237);
evalcond[7]=((((-1.0)*x1237))+x1236+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1239=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x1239.valid){
continue;
}
CheckValue<IkReal> x1240 = IKatan2WithCheck(IkReal(((-1.0)*sj9)),IkReal(cj9),IKFAST_ATAN2_MAGTHRESH);
if(!x1240.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1239.value)))+(x1240.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1241=IKsin(j7);
IkReal x1242=IKcos(j7);
IkReal x1243=(sj9*x1242);
IkReal x1244=(cj9*x1241);
IkReal x1245=(sj9*x1241);
IkReal x1246=(cj9*x1242);
IkReal x1247=(x1243+x1244);
evalcond[0]=(sj9+((new_r11*x1242)));
evalcond[1]=(sj9+((new_r10*x1241)));
evalcond[2]=(cj9+((new_r11*x1241)));
evalcond[3]=(cj9+(((-1.0)*new_r10*x1242)));
evalcond[4]=x1247;
evalcond[5]=(x1247+new_r11);
evalcond[6]=(x1246+(((-1.0)*x1245)));
evalcond[7]=(x1245+(((-1.0)*x1246))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1249 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1249.valid){
continue;
}
IkReal x1248=x1249.value;
j7array[0]=((-1.0)*x1248);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1248)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j7))))+((new_r11*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1250=((1.0)*sj9);
CheckValue<IkReal> x1251=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1250))+((cj9*new_r00)))),-1);
if(!x1251.valid){
continue;
}
CheckValue<IkReal> x1252 = IKatan2WithCheck(IkReal(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*new_r00*new_r11)))),IkReal((((new_r10*new_r11))+(((-1.0)*cj9*x1250)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1252.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1251.value)))+(x1252.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1253=IKcos(j7);
IkReal x1254=IKsin(j7);
IkReal x1255=(sj9*x1253);
IkReal x1256=(cj9*x1254);
IkReal x1257=(sj9*x1254);
IkReal x1258=(cj9*x1253);
IkReal x1259=(x1256+x1255);
evalcond[0]=(sj9+((new_r00*x1253))+((new_r10*x1254)));
evalcond[1]=(cj9+((new_r01*x1253))+((new_r11*x1254)));
evalcond[2]=(x1259+new_r00);
evalcond[3]=(x1259+new_r11);
evalcond[4]=(sj9+(((-1.0)*new_r01*x1254))+((new_r11*x1253)));
evalcond[5]=(cj9+(((-1.0)*new_r10*x1253))+((new_r00*x1254)));
evalcond[6]=(x1258+new_r01+(((-1.0)*x1257)));
evalcond[7]=(x1257+new_r10+(((-1.0)*x1258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1260=IKPowWithIntegerCheck(IKsign((((cj9*new_r01))+(((-1.0)*new_r11*sj9)))),-1);
if(!x1260.valid){
continue;
}
CheckValue<IkReal> x1261 = IKatan2WithCheck(IkReal((((cj9*sj9))+(((-1.0)*new_r00*new_r01)))),IkReal(((((-1.0)*(cj9*cj9)))+((new_r00*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1261.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1260.value)))+(x1261.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1262=IKcos(j7);
IkReal x1263=IKsin(j7);
IkReal x1264=(sj9*x1262);
IkReal x1265=(cj9*x1263);
IkReal x1266=(sj9*x1263);
IkReal x1267=(cj9*x1262);
IkReal x1268=(x1265+x1264);
evalcond[0]=(sj9+((new_r00*x1262))+((new_r10*x1263)));
evalcond[1]=(cj9+((new_r01*x1262))+((new_r11*x1263)));
evalcond[2]=(x1268+new_r00);
evalcond[3]=(x1268+new_r11);
evalcond[4]=(sj9+(((-1.0)*new_r01*x1263))+((new_r11*x1262)));
evalcond[5]=(cj9+(((-1.0)*new_r10*x1262))+((new_r00*x1263)));
evalcond[6]=(x1267+new_r01+(((-1.0)*x1266)));
evalcond[7]=(x1266+new_r10+(((-1.0)*x1267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1269 = IKatan2WithCheck(IkReal(((((-1.0)*cj9*new_r00))+((new_r01*sj9)))),IkReal((((cj9*new_r10))+(((-1.0)*new_r11*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1269.valid){
continue;
}
CheckValue<IkReal> x1270=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x1270.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1269.value)+(((1.5707963267949)*(x1270.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1271=IKcos(j7);
IkReal x1272=IKsin(j7);
IkReal x1273=(sj9*x1271);
IkReal x1274=(cj9*x1272);
IkReal x1275=(sj9*x1272);
IkReal x1276=(cj9*x1271);
IkReal x1277=(x1273+x1274);
evalcond[0]=(sj9+((new_r00*x1271))+((new_r10*x1272)));
evalcond[1]=(((new_r01*x1271))+cj9+((new_r11*x1272)));
evalcond[2]=(x1277+new_r00);
evalcond[3]=(x1277+new_r11);
evalcond[4]=(sj9+(((-1.0)*new_r01*x1272))+((new_r11*x1271)));
evalcond[5]=(cj9+((new_r00*x1272))+(((-1.0)*new_r10*x1271)));
evalcond[6]=(x1276+(((-1.0)*x1275))+new_r01);
evalcond[7]=(x1275+(((-1.0)*x1276))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
IkReal x1278=(((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)));
j7eval[0]=x1278;
j7eval[1]=IKsign(x1278);
j7eval[2]=((IKabs((((new_r10*sj9))+((cj9*new_r11)))))+(IKabs((((cj9*new_r01))+((new_r00*sj9))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
IkReal x1279=((1.0)*sj9);
IkReal x1280=(((cj9*new_r11))+(((-1.0)*new_r01*x1279)));
j7eval[0]=x1280;
j7eval[1]=IKsign(x1280);
j7eval[2]=((IKabs(((-1.0)+(new_r11*new_r11)+(cj9*cj9))))+(IKabs((((new_r01*new_r11))+(((-1.0)*cj9*x1279))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
IkReal x1281=(((new_r01*sj9))+(((-1.0)*cj9*new_r11)));
j7eval[0]=x1281;
j7eval[1]=IKsign(x1281);
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(cj9*cj9)))+((new_r00*new_r11)))))+(IKabs((((cj9*sj9))+((new_r00*new_r01))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1283 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1283)==0){
continue;
}
IkReal x1282=pow(x1283,-0.5);
CheckValue<IkReal> x1284 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1284.valid){
continue;
}
IkReal gconst38=((-1.0)*(x1284.value));
IkReal gconst39=(new_r11*x1282);
IkReal gconst40=(new_r01*x1282);
CheckValue<IkReal> x1285 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1285.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1285.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x1288 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1288.valid){
continue;
}
IkReal x1286=((-1.0)*(x1288.value));
IkReal x1287=x1282;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1286;
IkReal gconst38=x1286;
IkReal gconst39=(new_r11*x1287);
IkReal gconst40=(new_r01*x1287);
IkReal x1289=new_r01*new_r01;
IkReal x1290=(((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)));
IkReal x1291=x1282;
IkReal x1292=(new_r11*x1291);
j7eval[0]=x1290;
j7eval[1]=IKsign(x1290);
j7eval[2]=((IKabs((((new_r00*x1292))+((x1289*x1291)))))+(IKabs((((new_r10*x1292))+((new_r01*x1292))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1295 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1295.valid){
continue;
}
IkReal x1293=((-1.0)*(x1295.value));
IkReal x1294=x1282;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1293;
IkReal gconst38=x1293;
IkReal gconst39=(new_r11*x1294);
IkReal gconst40=(new_r01*x1294);
IkReal x1296=new_r01*new_r01;
CheckValue<IkReal> x1299=IKPowWithIntegerCheck((x1296+(new_r11*new_r11)),-1);
if(!x1299.valid){
continue;
}
IkReal x1297=x1299.value;
IkReal x1298=(x1296*x1297);
j7eval[0]=((IKabs((x1298+((new_r00*new_r11)))))+(IKabs((((new_r10*x1297*(new_r11*new_r11*new_r11)))+((new_r10*new_r11*x1298))+((new_r01*new_r11*x1297))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1302 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1302.valid){
continue;
}
IkReal x1300=((-1.0)*(x1302.value));
IkReal x1301=x1282;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1300;
IkReal gconst38=x1300;
IkReal gconst39=(new_r11*x1301);
IkReal gconst40=(new_r01*x1301);
IkReal x1303=new_r11*new_r11;
IkReal x1304=(new_r10*new_r11);
IkReal x1305=(x1304+((new_r00*new_r01)));
IkReal x1306=x1282;
IkReal x1307=(new_r11*x1306);
j7eval[0]=x1305;
j7eval[1]=((IKabs(((((-1.0)*x1304*x1306))+((new_r01*x1307)))))+(IKabs((((x1303*x1306))+((new_r00*x1307))))));
j7eval[2]=IKsign(x1305);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1309 = IKatan2WithCheck(IkReal(0),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1309.valid){
continue;
}
IkReal x1308=((-1.0)*(x1309.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1308;
new_r11=0;
new_r00=0;
IkReal gconst38=x1308;
IkReal gconst39=0;
IkReal x1310 = new_r01*new_r01;
if(IKabs(x1310)==0){
continue;
}
IkReal gconst40=(new_r01*(pow(x1310,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1311=IKPowWithIntegerCheck(gconst40,-1);
if(!x1311.valid){
continue;
}
cj7array[0]=(new_r01*(x1311.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1312=IKsin(j7);
IkReal x1313=IKcos(j7);
IkReal x1314=((1.0)*gconst40);
evalcond[0]=(new_r10*x1312);
evalcond[1]=(gconst40*x1312);
evalcond[2]=((-1.0)*new_r01*x1312);
evalcond[3]=(gconst40+(((-1.0)*new_r10*x1313)));
evalcond[4]=((((-1.0)*x1313*x1314))+new_r10);
evalcond[5]=(((new_r01*x1313))+(((-1.0)*x1314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1315=IKPowWithIntegerCheck(new_r10,-1);
if(!x1315.valid){
continue;
}
cj7array[0]=(gconst40*(x1315.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1316=IKsin(j7);
IkReal x1317=IKcos(j7);
IkReal x1318=((1.0)*gconst40);
IkReal x1319=(x1317*x1318);
evalcond[0]=(new_r10*x1316);
evalcond[1]=(gconst40*x1316);
evalcond[2]=((-1.0)*new_r01*x1316);
evalcond[3]=((((-1.0)*x1319))+new_r01);
evalcond[4]=((((-1.0)*x1319))+new_r10);
evalcond[5]=(((new_r01*x1317))+(((-1.0)*x1318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst40;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x1321 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1321.valid){
continue;
}
IkReal x1320=((-1.0)*(x1321.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1320;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst38=x1320;
IkReal gconst39=new_r11;
IkReal gconst40=new_r01;
j7eval[0]=1.0;
j7eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1323 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1323.valid){
continue;
}
IkReal x1322=((-1.0)*(x1323.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1322;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst38=x1322;
IkReal gconst39=new_r11;
IkReal gconst40=new_r01;
j7eval[0]=1.0;
j7eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1325 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1325.valid){
continue;
}
IkReal x1324=((-1.0)*(x1325.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1324;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst38=x1324;
IkReal gconst39=new_r11;
IkReal gconst40=new_r01;
j7eval[0]=1.0;
j7eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((-1.0)+(new_r01*new_r01)))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1326 = IKatan2WithCheck(IkReal((gconst40*new_r11)),IkReal(((-1.0)*gconst39*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1326.valid){
continue;
}
CheckValue<IkReal> x1327=IKPowWithIntegerCheck(IKsign(((gconst40*gconst40)+(gconst39*gconst39))),-1);
if(!x1327.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1326.value)+(((1.5707963267949)*(x1327.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1328=IKcos(j7);
IkReal x1329=IKsin(j7);
IkReal x1330=((1.0)*gconst40);
IkReal x1331=(gconst39*x1328);
IkReal x1332=((1.0)*x1329);
IkReal x1333=(((gconst39*x1332))+((x1328*x1330)));
evalcond[0]=((((-1.0)*x1331))+((gconst40*x1329)));
evalcond[1]=((((-1.0)*new_r01*x1332))+gconst39+((new_r11*x1328)));
evalcond[2]=(x1331+(((-1.0)*x1329*x1330))+new_r11);
evalcond[3]=((-1.0)*x1333);
evalcond[4]=(((new_r01*x1328))+((new_r11*x1329))+(((-1.0)*x1330)));
evalcond[5]=(new_r01+(((-1.0)*x1333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1334 = IKatan2WithCheck(IkReal((gconst39*new_r01)),IkReal((gconst40*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1334.valid){
continue;
}
CheckValue<IkReal> x1335=IKPowWithIntegerCheck(IKsign(((gconst40*gconst40)+(gconst39*gconst39))),-1);
if(!x1335.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1334.value)+(((1.5707963267949)*(x1335.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1336=IKcos(j7);
IkReal x1337=IKsin(j7);
IkReal x1338=((1.0)*gconst40);
IkReal x1339=(gconst39*x1336);
IkReal x1340=((1.0)*x1337);
IkReal x1341=(((x1336*x1338))+((gconst39*x1340)));
evalcond[0]=((((-1.0)*x1339))+((gconst40*x1337)));
evalcond[1]=(((new_r11*x1336))+gconst39+(((-1.0)*new_r01*x1340)));
evalcond[2]=(x1339+(((-1.0)*x1337*x1338))+new_r11);
evalcond[3]=((-1.0)*x1341);
evalcond[4]=(((new_r11*x1337))+((new_r01*x1336))+(((-1.0)*x1338)));
evalcond[5]=((((-1.0)*x1341))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1342=IKPowWithIntegerCheck(IKsign((((gconst40*new_r01))+((gconst39*new_r11)))),-1);
if(!x1342.valid){
continue;
}
CheckValue<IkReal> x1343 = IKatan2WithCheck(IkReal((gconst39*gconst40)),IkReal(gconst40*gconst40),IKFAST_ATAN2_MAGTHRESH);
if(!x1343.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1342.value)))+(x1343.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1344=IKcos(j7);
IkReal x1345=IKsin(j7);
IkReal x1346=((1.0)*gconst40);
IkReal x1347=(gconst39*x1344);
IkReal x1348=((1.0)*x1345);
IkReal x1349=(((x1344*x1346))+((gconst39*x1348)));
evalcond[0]=(((gconst40*x1345))+(((-1.0)*x1347)));
evalcond[1]=(gconst39+((new_r11*x1344))+(((-1.0)*new_r01*x1348)));
evalcond[2]=(x1347+new_r11+(((-1.0)*x1345*x1346)));
evalcond[3]=((-1.0)*x1349);
evalcond[4]=((((-1.0)*x1346))+((new_r01*x1344))+((new_r11*x1345)));
evalcond[5]=((((-1.0)*x1349))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1350=IKPowWithIntegerCheck(gconst39,-1);
if(!x1350.valid){
continue;
}
cj7array[0]=(new_r00*(x1350.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1351=IKsin(j7);
IkReal x1352=IKcos(j7);
evalcond[0]=(new_r00*x1351);
evalcond[1]=(new_r11*x1351);
evalcond[2]=((-1.0)*gconst39*x1351);
evalcond[3]=(((new_r11*x1352))+gconst39);
evalcond[4]=(((gconst39*x1352))+new_r11);
evalcond[5]=(((new_r00*x1352))+(((-1.0)*gconst39)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1354 = IKatan2WithCheck(IkReal(0),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1354.valid){
continue;
}
IkReal x1353=((-1.0)*(x1354.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1353;
new_r11=0;
IkReal gconst38=x1353;
IkReal gconst39=0;
IkReal x1355 = new_r01*new_r01;
if(IKabs(x1355)==0){
continue;
}
IkReal gconst40=(new_r01*(pow(x1355,-0.5)));
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1357 = IKatan2WithCheck(IkReal(0),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1357.valid){
continue;
}
IkReal x1356=((-1.0)*(x1357.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1356;
new_r11=0;
IkReal gconst38=x1356;
IkReal gconst39=0;
IkReal x1358 = new_r01*new_r01;
if(IKabs(x1358)==0){
continue;
}
IkReal gconst40=(new_r01*(pow(x1358,-0.5)));
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1360 = IKatan2WithCheck(IkReal(0),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1360.valid){
continue;
}
IkReal x1359=((-1.0)*(x1360.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1359;
new_r11=0;
IkReal gconst38=x1359;
IkReal gconst39=0;
IkReal x1361 = new_r01*new_r01;
if(IKabs(x1361)==0){
continue;
}
IkReal gconst40=(new_r01*(pow(x1361,-0.5)));
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1362=IKPowWithIntegerCheck(gconst40,-1);
if(!x1362.valid){
continue;
}
CheckValue<IkReal> x1363=IKPowWithIntegerCheck(new_r01,-1);
if(!x1363.valid){
continue;
}
if( IKabs(((-1.0)*new_r00*(x1362.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst40*(x1363.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00*(x1362.value)))+IKsqr((gconst40*(x1363.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r00*(x1362.value)), (gconst40*(x1363.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1364=IKsin(j7);
IkReal x1365=IKcos(j7);
IkReal x1366=((1.0)*x1365);
IkReal x1367=(gconst40*x1366);
IkReal x1368=((-1.0)*x1364);
evalcond[0]=(new_r01*x1368);
evalcond[1]=(gconst40*x1368);
evalcond[2]=(((gconst40*x1364))+new_r00);
evalcond[3]=(new_r01+(((-1.0)*x1367)));
evalcond[4]=(new_r10+(((-1.0)*x1367)));
evalcond[5]=((((-1.0)*gconst40))+((new_r01*x1365)));
evalcond[6]=(((new_r10*x1364))+((new_r00*x1365)));
evalcond[7]=(gconst40+(((-1.0)*new_r10*x1366))+((new_r00*x1364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1369=IKPowWithIntegerCheck(IKsign(gconst40),-1);
if(!x1369.valid){
continue;
}
CheckValue<IkReal> x1370 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1370.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1369.value)))+(x1370.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1371=IKsin(j7);
IkReal x1372=IKcos(j7);
IkReal x1373=((1.0)*x1372);
IkReal x1374=(gconst40*x1373);
IkReal x1375=((-1.0)*x1371);
evalcond[0]=(new_r01*x1375);
evalcond[1]=(gconst40*x1375);
evalcond[2]=(((gconst40*x1371))+new_r00);
evalcond[3]=((((-1.0)*x1374))+new_r01);
evalcond[4]=((((-1.0)*x1374))+new_r10);
evalcond[5]=((((-1.0)*gconst40))+((new_r01*x1372)));
evalcond[6]=(((new_r10*x1371))+((new_r00*x1372)));
evalcond[7]=(gconst40+((new_r00*x1371))+(((-1.0)*new_r10*x1373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(IKsign(gconst40),-1);
if(!x1376.valid){
continue;
}
CheckValue<IkReal> x1377 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1377.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1376.value)))+(x1377.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1378=IKsin(j7);
IkReal x1379=IKcos(j7);
IkReal x1380=((1.0)*x1379);
IkReal x1381=(gconst40*x1380);
IkReal x1382=((-1.0)*x1378);
evalcond[0]=(new_r01*x1382);
evalcond[1]=(gconst40*x1382);
evalcond[2]=(((gconst40*x1378))+new_r00);
evalcond[3]=((((-1.0)*x1381))+new_r01);
evalcond[4]=((((-1.0)*x1381))+new_r10);
evalcond[5]=((((-1.0)*gconst40))+((new_r01*x1379)));
evalcond[6]=(((new_r10*x1378))+((new_r00*x1379)));
evalcond[7]=(gconst40+(((-1.0)*new_r10*x1380))+((new_r00*x1378)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1384 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1384.valid){
continue;
}
IkReal x1383=((-1.0)*(x1384.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1383;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst38=x1383;
IkReal x1385 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1385)==0){
continue;
}
IkReal gconst39=(new_r11*(pow(x1385,-0.5)));
IkReal gconst40=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1387 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1387.valid){
continue;
}
IkReal x1386=((-1.0)*(x1387.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1386;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst38=x1386;
IkReal x1388 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1388)==0){
continue;
}
IkReal gconst39=(new_r11*(pow(x1388,-0.5)));
IkReal gconst40=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x1390 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1390.valid){
continue;
}
IkReal x1389=((-1.0)*(x1390.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1389;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst38=x1389;
IkReal x1391 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1391)==0){
continue;
}
IkReal gconst39=(new_r11*(pow(x1391,-0.5)));
IkReal gconst40=0;
j7eval[0]=new_r10;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1392=IKPowWithIntegerCheck(new_r10,-1);
if(!x1392.valid){
continue;
}
CheckValue<IkReal> x1393=IKPowWithIntegerCheck(new_r11,-1);
if(!x1393.valid){
continue;
}
if( IKabs((gconst39*(x1392.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst39*(x1393.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst39*(x1392.value)))+IKsqr(((-1.0)*gconst39*(x1393.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst39*(x1392.value)), ((-1.0)*gconst39*(x1393.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1394=IKcos(j7);
IkReal x1395=IKsin(j7);
IkReal x1396=((1.0)*gconst39);
IkReal x1397=((-1.0)*gconst39);
evalcond[0]=(new_r11*x1395);
evalcond[1]=((-1.0)*new_r10*x1394);
evalcond[2]=(x1394*x1397);
evalcond[3]=(x1395*x1397);
evalcond[4]=(((new_r11*x1394))+gconst39);
evalcond[5]=(((gconst39*x1394))+new_r11);
evalcond[6]=((((-1.0)*x1395*x1396))+new_r10);
evalcond[7]=(((new_r10*x1395))+(((-1.0)*x1396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1398=IKPowWithIntegerCheck(gconst39,-1);
if(!x1398.valid){
continue;
}
CheckValue<IkReal> x1399=IKPowWithIntegerCheck(new_r11,-1);
if(!x1399.valid){
continue;
}
if( IKabs((new_r10*(x1398.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst39*(x1399.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x1398.value)))+IKsqr(((-1.0)*gconst39*(x1399.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x1398.value)), ((-1.0)*gconst39*(x1399.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1400=IKcos(j7);
IkReal x1401=IKsin(j7);
IkReal x1402=((1.0)*gconst39);
IkReal x1403=((-1.0)*gconst39);
evalcond[0]=(new_r11*x1401);
evalcond[1]=((-1.0)*new_r10*x1400);
evalcond[2]=(x1400*x1403);
evalcond[3]=(x1401*x1403);
evalcond[4]=(gconst39+((new_r11*x1400)));
evalcond[5]=(((gconst39*x1400))+new_r11);
evalcond[6]=((((-1.0)*x1401*x1402))+new_r10);
evalcond[7]=(((new_r10*x1401))+(((-1.0)*x1402)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1404 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1404.valid){
continue;
}
CheckValue<IkReal> x1405=IKPowWithIntegerCheck(IKsign(gconst39),-1);
if(!x1405.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1404.value)+(((1.5707963267949)*(x1405.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1406=IKcos(j7);
IkReal x1407=IKsin(j7);
IkReal x1408=((1.0)*gconst39);
IkReal x1409=((-1.0)*gconst39);
evalcond[0]=(new_r11*x1407);
evalcond[1]=((-1.0)*new_r10*x1406);
evalcond[2]=(x1406*x1409);
evalcond[3]=(x1407*x1409);
evalcond[4]=(gconst39+((new_r11*x1406)));
evalcond[5]=(((gconst39*x1406))+new_r11);
evalcond[6]=((((-1.0)*x1407*x1408))+new_r10);
evalcond[7]=(((new_r10*x1407))+(((-1.0)*x1408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1410 = IKatan2WithCheck(IkReal((((gconst39*new_r11))+((gconst39*new_r00)))),IkReal(((((-1.0)*gconst39*new_r10))+((gconst39*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1410.valid){
continue;
}
CheckValue<IkReal> x1411=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1411.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1410.value)+(((1.5707963267949)*(x1411.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1412=IKsin(j7);
IkReal x1413=IKcos(j7);
IkReal x1414=((1.0)*gconst40);
IkReal x1415=(gconst39*x1413);
IkReal x1416=((1.0)*x1412);
IkReal x1417=(((x1413*x1414))+((gconst39*x1416)));
evalcond[0]=(gconst39+(((-1.0)*new_r01*x1416))+((new_r11*x1413)));
evalcond[1]=(((new_r00*x1412))+gconst40+(((-1.0)*new_r10*x1413)));
evalcond[2]=(((gconst40*x1412))+new_r00+(((-1.0)*x1415)));
evalcond[3]=((((-1.0)*x1412*x1414))+x1415+new_r11);
evalcond[4]=(((new_r00*x1413))+((new_r10*x1412))+(((-1.0)*gconst39)));
evalcond[5]=(((new_r01*x1413))+(((-1.0)*x1414))+((new_r11*x1412)));
evalcond[6]=((((-1.0)*x1417))+new_r01);
evalcond[7]=((((-1.0)*x1417))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1418=IKPowWithIntegerCheck(IKsign((((gconst40*new_r10))+(((-1.0)*gconst39*new_r00)))),-1);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419 = IKatan2WithCheck(IkReal((((new_r10*new_r11))+((gconst39*gconst40)))),IkReal((((new_r00*new_r11))+(gconst40*gconst40))),IKFAST_ATAN2_MAGTHRESH);
if(!x1419.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1418.value)))+(x1419.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1420=IKsin(j7);
IkReal x1421=IKcos(j7);
IkReal x1422=((1.0)*gconst40);
IkReal x1423=(gconst39*x1421);
IkReal x1424=((1.0)*x1420);
IkReal x1425=(((gconst39*x1424))+((x1421*x1422)));
evalcond[0]=((((-1.0)*new_r01*x1424))+gconst39+((new_r11*x1421)));
evalcond[1]=(gconst40+(((-1.0)*new_r10*x1421))+((new_r00*x1420)));
evalcond[2]=((((-1.0)*x1423))+((gconst40*x1420))+new_r00);
evalcond[3]=((((-1.0)*x1420*x1422))+x1423+new_r11);
evalcond[4]=(((new_r00*x1421))+((new_r10*x1420))+(((-1.0)*gconst39)));
evalcond[5]=(((new_r11*x1420))+((new_r01*x1421))+(((-1.0)*x1422)));
evalcond[6]=(new_r01+(((-1.0)*x1425)));
evalcond[7]=(new_r10+(((-1.0)*x1425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1426=IKPowWithIntegerCheck(IKsign((((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)))),-1);
if(!x1426.valid){
continue;
}
CheckValue<IkReal> x1427 = IKatan2WithCheck(IkReal((((gconst40*new_r11))+((gconst39*new_r10)))),IkReal((((gconst40*new_r01))+((gconst39*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1427.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1426.value)))+(x1427.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1428=IKsin(j7);
IkReal x1429=IKcos(j7);
IkReal x1430=((1.0)*gconst40);
IkReal x1431=(gconst39*x1429);
IkReal x1432=((1.0)*x1428);
IkReal x1433=(((x1429*x1430))+((gconst39*x1432)));
evalcond[0]=(gconst39+(((-1.0)*new_r01*x1432))+((new_r11*x1429)));
evalcond[1]=(gconst40+(((-1.0)*new_r10*x1429))+((new_r00*x1428)));
evalcond[2]=((((-1.0)*x1431))+((gconst40*x1428))+new_r00);
evalcond[3]=((((-1.0)*x1428*x1430))+x1431+new_r11);
evalcond[4]=(((new_r00*x1429))+((new_r10*x1428))+(((-1.0)*gconst39)));
evalcond[5]=((((-1.0)*x1430))+((new_r11*x1428))+((new_r01*x1429)));
evalcond[6]=((((-1.0)*x1433))+new_r01);
evalcond[7]=((((-1.0)*x1433))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1434=((-1.0)*new_r11);
IkReal x1436 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1436)==0){
continue;
}
IkReal x1435=pow(x1436,-0.5);
CheckValue<IkReal> x1437 = IKatan2WithCheck(IkReal(x1434),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1437.valid){
continue;
}
IkReal gconst41=((3.14159265358979)+(((-1.0)*(x1437.value))));
IkReal gconst42=(x1434*x1435);
IkReal gconst43=((-1.0)*new_r01*x1435);
CheckValue<IkReal> x1438 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1438.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1438.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1439=((-1.0)*new_r11);
CheckValue<IkReal> x1442 = IKatan2WithCheck(IkReal(x1439),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1442.valid){
continue;
}
IkReal x1440=((1.0)*(x1442.value));
IkReal x1441=x1435;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst42;
cj9=gconst43;
j9=((3.14159265)+(((-1.0)*x1440)));
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1440)));
IkReal gconst42=(x1439*x1441);
IkReal gconst43=((-1.0)*new_r01*x1441);
IkReal x1443=new_r01*new_r01;
IkReal x1444=(new_r00*new_r11);
IkReal x1445=((((-1.0)*x1444))+((new_r01*new_r10)));
IkReal x1446=x1435;
IkReal x1447=((1.0)*new_r11*x1446);
j7eval[0]=x1445;
j7eval[1]=IKsign(x1445);
j7eval[2]=((IKabs(((((-1.0)*new_r10*x1447))+(((-1.0)*new_r01*x1447)))))+(IKabs((((x1444*x1446))+((x1443*x1446))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1448=((-1.0)*new_r11);
CheckValue<IkReal> x1451 = IKatan2WithCheck(IkReal(x1448),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1451.valid){
continue;
}
IkReal x1449=((1.0)*(x1451.value));
IkReal x1450=x1435;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst42;
cj9=gconst43;
j9=((3.14159265)+(((-1.0)*x1449)));
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1449)));
IkReal gconst42=(x1448*x1450);
IkReal gconst43=((-1.0)*new_r01*x1450);
IkReal x1452=new_r11*new_r11;
IkReal x1453=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x1454=x1435;
IkReal x1455=(new_r11*x1454);
j7eval[0]=x1453;
j7eval[1]=IKsign(x1453);
j7eval[2]=((IKabs((((new_r10*x1455))+(((-1.0)*new_r01*x1455)))))+(IKabs(((((-1.0)*new_r00*x1455))+(((-1.0)*x1452*x1454))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1456=((1.0)*gconst43);
CheckValue<IkReal> x1457=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1456))+((gconst42*new_r00)))),-1);
if(!x1457.valid){
continue;
}
CheckValue<IkReal> x1458 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+(((-1.0)*gconst42*x1456)))),IkReal(((((-1.0)*gconst43*x1456))+(new_r00*new_r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x1458.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1457.value)))+(x1458.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1459=IKsin(j7);
IkReal x1460=IKcos(j7);
IkReal x1461=((1.0)*gconst43);
IkReal x1462=((1.0)*gconst42);
IkReal x1463=(((x1459*x1462))+((x1460*x1461)));
evalcond[0]=(gconst42+((new_r11*x1460))+(((-1.0)*new_r01*x1459)));
evalcond[1]=((((-1.0)*new_r10*x1460))+gconst43+((new_r00*x1459)));
evalcond[2]=(((gconst43*x1459))+(((-1.0)*x1460*x1462))+new_r00);
evalcond[3]=(((gconst42*x1460))+(((-1.0)*x1459*x1461))+new_r11);
evalcond[4]=(((new_r00*x1460))+(((-1.0)*x1462))+((new_r10*x1459)));
evalcond[5]=(((new_r01*x1460))+(((-1.0)*x1461))+((new_r11*x1459)));
evalcond[6]=((((-1.0)*x1463))+new_r01);
evalcond[7]=((((-1.0)*x1463))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1464 = IKatan2WithCheck(IkReal((((gconst42*new_r00))+((gconst42*new_r11)))),IkReal((((gconst42*new_r01))+(((-1.0)*gconst42*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1464.valid){
continue;
}
CheckValue<IkReal> x1465=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1465.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1464.value)+(((1.5707963267949)*(x1465.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1466=IKsin(j7);
IkReal x1467=IKcos(j7);
IkReal x1468=((1.0)*gconst43);
IkReal x1469=((1.0)*gconst42);
IkReal x1470=(((x1466*x1469))+((x1467*x1468)));
evalcond[0]=((((-1.0)*new_r01*x1466))+gconst42+((new_r11*x1467)));
evalcond[1]=((((-1.0)*new_r10*x1467))+((new_r00*x1466))+gconst43);
evalcond[2]=(((gconst43*x1466))+(((-1.0)*x1467*x1469))+new_r00);
evalcond[3]=(((gconst42*x1467))+(((-1.0)*x1466*x1468))+new_r11);
evalcond[4]=(((new_r00*x1467))+(((-1.0)*x1469))+((new_r10*x1466)));
evalcond[5]=(((new_r01*x1467))+(((-1.0)*x1468))+((new_r11*x1466)));
evalcond[6]=((((-1.0)*x1470))+new_r01);
evalcond[7]=((((-1.0)*x1470))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1471 = IKatan2WithCheck(IkReal((((gconst43*new_r11))+((gconst42*new_r10)))),IkReal((((gconst42*new_r00))+((gconst43*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1471.valid){
continue;
}
CheckValue<IkReal> x1472=IKPowWithIntegerCheck(IKsign((((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)))),-1);
if(!x1472.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1471.value)+(((1.5707963267949)*(x1472.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1473=IKsin(j7);
IkReal x1474=IKcos(j7);
IkReal x1475=((1.0)*gconst43);
IkReal x1476=((1.0)*gconst42);
IkReal x1477=(((x1474*x1475))+((x1473*x1476)));
evalcond[0]=(((new_r11*x1474))+gconst42+(((-1.0)*new_r01*x1473)));
evalcond[1]=(gconst43+(((-1.0)*new_r10*x1474))+((new_r00*x1473)));
evalcond[2]=((((-1.0)*x1474*x1476))+((gconst43*x1473))+new_r00);
evalcond[3]=(((gconst42*x1474))+new_r11+(((-1.0)*x1473*x1475)));
evalcond[4]=(((new_r10*x1473))+((new_r00*x1474))+(((-1.0)*x1476)));
evalcond[5]=(((new_r11*x1473))+((new_r01*x1474))+(((-1.0)*x1475)));
evalcond[6]=((((-1.0)*x1477))+new_r01);
evalcond[7]=((((-1.0)*x1477))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1480 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1480)==0){
continue;
}
IkReal x1478=pow(x1480,-0.5);
IkReal x1479=((-1.0)*x1478);
CheckValue<IkReal> x1481 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1481.valid){
continue;
}
IkReal gconst44=((-1.0)*(x1481.value));
IkReal gconst45=(new_r11*x1479);
IkReal gconst46=(new_r01*x1479);
CheckValue<IkReal> x1482 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1482.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1482.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x1486 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1486.valid){
continue;
}
IkReal x1483=((-1.0)*(x1486.value));
IkReal x1484=x1478;
IkReal x1485=((-1.0)*x1484);
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1483;
IkReal gconst44=x1483;
IkReal gconst45=(new_r11*x1485);
IkReal gconst46=(new_r01*x1485);
IkReal x1487=new_r01*new_r01;
IkReal x1488=(new_r00*new_r11);
IkReal x1489=(((new_r01*new_r10))+(((-1.0)*x1488)));
IkReal x1490=x1478;
IkReal x1491=((1.0)*new_r11*x1490);
j7eval[0]=x1489;
j7eval[1]=IKsign(x1489);
j7eval[2]=((IKabs((((x1487*x1490))+((x1488*x1490)))))+(IKabs(((((-1.0)*new_r01*x1491))+(((-1.0)*new_r10*x1491))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1495 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1495.valid){
continue;
}
IkReal x1492=((-1.0)*(x1495.value));
IkReal x1493=x1478;
IkReal x1494=((-1.0)*x1493);
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1492;
IkReal gconst44=x1492;
IkReal gconst45=(new_r11*x1494);
IkReal gconst46=(new_r01*x1494);
IkReal x1496=new_r11*new_r11;
IkReal x1497=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x1498=x1478;
IkReal x1499=(new_r11*x1498);
j7eval[0]=x1497;
j7eval[1]=((IKabs(((((-1.0)*new_r00*x1499))+(((-1.0)*x1496*x1498)))))+(IKabs(((((-1.0)*new_r01*x1499))+((new_r10*x1499))))));
j7eval[2]=IKsign(x1497);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1503 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1503.valid){
continue;
}
IkReal x1500=((-1.0)*(x1503.value));
IkReal x1501=x1478;
IkReal x1502=((-1.0)*x1501);
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1500;
IkReal gconst44=x1500;
IkReal gconst45=(new_r11*x1502);
IkReal gconst46=(new_r01*x1502);
IkReal x1504=new_r01*new_r01;
CheckValue<IkReal> x1507=IKPowWithIntegerCheck(((new_r11*new_r11)+x1504),-1);
if(!x1507.valid){
continue;
}
IkReal x1505=x1507.value;
IkReal x1506=((1.0)*x1505);
j7eval[0]=((IKabs((((new_r00*new_r10))+(((-1.0)*new_r01*new_r11*x1506)))))+(IKabs(((((-1.0)*x1504*x1506))+(new_r00*new_r00)))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst46;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1508=((-1.0)*new_r01);
CheckValue<IkReal> x1510 = IKatan2WithCheck(IkReal(new_r11),IkReal(x1508),IKFAST_ATAN2_MAGTHRESH);
if(!x1510.valid){
continue;
}
IkReal x1509=((-1.0)*(x1510.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1509;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst44=x1509;
IkReal gconst45=((-1.0)*new_r11);
IkReal gconst46=x1508;
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1511=((-1.0)*new_r01);
CheckValue<IkReal> x1513 = IKatan2WithCheck(IkReal(new_r11),IkReal(x1511),IKFAST_ATAN2_MAGTHRESH);
if(!x1513.valid){
continue;
}
IkReal x1512=((-1.0)*(x1513.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1512;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst44=x1512;
IkReal gconst45=((-1.0)*new_r11);
IkReal gconst46=x1511;
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1514=((-1.0)*new_r01);
CheckValue<IkReal> x1516 = IKatan2WithCheck(IkReal(new_r11),IkReal(x1514),IKFAST_ATAN2_MAGTHRESH);
if(!x1516.valid){
continue;
}
IkReal x1515=((-1.0)*(x1516.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1515;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst44=x1515;
IkReal gconst45=((-1.0)*new_r11);
IkReal gconst46=x1514;
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1517 = IKatan2WithCheck(IkReal((gconst46*new_r11)),IkReal(((-1.0)*gconst45*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1517.valid){
continue;
}
CheckValue<IkReal> x1518=IKPowWithIntegerCheck(IKsign(((gconst45*gconst45)+(gconst46*gconst46))),-1);
if(!x1518.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1517.value)+(((1.5707963267949)*(x1518.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1519=IKcos(j7);
IkReal x1520=IKsin(j7);
IkReal x1521=((1.0)*gconst46);
IkReal x1522=(gconst45*x1519);
IkReal x1523=((1.0)*x1520);
IkReal x1524=(((gconst45*x1523))+((x1519*x1521)));
evalcond[0]=(((gconst46*x1520))+(((-1.0)*x1522)));
evalcond[1]=(gconst45+(((-1.0)*new_r01*x1523))+((new_r11*x1519)));
evalcond[2]=(x1522+new_r11+(((-1.0)*x1520*x1521)));
evalcond[3]=((-1.0)*x1524);
evalcond[4]=((((-1.0)*x1521))+((new_r01*x1519))+((new_r11*x1520)));
evalcond[5]=((((-1.0)*x1524))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1525 = IKatan2WithCheck(IkReal((gconst45*new_r01)),IkReal((gconst46*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1525.valid){
continue;
}
CheckValue<IkReal> x1526=IKPowWithIntegerCheck(IKsign(((gconst45*gconst45)+(gconst46*gconst46))),-1);
if(!x1526.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1525.value)+(((1.5707963267949)*(x1526.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1527=IKcos(j7);
IkReal x1528=IKsin(j7);
IkReal x1529=((1.0)*gconst46);
IkReal x1530=(gconst45*x1527);
IkReal x1531=((1.0)*x1528);
IkReal x1532=(((gconst45*x1531))+((x1527*x1529)));
evalcond[0]=((((-1.0)*x1530))+((gconst46*x1528)));
evalcond[1]=(gconst45+(((-1.0)*new_r01*x1531))+((new_r11*x1527)));
evalcond[2]=(x1530+(((-1.0)*x1528*x1529))+new_r11);
evalcond[3]=((-1.0)*x1532);
evalcond[4]=((((-1.0)*x1529))+((new_r01*x1527))+((new_r11*x1528)));
evalcond[5]=((((-1.0)*x1532))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1533=IKPowWithIntegerCheck(IKsign((((gconst46*new_r01))+((gconst45*new_r11)))),-1);
if(!x1533.valid){
continue;
}
CheckValue<IkReal> x1534 = IKatan2WithCheck(IkReal((gconst45*gconst46)),IkReal(gconst46*gconst46),IKFAST_ATAN2_MAGTHRESH);
if(!x1534.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1533.value)))+(x1534.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1535=IKcos(j7);
IkReal x1536=IKsin(j7);
IkReal x1537=((1.0)*gconst46);
IkReal x1538=(gconst45*x1535);
IkReal x1539=((1.0)*x1536);
IkReal x1540=(((gconst45*x1539))+((x1535*x1537)));
evalcond[0]=((((-1.0)*x1538))+((gconst46*x1536)));
evalcond[1]=(gconst45+(((-1.0)*new_r01*x1539))+((new_r11*x1535)));
evalcond[2]=(x1538+new_r11+(((-1.0)*x1536*x1537)));
evalcond[3]=((-1.0)*x1540);
evalcond[4]=((((-1.0)*x1537))+((new_r01*x1535))+((new_r11*x1536)));
evalcond[5]=(new_r01+(((-1.0)*x1540)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1542 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1542.valid){
continue;
}
IkReal x1541=((-1.0)*(x1542.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1541;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst44=x1541;
IkReal x1543 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1543)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x1543,-0.5)));
IkReal gconst46=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1545 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1545.valid){
continue;
}
IkReal x1544=((-1.0)*(x1545.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1544;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst44=x1544;
IkReal x1546 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1546)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x1546,-0.5)));
IkReal gconst46=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x1548 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1548.valid){
continue;
}
IkReal x1547=((-1.0)*(x1548.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1547;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst44=x1547;
IkReal x1549 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1549)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x1549,-0.5)));
IkReal gconst46=0;
j7eval[0]=new_r10;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1550=IKPowWithIntegerCheck(new_r10,-1);
if(!x1550.valid){
continue;
}
CheckValue<IkReal> x1551=IKPowWithIntegerCheck(new_r11,-1);
if(!x1551.valid){
continue;
}
if( IKabs((gconst45*(x1550.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst45*(x1551.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst45*(x1550.value)))+IKsqr(((-1.0)*gconst45*(x1551.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst45*(x1550.value)), ((-1.0)*gconst45*(x1551.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1552=IKcos(j7);
IkReal x1553=IKsin(j7);
IkReal x1554=((1.0)*gconst45);
IkReal x1555=(gconst45*x1552);
evalcond[0]=(new_r11*x1553);
evalcond[1]=((-1.0)*new_r10*x1552);
evalcond[2]=((-1.0)*x1555);
evalcond[3]=((-1.0)*gconst45*x1553);
evalcond[4]=(gconst45+((new_r11*x1552)));
evalcond[5]=(x1555+new_r11);
evalcond[6]=((((-1.0)*x1553*x1554))+new_r10);
evalcond[7]=(((new_r10*x1553))+(((-1.0)*x1554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1556=IKPowWithIntegerCheck(gconst45,-1);
if(!x1556.valid){
continue;
}
CheckValue<IkReal> x1557=IKPowWithIntegerCheck(new_r11,-1);
if(!x1557.valid){
continue;
}
if( IKabs((new_r10*(x1556.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst45*(x1557.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x1556.value)))+IKsqr(((-1.0)*gconst45*(x1557.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x1556.value)), ((-1.0)*gconst45*(x1557.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1558=IKcos(j7);
IkReal x1559=IKsin(j7);
IkReal x1560=((1.0)*gconst45);
IkReal x1561=(gconst45*x1558);
evalcond[0]=(new_r11*x1559);
evalcond[1]=((-1.0)*new_r10*x1558);
evalcond[2]=((-1.0)*x1561);
evalcond[3]=((-1.0)*gconst45*x1559);
evalcond[4]=(gconst45+((new_r11*x1558)));
evalcond[5]=(x1561+new_r11);
evalcond[6]=((((-1.0)*x1559*x1560))+new_r10);
evalcond[7]=(((new_r10*x1559))+(((-1.0)*x1560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1562 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1562.valid){
continue;
}
CheckValue<IkReal> x1563=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x1563.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1562.value)+(((1.5707963267949)*(x1563.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1564=IKcos(j7);
IkReal x1565=IKsin(j7);
IkReal x1566=((1.0)*gconst45);
IkReal x1567=(gconst45*x1564);
evalcond[0]=(new_r11*x1565);
evalcond[1]=((-1.0)*new_r10*x1564);
evalcond[2]=((-1.0)*x1567);
evalcond[3]=((-1.0)*gconst45*x1565);
evalcond[4]=(((new_r11*x1564))+gconst45);
evalcond[5]=(x1567+new_r11);
evalcond[6]=((((-1.0)*x1565*x1566))+new_r10);
evalcond[7]=(((new_r10*x1565))+(((-1.0)*x1566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x1568=((-1.0)*new_r01);
CheckValue<IkReal> x1570 = IKatan2WithCheck(IkReal(0),IkReal(x1568),IKFAST_ATAN2_MAGTHRESH);
if(!x1570.valid){
continue;
}
IkReal x1569=((-1.0)*(x1570.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1569;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst44=x1569;
IkReal gconst45=0;
IkReal x1571 = new_r01*new_r01;
if(IKabs(x1571)==0){
continue;
}
IkReal gconst46=(x1568*(pow(x1571,-0.5)));
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1572=((-1.0)*new_r01);
CheckValue<IkReal> x1574 = IKatan2WithCheck(IkReal(0),IkReal(x1572),IKFAST_ATAN2_MAGTHRESH);
if(!x1574.valid){
continue;
}
IkReal x1573=((-1.0)*(x1574.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1573;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst44=x1573;
IkReal gconst45=0;
IkReal x1575 = new_r01*new_r01;
if(IKabs(x1575)==0){
continue;
}
IkReal gconst46=(x1572*(pow(x1575,-0.5)));
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1576=((-1.0)*new_r01);
CheckValue<IkReal> x1578 = IKatan2WithCheck(IkReal(0),IkReal(x1576),IKFAST_ATAN2_MAGTHRESH);
if(!x1578.valid){
continue;
}
IkReal x1577=((-1.0)*(x1578.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1577;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst44=x1577;
IkReal gconst45=0;
IkReal x1579 = new_r01*new_r01;
if(IKabs(x1579)==0){
continue;
}
IkReal gconst46=(x1576*(pow(x1579,-0.5)));
j7eval[0]=new_r00;
j7eval[1]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1580=IKPowWithIntegerCheck(new_r00,-1);
if(!x1580.valid){
continue;
}
CheckValue<IkReal> x1581=IKPowWithIntegerCheck(new_r01,-1);
if(!x1581.valid){
continue;
}
if( IKabs(((-1.0)*gconst46*(x1580.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst46*(x1581.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst46*(x1580.value)))+IKsqr((gconst46*(x1581.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst46*(x1580.value)), (gconst46*(x1581.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1582=IKsin(j7);
IkReal x1583=IKcos(j7);
IkReal x1584=((1.0)*gconst46);
IkReal x1585=((-1.0)*x1582);
evalcond[0]=(new_r00*x1583);
evalcond[1]=(new_r01*x1585);
evalcond[2]=(gconst46*x1585);
evalcond[3]=((-1.0)*gconst46*x1583);
evalcond[4]=(((new_r00*x1582))+gconst46);
evalcond[5]=(((gconst46*x1582))+new_r00);
evalcond[6]=(new_r01+(((-1.0)*x1583*x1584)));
evalcond[7]=((((-1.0)*x1584))+((new_r01*x1583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1586=IKPowWithIntegerCheck(new_r00,-1);
if(!x1586.valid){
continue;
}
CheckValue<IkReal> x1587=IKPowWithIntegerCheck(gconst46,-1);
if(!x1587.valid){
continue;
}
if( IKabs(((-1.0)*gconst46*(x1586.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1587.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst46*(x1586.value)))+IKsqr((new_r01*(x1587.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst46*(x1586.value)), (new_r01*(x1587.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1588=IKsin(j7);
IkReal x1589=IKcos(j7);
IkReal x1590=((1.0)*gconst46);
IkReal x1591=((-1.0)*x1588);
evalcond[0]=(new_r00*x1589);
evalcond[1]=(new_r01*x1591);
evalcond[2]=(gconst46*x1591);
evalcond[3]=((-1.0)*gconst46*x1589);
evalcond[4]=(((new_r00*x1588))+gconst46);
evalcond[5]=(((gconst46*x1588))+new_r00);
evalcond[6]=((((-1.0)*x1589*x1590))+new_r01);
evalcond[7]=((((-1.0)*x1590))+((new_r01*x1589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1592 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1592.valid){
continue;
}
CheckValue<IkReal> x1593=IKPowWithIntegerCheck(IKsign(gconst46),-1);
if(!x1593.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1592.value)+(((1.5707963267949)*(x1593.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1594=IKsin(j7);
IkReal x1595=IKcos(j7);
IkReal x1596=((1.0)*gconst46);
IkReal x1597=((-1.0)*x1594);
evalcond[0]=(new_r00*x1595);
evalcond[1]=(new_r01*x1597);
evalcond[2]=(gconst46*x1597);
evalcond[3]=((-1.0)*gconst46*x1595);
evalcond[4]=(((new_r00*x1594))+gconst46);
evalcond[5]=(((gconst46*x1594))+new_r00);
evalcond[6]=((((-1.0)*x1595*x1596))+new_r01);
evalcond[7]=((((-1.0)*x1596))+((new_r01*x1595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1598=((1.0)*gconst46);
CheckValue<IkReal> x1599 = IKatan2WithCheck(IkReal(((((-1.0)*gconst45*x1598))+((new_r00*new_r10)))),IkReal(((((-1.0)*gconst46*x1598))+(new_r00*new_r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x1599.valid){
continue;
}
CheckValue<IkReal> x1600=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1598))+((gconst45*new_r00)))),-1);
if(!x1600.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1599.value)+(((1.5707963267949)*(x1600.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1601=IKsin(j7);
IkReal x1602=IKcos(j7);
IkReal x1603=((1.0)*gconst45);
IkReal x1604=(gconst45*x1602);
IkReal x1605=((1.0)*x1601);
IkReal x1606=((1.0)*x1602);
IkReal x1607=(((x1601*x1603))+((gconst46*x1606)));
evalcond[0]=((((-1.0)*new_r01*x1605))+gconst45+((new_r11*x1602)));
evalcond[1]=((((-1.0)*new_r10*x1606))+gconst46+((new_r00*x1601)));
evalcond[2]=(new_r00+(((-1.0)*x1602*x1603))+((gconst46*x1601)));
evalcond[3]=((((-1.0)*gconst46*x1605))+x1604+new_r11);
evalcond[4]=((((-1.0)*x1603))+((new_r10*x1601))+((new_r00*x1602)));
evalcond[5]=((((-1.0)*gconst46))+((new_r11*x1601))+((new_r01*x1602)));
evalcond[6]=((((-1.0)*x1607))+new_r01);
evalcond[7]=((((-1.0)*x1607))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1608 = IKatan2WithCheck(IkReal((((gconst45*new_r11))+((gconst45*new_r00)))),IkReal(((((-1.0)*gconst45*new_r10))+((gconst45*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1608.valid){
continue;
}
CheckValue<IkReal> x1609=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1609.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1608.value)+(((1.5707963267949)*(x1609.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1610=IKsin(j7);
IkReal x1611=IKcos(j7);
IkReal x1612=((1.0)*gconst45);
IkReal x1613=(gconst45*x1611);
IkReal x1614=((1.0)*x1610);
IkReal x1615=((1.0)*x1611);
IkReal x1616=(((gconst46*x1615))+((x1610*x1612)));
evalcond[0]=((((-1.0)*new_r01*x1614))+((new_r11*x1611))+gconst45);
evalcond[1]=((((-1.0)*new_r10*x1615))+gconst46+((new_r00*x1610)));
evalcond[2]=((((-1.0)*x1611*x1612))+((gconst46*x1610))+new_r00);
evalcond[3]=(x1613+(((-1.0)*gconst46*x1614))+new_r11);
evalcond[4]=(((new_r10*x1610))+(((-1.0)*x1612))+((new_r00*x1611)));
evalcond[5]=((((-1.0)*gconst46))+((new_r11*x1610))+((new_r01*x1611)));
evalcond[6]=((((-1.0)*x1616))+new_r01);
evalcond[7]=((((-1.0)*x1616))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1617=IKPowWithIntegerCheck(IKsign((((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)))),-1);
if(!x1617.valid){
continue;
}
CheckValue<IkReal> x1618 = IKatan2WithCheck(IkReal((((gconst46*new_r11))+((gconst45*new_r10)))),IkReal((((gconst46*new_r01))+((gconst45*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1618.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1617.value)))+(x1618.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1619=IKsin(j7);
IkReal x1620=IKcos(j7);
IkReal x1621=((1.0)*gconst45);
IkReal x1622=(gconst45*x1620);
IkReal x1623=((1.0)*x1619);
IkReal x1624=((1.0)*x1620);
IkReal x1625=(((gconst46*x1624))+((x1619*x1621)));
evalcond[0]=(((new_r11*x1620))+gconst45+(((-1.0)*new_r01*x1623)));
evalcond[1]=((((-1.0)*new_r10*x1624))+gconst46+((new_r00*x1619)));
evalcond[2]=((((-1.0)*x1620*x1621))+((gconst46*x1619))+new_r00);
evalcond[3]=((((-1.0)*gconst46*x1623))+x1622+new_r11);
evalcond[4]=(((new_r10*x1619))+(((-1.0)*x1621))+((new_r00*x1620)));
evalcond[5]=((((-1.0)*gconst46))+((new_r11*x1619))+((new_r01*x1620)));
evalcond[6]=((((-1.0)*x1625))+new_r01);
evalcond[7]=((((-1.0)*x1625))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1628 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1628)==0){
continue;
}
IkReal x1626=pow(x1628,-0.5);
IkReal x1627=((1.0)*x1626);
CheckValue<IkReal> x1629 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1629.valid){
continue;
}
IkReal gconst47=((3.14159265358979)+(((-1.0)*(x1629.value))));
IkReal gconst48=(new_r11*x1627);
IkReal gconst49=(new_r01*x1627);
CheckValue<IkReal> x1630 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1630.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1630.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x1634 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1634.valid){
continue;
}
IkReal x1631=((1.0)*(x1634.value));
IkReal x1632=x1626;
IkReal x1633=((1.0)*x1632);
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1631)));
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1631)));
IkReal gconst48=(new_r11*x1633);
IkReal gconst49=(new_r01*x1633);
IkReal x1635=new_r01*new_r01;
IkReal x1636=(((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)));
IkReal x1637=x1626;
IkReal x1638=(new_r11*x1637);
j7eval[0]=x1636;
j7eval[1]=IKsign(x1636);
j7eval[2]=((IKabs((((x1635*x1637))+((new_r00*x1638)))))+(IKabs((((new_r10*x1638))+((new_r01*x1638))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1642 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1642.valid){
continue;
}
IkReal x1639=((1.0)*(x1642.value));
IkReal x1640=x1626;
IkReal x1641=((1.0)*x1640);
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1639)));
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1639)));
IkReal gconst48=(new_r11*x1641);
IkReal gconst49=(new_r01*x1641);
IkReal x1643=new_r01*new_r01;
IkReal x1644=new_r11*new_r11*new_r11;
CheckValue<IkReal> x1648=IKPowWithIntegerCheck((x1643+(new_r11*new_r11)),-1);
if(!x1648.valid){
continue;
}
IkReal x1645=x1648.value;
IkReal x1646=(x1643*x1645);
IkReal x1647=(x1644*x1645);
j7eval[0]=((IKabs((((new_r10*x1647))+((new_r10*new_r11*x1646))+((new_r01*new_r11*x1645)))))+(IKabs((x1646+((new_r00*new_r11*x1646))+((new_r00*x1647))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1652 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1652.valid){
continue;
}
IkReal x1649=((1.0)*(x1652.value));
IkReal x1650=x1626;
IkReal x1651=((1.0)*x1650);
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1649)));
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1649)));
IkReal gconst48=(new_r11*x1651);
IkReal gconst49=(new_r01*x1651);
IkReal x1653=new_r11*new_r11;
IkReal x1654=(new_r10*new_r11);
IkReal x1655=(x1654+((new_r00*new_r01)));
IkReal x1656=x1626;
IkReal x1657=(new_r11*x1656);
j7eval[0]=x1655;
j7eval[1]=((IKabs(((((-1.0)*x1654*x1656))+((new_r01*x1657)))))+(IKabs((((new_r00*x1657))+((x1653*x1656))))));
j7eval[2]=IKsign(x1655);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1659 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1659.valid){
continue;
}
IkReal x1658=((1.0)*(x1659.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1658)));
new_r11=0;
new_r00=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1658)));
IkReal gconst48=0;
IkReal x1660 = new_r01*new_r01;
if(IKabs(x1660)==0){
continue;
}
IkReal gconst49=((1.0)*new_r01*(pow(x1660,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1661=IKPowWithIntegerCheck(gconst49,-1);
if(!x1661.valid){
continue;
}
cj7array[0]=(new_r01*(x1661.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1662=IKsin(j7);
IkReal x1663=IKcos(j7);
IkReal x1664=((1.0)*x1663);
evalcond[0]=(new_r10*x1662);
evalcond[1]=(gconst49*x1662);
evalcond[2]=((-1.0)*new_r01*x1662);
evalcond[3]=(gconst49+(((-1.0)*new_r10*x1664)));
evalcond[4]=((((-1.0)*gconst49*x1664))+new_r10);
evalcond[5]=((((-1.0)*gconst49))+((new_r01*x1663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1665=IKPowWithIntegerCheck(new_r10,-1);
if(!x1665.valid){
continue;
}
cj7array[0]=(gconst49*(x1665.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1666=IKsin(j7);
IkReal x1667=IKcos(j7);
IkReal x1668=((1.0)*gconst49);
IkReal x1669=(x1667*x1668);
evalcond[0]=(new_r10*x1666);
evalcond[1]=(gconst49*x1666);
evalcond[2]=((-1.0)*new_r01*x1666);
evalcond[3]=((((-1.0)*x1669))+new_r01);
evalcond[4]=((((-1.0)*x1669))+new_r10);
evalcond[5]=(((new_r01*x1667))+(((-1.0)*x1668)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst49;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[4];
CheckValue<IkReal> x1671 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1671.valid){
continue;
}
IkReal x1670=((1.0)*(x1671.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1670)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1670)));
IkReal gconst48=((1.0)*new_r11);
IkReal gconst49=((1.0)*new_r01);
j7eval[0]=1.0;
j7eval[1]=new_r01;
j7eval[2]=1.0;
j7eval[3]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal j7eval[4];
CheckValue<IkReal> x1673 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1673.valid){
continue;
}
IkReal x1672=((1.0)*(x1673.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1672)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1672)));
IkReal gconst48=((1.0)*new_r11);
IkReal gconst49=((1.0)*new_r01);
j7eval[0]=1.0;
j7eval[1]=new_r01;
j7eval[2]=1.0;
j7eval[3]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
IkReal x1674=((1.0)*(x1675.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1674)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1674)));
IkReal gconst48=((1.0)*new_r11);
IkReal gconst49=((1.0)*new_r01);
j7eval[0]=1.0;
j7eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1676 = IKatan2WithCheck(IkReal((gconst49*new_r11)),IkReal(((-1.0)*gconst48*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1676.valid){
continue;
}
CheckValue<IkReal> x1677=IKPowWithIntegerCheck(IKsign(((gconst48*gconst48)+(gconst49*gconst49))),-1);
if(!x1677.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1676.value)+(((1.5707963267949)*(x1677.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1678=IKcos(j7);
IkReal x1679=IKsin(j7);
IkReal x1680=((1.0)*x1679);
IkReal x1681=((1.0)*x1678);
IkReal x1682=(((gconst48*x1680))+((gconst49*x1681)));
evalcond[0]=(((gconst49*x1679))+(((-1.0)*gconst48*x1681)));
evalcond[1]=(gconst48+((new_r11*x1678))+(((-1.0)*new_r01*x1680)));
evalcond[2]=(((gconst48*x1678))+new_r11+(((-1.0)*gconst49*x1680)));
evalcond[3]=((-1.0)*x1682);
evalcond[4]=((((-1.0)*gconst49))+((new_r01*x1678))+((new_r11*x1679)));
evalcond[5]=((((-1.0)*x1682))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1683=IKPowWithIntegerCheck(IKsign(((gconst48*gconst48)+(gconst49*gconst49))),-1);
if(!x1683.valid){
continue;
}
CheckValue<IkReal> x1684 = IKatan2WithCheck(IkReal((gconst48*new_r01)),IkReal((gconst49*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1684.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1683.value)))+(x1684.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1685=IKcos(j7);
IkReal x1686=IKsin(j7);
IkReal x1687=((1.0)*x1686);
IkReal x1688=((1.0)*x1685);
IkReal x1689=(((gconst48*x1687))+((gconst49*x1688)));
evalcond[0]=((((-1.0)*gconst48*x1688))+((gconst49*x1686)));
evalcond[1]=(gconst48+((new_r11*x1685))+(((-1.0)*new_r01*x1687)));
evalcond[2]=(new_r11+(((-1.0)*gconst49*x1687))+((gconst48*x1685)));
evalcond[3]=((-1.0)*x1689);
evalcond[4]=((((-1.0)*gconst49))+((new_r11*x1686))+((new_r01*x1685)));
evalcond[5]=((((-1.0)*x1689))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1690 = IKatan2WithCheck(IkReal((gconst48*gconst49)),IkReal(gconst49*gconst49),IKFAST_ATAN2_MAGTHRESH);
if(!x1690.valid){
continue;
}
CheckValue<IkReal> x1691=IKPowWithIntegerCheck(IKsign((((gconst49*new_r01))+((gconst48*new_r11)))),-1);
if(!x1691.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1690.value)+(((1.5707963267949)*(x1691.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1692=IKcos(j7);
IkReal x1693=IKsin(j7);
IkReal x1694=((1.0)*x1693);
IkReal x1695=((1.0)*x1692);
IkReal x1696=(((gconst49*x1695))+((gconst48*x1694)));
evalcond[0]=(((gconst49*x1693))+(((-1.0)*gconst48*x1695)));
evalcond[1]=(((new_r11*x1692))+gconst48+(((-1.0)*new_r01*x1694)));
evalcond[2]=(((gconst48*x1692))+new_r11+(((-1.0)*gconst49*x1694)));
evalcond[3]=((-1.0)*x1696);
evalcond[4]=((((-1.0)*gconst49))+((new_r11*x1693))+((new_r01*x1692)));
evalcond[5]=((((-1.0)*x1696))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1697=IKPowWithIntegerCheck(gconst48,-1);
if(!x1697.valid){
continue;
}
cj7array[0]=(new_r00*(x1697.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1698=IKsin(j7);
IkReal x1699=IKcos(j7);
evalcond[0]=(new_r00*x1698);
evalcond[1]=(new_r11*x1698);
evalcond[2]=((-1.0)*gconst48*x1698);
evalcond[3]=(((new_r11*x1699))+gconst48);
evalcond[4]=(((gconst48*x1699))+new_r11);
evalcond[5]=((((-1.0)*gconst48))+((new_r00*x1699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1701 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1701.valid){
continue;
}
IkReal x1700=((1.0)*(x1701.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1700)));
new_r11=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1700)));
IkReal gconst48=0;
IkReal x1702 = new_r01*new_r01;
if(IKabs(x1702)==0){
continue;
}
IkReal gconst49=((1.0)*new_r01*(pow(x1702,-0.5)));
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1704 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1704.valid){
continue;
}
IkReal x1703=((1.0)*(x1704.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1703)));
new_r11=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1703)));
IkReal gconst48=0;
IkReal x1705 = new_r01*new_r01;
if(IKabs(x1705)==0){
continue;
}
IkReal gconst49=((1.0)*new_r01*(pow(x1705,-0.5)));
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1707 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1707.valid){
continue;
}
IkReal x1706=((1.0)*(x1707.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1706)));
new_r11=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1706)));
IkReal gconst48=0;
IkReal x1708 = new_r01*new_r01;
if(IKabs(x1708)==0){
continue;
}
IkReal gconst49=((1.0)*new_r01*(pow(x1708,-0.5)));
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1709=IKPowWithIntegerCheck(gconst49,-1);
if(!x1709.valid){
continue;
}
CheckValue<IkReal> x1710=IKPowWithIntegerCheck(new_r01,-1);
if(!x1710.valid){
continue;
}
if( IKabs(((-1.0)*new_r00*(x1709.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst49*(x1710.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00*(x1709.value)))+IKsqr((gconst49*(x1710.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r00*(x1709.value)), (gconst49*(x1710.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1711=IKsin(j7);
IkReal x1712=IKcos(j7);
IkReal x1713=((1.0)*x1712);
IkReal x1714=(gconst49*x1713);
IkReal x1715=((-1.0)*x1711);
evalcond[0]=(new_r01*x1715);
evalcond[1]=(gconst49*x1715);
evalcond[2]=(((gconst49*x1711))+new_r00);
evalcond[3]=((((-1.0)*x1714))+new_r01);
evalcond[4]=((((-1.0)*x1714))+new_r10);
evalcond[5]=((((-1.0)*gconst49))+((new_r01*x1712)));
evalcond[6]=(((new_r10*x1711))+((new_r00*x1712)));
evalcond[7]=(gconst49+((new_r00*x1711))+(((-1.0)*new_r10*x1713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1716=IKPowWithIntegerCheck(IKsign(gconst49),-1);
if(!x1716.valid){
continue;
}
CheckValue<IkReal> x1717 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1717.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1716.value)))+(x1717.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1718=IKsin(j7);
IkReal x1719=IKcos(j7);
IkReal x1720=((1.0)*x1719);
IkReal x1721=(gconst49*x1720);
IkReal x1722=((-1.0)*x1718);
evalcond[0]=(new_r01*x1722);
evalcond[1]=(gconst49*x1722);
evalcond[2]=(((gconst49*x1718))+new_r00);
evalcond[3]=(new_r01+(((-1.0)*x1721)));
evalcond[4]=(new_r10+(((-1.0)*x1721)));
evalcond[5]=((((-1.0)*gconst49))+((new_r01*x1719)));
evalcond[6]=(((new_r10*x1718))+((new_r00*x1719)));
evalcond[7]=((((-1.0)*new_r10*x1720))+gconst49+((new_r00*x1718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1723 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1723.valid){
continue;
}
CheckValue<IkReal> x1724=IKPowWithIntegerCheck(IKsign(gconst49),-1);
if(!x1724.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1723.value)+(((1.5707963267949)*(x1724.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1725=IKsin(j7);
IkReal x1726=IKcos(j7);
IkReal x1727=((1.0)*x1726);
IkReal x1728=(gconst49*x1727);
IkReal x1729=((-1.0)*x1725);
evalcond[0]=(new_r01*x1729);
evalcond[1]=(gconst49*x1729);
evalcond[2]=(((gconst49*x1725))+new_r00);
evalcond[3]=(new_r01+(((-1.0)*x1728)));
evalcond[4]=(new_r10+(((-1.0)*x1728)));
evalcond[5]=((((-1.0)*gconst49))+((new_r01*x1726)));
evalcond[6]=(((new_r10*x1725))+((new_r00*x1726)));
evalcond[7]=((((-1.0)*new_r10*x1727))+gconst49+((new_r00*x1725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1731 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1731.valid){
continue;
}
IkReal x1730=((1.0)*(x1731.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1730)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1730)));
IkReal x1732 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1732)==0){
continue;
}
IkReal gconst48=((1.0)*new_r11*(pow(x1732,-0.5)));
IkReal gconst49=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1734 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1734.valid){
continue;
}
IkReal x1733=((1.0)*(x1734.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1733)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1733)));
IkReal x1735 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1735)==0){
continue;
}
IkReal gconst48=((1.0)*new_r11*(pow(x1735,-0.5)));
IkReal gconst49=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x1737 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1737.valid){
continue;
}
IkReal x1736=((1.0)*(x1737.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1736)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1736)));
IkReal x1738 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1738)==0){
continue;
}
IkReal gconst48=((1.0)*new_r11*(pow(x1738,-0.5)));
IkReal gconst49=0;
j7eval[0]=new_r10;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1739=IKPowWithIntegerCheck(new_r10,-1);
if(!x1739.valid){
continue;
}
CheckValue<IkReal> x1740=IKPowWithIntegerCheck(new_r11,-1);
if(!x1740.valid){
continue;
}
if( IKabs((gconst48*(x1739.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst48*(x1740.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst48*(x1739.value)))+IKsqr(((-1.0)*gconst48*(x1740.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst48*(x1739.value)), ((-1.0)*gconst48*(x1740.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1741=IKcos(j7);
IkReal x1742=IKsin(j7);
IkReal x1743=((1.0)*gconst48);
IkReal x1744=((-1.0)*x1741);
evalcond[0]=(new_r11*x1742);
evalcond[1]=(new_r10*x1744);
evalcond[2]=(gconst48*x1744);
evalcond[3]=((-1.0)*gconst48*x1742);
evalcond[4]=(gconst48+((new_r11*x1741)));
evalcond[5]=(((gconst48*x1741))+new_r11);
evalcond[6]=(new_r10+(((-1.0)*x1742*x1743)));
evalcond[7]=((((-1.0)*x1743))+((new_r10*x1742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1745=IKPowWithIntegerCheck(gconst48,-1);
if(!x1745.valid){
continue;
}
CheckValue<IkReal> x1746=IKPowWithIntegerCheck(new_r11,-1);
if(!x1746.valid){
continue;
}
if( IKabs((new_r10*(x1745.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst48*(x1746.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x1745.value)))+IKsqr(((-1.0)*gconst48*(x1746.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x1745.value)), ((-1.0)*gconst48*(x1746.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1747=IKcos(j7);
IkReal x1748=IKsin(j7);
IkReal x1749=((1.0)*gconst48);
IkReal x1750=((-1.0)*x1747);
evalcond[0]=(new_r11*x1748);
evalcond[1]=(new_r10*x1750);
evalcond[2]=(gconst48*x1750);
evalcond[3]=((-1.0)*gconst48*x1748);
evalcond[4]=(gconst48+((new_r11*x1747)));
evalcond[5]=(((gconst48*x1747))+new_r11);
evalcond[6]=((((-1.0)*x1748*x1749))+new_r10);
evalcond[7]=((((-1.0)*x1749))+((new_r10*x1748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1751 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1751.valid){
continue;
}
CheckValue<IkReal> x1752=IKPowWithIntegerCheck(IKsign(gconst48),-1);
if(!x1752.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1751.value)+(((1.5707963267949)*(x1752.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1753=IKcos(j7);
IkReal x1754=IKsin(j7);
IkReal x1755=((1.0)*gconst48);
IkReal x1756=((-1.0)*x1753);
evalcond[0]=(new_r11*x1754);
evalcond[1]=(new_r10*x1756);
evalcond[2]=(gconst48*x1756);
evalcond[3]=((-1.0)*gconst48*x1754);
evalcond[4]=(gconst48+((new_r11*x1753)));
evalcond[5]=(((gconst48*x1753))+new_r11);
evalcond[6]=((((-1.0)*x1754*x1755))+new_r10);
evalcond[7]=((((-1.0)*x1755))+((new_r10*x1754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1757 = IKatan2WithCheck(IkReal((((gconst48*new_r00))+((gconst48*new_r11)))),IkReal(((((-1.0)*gconst48*new_r10))+((gconst48*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1757.valid){
continue;
}
CheckValue<IkReal> x1758=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1758.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1757.value)+(((1.5707963267949)*(x1758.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1759=IKsin(j7);
IkReal x1760=IKcos(j7);
IkReal x1761=((1.0)*x1760);
IkReal x1762=((1.0)*x1759);
IkReal x1763=(((gconst49*x1761))+((gconst48*x1762)));
evalcond[0]=(((new_r11*x1760))+gconst48+(((-1.0)*new_r01*x1762)));
evalcond[1]=(gconst49+((new_r00*x1759))+(((-1.0)*new_r10*x1761)));
evalcond[2]=((((-1.0)*gconst48*x1761))+((gconst49*x1759))+new_r00);
evalcond[3]=((((-1.0)*gconst49*x1762))+new_r11+((gconst48*x1760)));
evalcond[4]=((((-1.0)*gconst48))+((new_r00*x1760))+((new_r10*x1759)));
evalcond[5]=((((-1.0)*gconst49))+((new_r01*x1760))+((new_r11*x1759)));
evalcond[6]=((((-1.0)*x1763))+new_r01);
evalcond[7]=((((-1.0)*x1763))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1764=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst48*new_r00))+((gconst49*new_r10)))),-1);
if(!x1764.valid){
continue;
}
CheckValue<IkReal> x1765 = IKatan2WithCheck(IkReal((((gconst48*gconst49))+((new_r10*new_r11)))),IkReal(((gconst49*gconst49)+((new_r00*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1765.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1764.value)))+(x1765.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1766=IKsin(j7);
IkReal x1767=IKcos(j7);
IkReal x1768=((1.0)*x1767);
IkReal x1769=((1.0)*x1766);
IkReal x1770=(((gconst49*x1768))+((gconst48*x1769)));
evalcond[0]=(((new_r11*x1767))+gconst48+(((-1.0)*new_r01*x1769)));
evalcond[1]=(((new_r00*x1766))+gconst49+(((-1.0)*new_r10*x1768)));
evalcond[2]=((((-1.0)*gconst48*x1768))+new_r00+((gconst49*x1766)));
evalcond[3]=((((-1.0)*gconst49*x1769))+new_r11+((gconst48*x1767)));
evalcond[4]=((((-1.0)*gconst48))+((new_r00*x1767))+((new_r10*x1766)));
evalcond[5]=((((-1.0)*gconst49))+((new_r11*x1766))+((new_r01*x1767)));
evalcond[6]=((((-1.0)*x1770))+new_r01);
evalcond[7]=((((-1.0)*x1770))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1771=IKPowWithIntegerCheck(IKsign((((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)))),-1);
if(!x1771.valid){
continue;
}
CheckValue<IkReal> x1772 = IKatan2WithCheck(IkReal((((gconst49*new_r11))+((gconst48*new_r10)))),IkReal((((gconst49*new_r01))+((gconst48*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1772.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1771.value)))+(x1772.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1773=IKsin(j7);
IkReal x1774=IKcos(j7);
IkReal x1775=((1.0)*x1774);
IkReal x1776=((1.0)*x1773);
IkReal x1777=(((gconst48*x1776))+((gconst49*x1775)));
evalcond[0]=(gconst48+(((-1.0)*new_r01*x1776))+((new_r11*x1774)));
evalcond[1]=(((new_r00*x1773))+gconst49+(((-1.0)*new_r10*x1775)));
evalcond[2]=(((gconst49*x1773))+(((-1.0)*gconst48*x1775))+new_r00);
evalcond[3]=(((gconst48*x1774))+(((-1.0)*gconst49*x1776))+new_r11);
evalcond[4]=((((-1.0)*gconst48))+((new_r00*x1774))+((new_r10*x1773)));
evalcond[5]=((((-1.0)*gconst49))+((new_r01*x1774))+((new_r11*x1773)));
evalcond[6]=((((-1.0)*x1777))+new_r01);
evalcond[7]=((((-1.0)*x1777))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1779 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1779.valid){
continue;
}
IkReal x1778=x1779.value;
j7array[0]=((-1.0)*x1778);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1778)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r10*(IKcos(j7))))+((new_r00*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j7eval[0]=new_r00;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r00);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j7eval[0]=new_r01;
j7eval[1]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j7eval[0]=new_r00;
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r00), new_r01);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1780=IKsin(j7);
IkReal x1781=IKcos(j7);
IkReal x1782=((-1.0)*x1780);
evalcond[0]=(new_r00*x1781);
evalcond[1]=(x1780+new_r00);
evalcond[2]=x1782;
evalcond[3]=((-1.0)*x1781);
evalcond[4]=(new_r01*x1782);
evalcond[5]=((1.0)+((new_r00*x1780)));
evalcond[6]=((-1.0)+((new_r01*x1781)));
evalcond[7]=((((-1.0)*x1781))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r00, ((-1.0)*new_r01));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1783=IKcos(j7);
IkReal x1784=IKsin(j7);
evalcond[0]=x1784;
evalcond[1]=x1783;
evalcond[2]=(new_r00*x1783);
evalcond[3]=(x1783+new_r01);
evalcond[4]=((-1.0)*new_r01*x1784);
evalcond[5]=((-1.0)+((new_r00*x1784)));
evalcond[6]=((1.0)+((new_r01*x1783)));
evalcond[7]=((((-1.0)*x1784))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1787=IKPowWithIntegerCheck(new_r00,-1);
if(!x1787.valid){
continue;
}
IkReal x1785=x1787.value;
IkReal x1786=((-1.0)*x1785);
CheckValue<IkReal> x1788=IKPowWithIntegerCheck(sj9,-1);
if(!x1788.valid){
continue;
}
if( IKabs((cj9*x1786)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1786*(cj9*cj9)*(x1788.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj9*x1786))+IKsqr((x1786*(cj9*cj9)*(x1788.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((cj9*x1786), (x1786*(cj9*cj9)*(x1788.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1789=IKsin(j7);
IkReal x1790=IKcos(j7);
IkReal x1791=((1.0)*sj9);
IkReal x1792=((1.0)*cj9);
IkReal x1793=((1.0)*x1789);
IkReal x1794=(((x1789*x1791))+((x1790*x1792)));
evalcond[0]=(cj9+((new_r00*x1789)));
evalcond[1]=(sj9+(((-1.0)*new_r01*x1793)));
evalcond[2]=((((-1.0)*x1791))+((new_r00*x1790)));
evalcond[3]=((((-1.0)*x1792))+((new_r01*x1790)));
evalcond[4]=((((-1.0)*x1789*x1792))+((sj9*x1790)));
evalcond[5]=((((-1.0)*x1790*x1791))+((cj9*x1789))+new_r00);
evalcond[6]=((-1.0)*x1794);
evalcond[7]=((((-1.0)*x1794))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1795=IKPowWithIntegerCheck(new_r01,-1);
if(!x1795.valid){
continue;
}
CheckValue<IkReal> x1796=IKPowWithIntegerCheck(new_r00,-1);
if(!x1796.valid){
continue;
}
if( IKabs((sj9*(x1795.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj9*(x1796.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj9*(x1795.value)))+IKsqr((sj9*(x1796.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((sj9*(x1795.value)), (sj9*(x1796.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1797=IKsin(j7);
IkReal x1798=IKcos(j7);
IkReal x1799=((1.0)*sj9);
IkReal x1800=((1.0)*cj9);
IkReal x1801=((1.0)*x1797);
IkReal x1802=(((x1798*x1800))+((x1797*x1799)));
evalcond[0]=(cj9+((new_r00*x1797)));
evalcond[1]=(sj9+(((-1.0)*new_r01*x1801)));
evalcond[2]=((((-1.0)*x1799))+((new_r00*x1798)));
evalcond[3]=((((-1.0)*x1800))+((new_r01*x1798)));
evalcond[4]=((((-1.0)*x1797*x1800))+((sj9*x1798)));
evalcond[5]=(((cj9*x1797))+new_r00+(((-1.0)*x1798*x1799)));
evalcond[6]=((-1.0)*x1802);
evalcond[7]=((((-1.0)*x1802))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1803 = IKatan2WithCheck(IkReal(((-1.0)*cj9)),IkReal(sj9),IKFAST_ATAN2_MAGTHRESH);
if(!x1803.valid){
continue;
}
CheckValue<IkReal> x1804=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x1804.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1803.value)+(((1.5707963267949)*(x1804.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1805=IKsin(j7);
IkReal x1806=IKcos(j7);
IkReal x1807=((1.0)*sj9);
IkReal x1808=((1.0)*cj9);
IkReal x1809=((1.0)*x1805);
IkReal x1810=(((x1806*x1808))+((x1805*x1807)));
evalcond[0]=(((new_r00*x1805))+cj9);
evalcond[1]=(sj9+(((-1.0)*new_r01*x1809)));
evalcond[2]=(((new_r00*x1806))+(((-1.0)*x1807)));
evalcond[3]=((((-1.0)*x1808))+((new_r01*x1806)));
evalcond[4]=((((-1.0)*x1805*x1808))+((sj9*x1806)));
evalcond[5]=((((-1.0)*x1806*x1807))+new_r00+((cj9*x1805)));
evalcond[6]=((-1.0)*x1810);
evalcond[7]=((((-1.0)*x1810))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j7eval[0]=new_r10;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r10);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j7eval[0]=new_r11;
j7eval[1]=IKsign(new_r11);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j7eval[0]=new_r10;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1811=IKPowWithIntegerCheck(new_r10,-1);
if(!x1811.valid){
continue;
}
CheckValue<IkReal> x1812=IKPowWithIntegerCheck(new_r11,-1);
if(!x1812.valid){
continue;
}
if( IKabs((sj9*(x1811.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj9*(x1812.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj9*(x1811.value)))+IKsqr(((-1.0)*sj9*(x1812.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((sj9*(x1811.value)), ((-1.0)*sj9*(x1812.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1813=IKcos(j7);
IkReal x1814=IKsin(j7);
IkReal x1815=((1.0)*sj9);
IkReal x1816=((1.0)*x1813);
IkReal x1817=(cj9*x1814);
IkReal x1818=(((x1814*x1815))+((cj9*x1816)));
evalcond[0]=(((new_r11*x1813))+sj9);
evalcond[1]=(cj9+(((-1.0)*new_r10*x1816)));
evalcond[2]=((((-1.0)*x1815))+((new_r10*x1814)));
evalcond[3]=(((new_r11*x1814))+(((-1.0)*cj9)));
evalcond[4]=((((-1.0)*x1813*x1815))+x1817);
evalcond[5]=(((sj9*x1813))+new_r11+(((-1.0)*x1817)));
evalcond[6]=((-1.0)*x1818);
evalcond[7]=((((-1.0)*x1818))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1819=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x1819.valid){
continue;
}
CheckValue<IkReal> x1820 = IKatan2WithCheck(IkReal(cj9),IkReal(((-1.0)*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x1820.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1819.value)))+(x1820.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1821=IKcos(j7);
IkReal x1822=IKsin(j7);
IkReal x1823=((1.0)*sj9);
IkReal x1824=((1.0)*x1821);
IkReal x1825=(cj9*x1822);
IkReal x1826=(((cj9*x1824))+((x1822*x1823)));
evalcond[0]=(sj9+((new_r11*x1821)));
evalcond[1]=(cj9+(((-1.0)*new_r10*x1824)));
evalcond[2]=((((-1.0)*x1823))+((new_r10*x1822)));
evalcond[3]=(((new_r11*x1822))+(((-1.0)*cj9)));
evalcond[4]=((((-1.0)*x1821*x1823))+x1825);
evalcond[5]=(((sj9*x1821))+(((-1.0)*x1825))+new_r11);
evalcond[6]=((-1.0)*x1826);
evalcond[7]=((((-1.0)*x1826))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1827 = IKatan2WithCheck(IkReal(sj9),IkReal(cj9),IKFAST_ATAN2_MAGTHRESH);
if(!x1827.valid){
continue;
}
CheckValue<IkReal> x1828=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x1828.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1827.value)+(((1.5707963267949)*(x1828.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1829=IKcos(j7);
IkReal x1830=IKsin(j7);
IkReal x1831=((1.0)*sj9);
IkReal x1832=((1.0)*x1829);
IkReal x1833=(cj9*x1830);
IkReal x1834=(((cj9*x1832))+((x1830*x1831)));
evalcond[0]=(sj9+((new_r11*x1829)));
evalcond[1]=(cj9+(((-1.0)*new_r10*x1832)));
evalcond[2]=((((-1.0)*x1831))+((new_r10*x1830)));
evalcond[3]=(((new_r11*x1830))+(((-1.0)*cj9)));
evalcond[4]=(x1833+(((-1.0)*x1829*x1831)));
evalcond[5]=((((-1.0)*x1833))+((sj9*x1829))+new_r11);
evalcond[6]=((-1.0)*x1834);
evalcond[7]=((((-1.0)*x1834))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1836 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1836.valid){
continue;
}
IkReal x1835=x1836.value;
j7array[0]=((-1.0)*x1835);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1835)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j7))))+((new_r11*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1837=IKPowWithIntegerCheck(IKsign((((new_r01*sj9))+(((-1.0)*cj9*new_r11)))),-1);
if(!x1837.valid){
continue;
}
CheckValue<IkReal> x1838 = IKatan2WithCheck(IkReal(((1.0)+(((-1.0)*(cj9*cj9)))+((new_r00*new_r11)))),IkReal((((cj9*sj9))+((new_r00*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1838.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1837.value)))+(x1838.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1839=IKsin(j7);
IkReal x1840=IKcos(j7);
IkReal x1841=((1.0)*sj9);
IkReal x1842=((1.0)*x1839);
IkReal x1843=((1.0)*x1840);
IkReal x1844=(((x1839*x1841))+((cj9*x1843)));
evalcond[0]=(((new_r11*x1840))+sj9+(((-1.0)*new_r01*x1842)));
evalcond[1]=((((-1.0)*new_r10*x1843))+cj9+((new_r00*x1839)));
evalcond[2]=(((cj9*x1839))+(((-1.0)*x1840*x1841))+new_r00);
evalcond[3]=(((sj9*x1840))+(((-1.0)*cj9*x1842))+new_r11);
evalcond[4]=((((-1.0)*x1841))+((new_r00*x1840))+((new_r10*x1839)));
evalcond[5]=(((new_r01*x1840))+((new_r11*x1839))+(((-1.0)*cj9)));
evalcond[6]=((((-1.0)*x1844))+new_r01);
evalcond[7]=((((-1.0)*x1844))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1845=((1.0)*sj9);
CheckValue<IkReal> x1846=IKPowWithIntegerCheck(IKsign((((cj9*new_r11))+(((-1.0)*new_r01*x1845)))),-1);
if(!x1846.valid){
continue;
}
CheckValue<IkReal> x1847 = IKatan2WithCheck(IkReal(((-1.0)+(new_r11*new_r11)+(cj9*cj9))),IkReal((((new_r01*new_r11))+(((-1.0)*cj9*x1845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1847.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1846.value)))+(x1847.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1848=IKsin(j7);
IkReal x1849=IKcos(j7);
IkReal x1850=((1.0)*sj9);
IkReal x1851=((1.0)*x1848);
IkReal x1852=((1.0)*x1849);
IkReal x1853=(((x1848*x1850))+((cj9*x1852)));
evalcond[0]=(((new_r11*x1849))+sj9+(((-1.0)*new_r01*x1851)));
evalcond[1]=(cj9+(((-1.0)*new_r10*x1852))+((new_r00*x1848)));
evalcond[2]=((((-1.0)*x1849*x1850))+((cj9*x1848))+new_r00);
evalcond[3]=(((sj9*x1849))+new_r11+(((-1.0)*cj9*x1851)));
evalcond[4]=(((new_r00*x1849))+((new_r10*x1848))+(((-1.0)*x1850)));
evalcond[5]=(((new_r11*x1848))+((new_r01*x1849))+(((-1.0)*cj9)));
evalcond[6]=(new_r01+(((-1.0)*x1853)));
evalcond[7]=(new_r10+(((-1.0)*x1853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1854 = IKatan2WithCheck(IkReal((((new_r10*sj9))+((cj9*new_r11)))),IkReal((((cj9*new_r01))+((new_r00*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1854.valid){
continue;
}
CheckValue<IkReal> x1855=IKPowWithIntegerCheck(IKsign((((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)))),-1);
if(!x1855.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1854.value)+(((1.5707963267949)*(x1855.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1856=IKsin(j7);
IkReal x1857=IKcos(j7);
IkReal x1858=((1.0)*sj9);
IkReal x1859=((1.0)*x1856);
IkReal x1860=((1.0)*x1857);
IkReal x1861=(((x1856*x1858))+((cj9*x1860)));
evalcond[0]=(sj9+((new_r11*x1857))+(((-1.0)*new_r01*x1859)));
evalcond[1]=(((new_r00*x1856))+cj9+(((-1.0)*new_r10*x1860)));
evalcond[2]=(((cj9*x1856))+(((-1.0)*x1857*x1858))+new_r00);
evalcond[3]=(((sj9*x1857))+new_r11+(((-1.0)*cj9*x1859)));
evalcond[4]=(((new_r00*x1857))+((new_r10*x1856))+(((-1.0)*x1858)));
evalcond[5]=(((new_r01*x1857))+((new_r11*x1856))+(((-1.0)*cj9)));
evalcond[6]=(new_r01+(((-1.0)*x1861)));
evalcond[7]=(new_r10+(((-1.0)*x1861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x1862=((-1.0)*new_r22);
CheckValue<IkReal> x1864 = IKatan2WithCheck(IkReal((new_r00*x1862)),IkReal((new_r10*x1862)),IKFAST_ATAN2_MAGTHRESH);
if(!x1864.valid){
continue;
}
IkReal x1863=x1864.value;
j7array[0]=((-1.0)*x1863);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1863)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1865=IKcos(j7);
IkReal x1866=IKsin(j7);
IkReal x1867=((1.0)*new_r01);
IkReal x1868=(new_r11*x1866);
evalcond[0]=(((new_r10*x1866))+((new_r00*x1865)));
evalcond[1]=(x1868+((new_r01*x1865)));
evalcond[2]=((((-1.0)*x1866*x1867))+((new_r11*x1865)));
evalcond[3]=(((new_r00*x1866))+(((-1.0)*new_r10*x1865)));
evalcond[4]=((((-1.0)*new_r22*x1868))+(((-1.0)*new_r22*x1865*x1867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1870 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1870.valid){
continue;
}
IkReal x1869=x1870.value;
j7array[0]=((-1.0)*x1869);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1869)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1871=IKcos(j7);
IkReal x1872=IKsin(j7);
IkReal x1873=((1.0)*new_r01);
IkReal x1874=(new_r22*x1871);
IkReal x1875=((1.0)*new_r22*x1872);
evalcond[0]=(((new_r10*x1872))+((new_r00*x1871)));
evalcond[1]=((((-1.0)*x1872*x1873))+((new_r11*x1871)));
evalcond[2]=(((new_r00*x1872))+(((-1.0)*new_r10*x1871)));
evalcond[3]=((((-1.0)*new_r10*x1875))+(((-1.0)*new_r00*x1874)));
evalcond[4]=((((-1.0)*x1873*x1874))+(((-1.0)*new_r11*x1875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1877 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1877.valid){
continue;
}
IkReal x1876=x1877.value;
j7array[0]=((-1.0)*x1876);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1876)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1878=IKcos(j7);
IkReal x1879=IKsin(j7);
IkReal x1880=((1.0)*new_r01);
IkReal x1881=(new_r22*x1878);
IkReal x1882=((1.0)*new_r22*x1879);
evalcond[0]=(((new_r01*x1878))+((new_r11*x1879)));
evalcond[1]=((((-1.0)*x1879*x1880))+((new_r11*x1878)));
evalcond[2]=(((new_r00*x1879))+(((-1.0)*new_r10*x1878)));
evalcond[3]=((((-1.0)*new_r00*x1881))+(((-1.0)*new_r10*x1882)));
evalcond[4]=((((-1.0)*x1880*x1881))+(((-1.0)*new_r11*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1884=IKPowWithIntegerCheck(cj8,-1);
if(!x1884.valid){
continue;
}
IkReal x1883=x1884.value;
CheckValue<IkReal> x1885=IKPowWithIntegerCheck(new_r01,-1);
if(!x1885.valid){
continue;
}
if( IKabs((x1883*(x1885.value)*((((cj8*sj9))+((new_r02*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x1883)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1883*(x1885.value)*((((cj8*sj9))+((new_r02*new_r11))))))+IKsqr((new_r02*x1883))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x1883*(x1885.value)*((((cj8*sj9))+((new_r02*new_r11))))), (new_r02*x1883));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[18];
IkReal x1886=IKcos(j7);
IkReal x1887=IKsin(j7);
IkReal x1888=((1.0)*cj9);
IkReal x1889=(sj8*sj9);
IkReal x1890=(cj9*sj8);
IkReal x1891=((1.0)*sj8);
IkReal x1892=(new_r12*x1887);
IkReal x1893=((1.0)*x1887);
IkReal x1894=(new_r02*x1886);
IkReal x1895=((1.0)*x1886);
IkReal x1896=(new_r11*x1887);
IkReal x1897=(new_r10*x1887);
IkReal x1898=(new_r01*x1886);
IkReal x1899=(new_r00*x1886);
evalcond[0]=((((-1.0)*cj8*x1895))+new_r02);
evalcond[1]=((((-1.0)*cj8*x1893))+new_r12);
evalcond[2]=(((new_r12*x1886))+(((-1.0)*new_r02*x1893)));
evalcond[3]=(sj9+((new_r11*x1886))+(((-1.0)*new_r01*x1893)));
evalcond[4]=(cj9+(((-1.0)*new_r10*x1895))+((new_r00*x1887)));
evalcond[5]=(((cj9*x1887))+new_r00+((x1886*x1889)));
evalcond[6]=(((sj9*x1886))+new_r11+((x1887*x1890)));
evalcond[7]=(x1894+x1892+(((-1.0)*cj8)));
evalcond[8]=(x1899+x1897+x1889);
evalcond[9]=(x1898+x1896+x1890);
evalcond[10]=(((x1886*x1890))+(((-1.0)*sj9*x1893))+new_r01);
evalcond[11]=(((x1887*x1889))+new_r10+(((-1.0)*x1886*x1888)));
evalcond[12]=(((new_r20*sj8))+((cj8*x1897))+((cj8*x1899)));
evalcond[13]=(((cj8*x1896))+((cj8*x1898))+((new_r21*sj8)));
evalcond[14]=((-1.0)+((new_r22*sj8))+((cj8*x1892))+((cj8*x1894)));
evalcond[15]=(((cj8*new_r22))+(((-1.0)*x1891*x1894))+(((-1.0)*x1891*x1892)));
evalcond[16]=((((-1.0)*sj9))+((cj8*new_r20))+(((-1.0)*x1891*x1899))+(((-1.0)*x1891*x1897)));
evalcond[17]=(((cj8*new_r21))+(((-1.0)*x1891*x1898))+(((-1.0)*x1891*x1896))+(((-1.0)*x1888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1900=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x1900.valid){
continue;
}
CheckValue<IkReal> x1901 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1901.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1900.value)))+(x1901.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[18];
IkReal x1902=IKcos(j7);
IkReal x1903=IKsin(j7);
IkReal x1904=((1.0)*cj9);
IkReal x1905=(sj8*sj9);
IkReal x1906=(cj9*sj8);
IkReal x1907=((1.0)*sj8);
IkReal x1908=(new_r12*x1903);
IkReal x1909=((1.0)*x1903);
IkReal x1910=(new_r02*x1902);
IkReal x1911=((1.0)*x1902);
IkReal x1912=(new_r11*x1903);
IkReal x1913=(new_r10*x1903);
IkReal x1914=(new_r01*x1902);
IkReal x1915=(new_r00*x1902);
evalcond[0]=((((-1.0)*cj8*x1911))+new_r02);
evalcond[1]=((((-1.0)*cj8*x1909))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1909))+((new_r12*x1902)));
evalcond[3]=(sj9+(((-1.0)*new_r01*x1909))+((new_r11*x1902)));
evalcond[4]=(cj9+(((-1.0)*new_r10*x1911))+((new_r00*x1903)));
evalcond[5]=(((cj9*x1903))+new_r00+((x1902*x1905)));
evalcond[6]=(((x1903*x1906))+new_r11+((sj9*x1902)));
evalcond[7]=(x1908+x1910+(((-1.0)*cj8)));
evalcond[8]=(x1905+x1913+x1915);
evalcond[9]=(x1906+x1912+x1914);
evalcond[10]=((((-1.0)*sj9*x1909))+new_r01+((x1902*x1906)));
evalcond[11]=((((-1.0)*x1902*x1904))+((x1903*x1905))+new_r10);
evalcond[12]=(((new_r20*sj8))+((cj8*x1915))+((cj8*x1913)));
evalcond[13]=(((cj8*x1912))+((cj8*x1914))+((new_r21*sj8)));
evalcond[14]=((-1.0)+((cj8*x1910))+((cj8*x1908))+((new_r22*sj8)));
evalcond[15]=(((cj8*new_r22))+(((-1.0)*x1907*x1908))+(((-1.0)*x1907*x1910)));
evalcond[16]=((((-1.0)*sj9))+((cj8*new_r20))+(((-1.0)*x1907*x1913))+(((-1.0)*x1907*x1915)));
evalcond[17]=(((cj8*new_r21))+(((-1.0)*x1907*x1912))+(((-1.0)*x1907*x1914))+(((-1.0)*x1904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1916=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x1916.valid){
continue;
}
CheckValue<IkReal> x1917 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1917.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1916.value)))+(x1917.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1918=IKcos(j7);
IkReal x1919=IKsin(j7);
IkReal x1920=((1.0)*new_r02);
IkReal x1921=(cj8*x1918);
IkReal x1922=(new_r12*x1919);
IkReal x1923=(cj8*x1919);
evalcond[0]=((((-1.0)*x1921))+new_r02);
evalcond[1]=((((-1.0)*x1923))+new_r12);
evalcond[2]=(((new_r12*x1918))+(((-1.0)*x1919*x1920)));
evalcond[3]=(((new_r02*x1918))+x1922+(((-1.0)*cj8)));
evalcond[4]=(((new_r20*sj8))+((new_r00*x1921))+((new_r10*x1923)));
evalcond[5]=(((new_r01*x1921))+((new_r21*sj8))+((new_r11*x1923)));
evalcond[6]=((-1.0)+((cj8*x1922))+((new_r02*x1921))+((new_r22*sj8)));
evalcond[7]=(((cj8*new_r22))+(((-1.0)*sj8*x1922))+(((-1.0)*sj8*x1918*x1920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=cj8;
j9eval[1]=IKsign(cj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=cj8;
j9eval[1]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
j9eval[0]=cj8;
j9eval[1]=sj7;
j9eval[2]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1924=((1.0)*cj7);
if( IKabs((((new_r01*sj7))+(((-1.0)*new_r00*x1924)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x1924))+(((-1.0)*new_r00*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*sj7))+(((-1.0)*new_r00*x1924))))+IKsqr(((((-1.0)*new_r01*x1924))+(((-1.0)*new_r00*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((new_r01*sj7))+(((-1.0)*new_r00*x1924))), ((((-1.0)*new_r01*x1924))+(((-1.0)*new_r00*sj7))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1925=IKsin(j9);
IkReal x1926=IKcos(j9);
IkReal x1927=((1.0)*cj7);
IkReal x1928=(sj7*x1926);
IkReal x1929=(cj7*x1925);
IkReal x1930=(sj7*x1925);
IkReal x1931=(x1928+x1929);
evalcond[0]=(((new_r10*sj7))+x1925+((cj7*new_r00)));
evalcond[1]=(((new_r11*sj7))+x1926+((cj7*new_r01)));
evalcond[2]=((((-1.0)*new_r01*sj7))+x1925+((cj7*new_r11)));
evalcond[3]=(((new_r00*sj7))+x1926+(((-1.0)*new_r10*x1927)));
evalcond[4]=(x1931+new_r00);
evalcond[5]=(x1931+new_r11);
evalcond[6]=(((cj7*x1926))+(((-1.0)*x1930))+new_r01);
evalcond[7]=(x1930+(((-1.0)*x1926*x1927))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs((((new_r01*sj7))+((cj7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*sj7))+((cj7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*sj7))+((cj7*new_r00))))+IKsqr(((((-1.0)*new_r00*sj7))+((cj7*new_r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((new_r01*sj7))+((cj7*new_r00))), ((((-1.0)*new_r00*sj7))+((cj7*new_r01))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1932=IKsin(j9);
IkReal x1933=IKcos(j9);
IkReal x1934=((1.0)*cj7);
IkReal x1935=((1.0)*sj7);
IkReal x1936=(((x1932*x1935))+((x1933*x1934)));
evalcond[0]=((((-1.0)*new_r01*x1935))+x1932+((cj7*new_r11)));
evalcond[1]=((((-1.0)*new_r10*x1934))+((new_r00*sj7))+x1933);
evalcond[2]=(((new_r10*sj7))+(((-1.0)*x1932))+((cj7*new_r00)));
evalcond[3]=(((new_r11*sj7))+(((-1.0)*x1933))+((cj7*new_r01)));
evalcond[4]=((((-1.0)*x1932*x1934))+new_r00+((sj7*x1933)));
evalcond[5]=((((-1.0)*x1933*x1935))+((cj7*x1932))+new_r11);
evalcond[6]=(new_r01+(((-1.0)*x1936)));
evalcond[7]=(new_r10+(((-1.0)*x1936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1937=IKsin(j9);
IkReal x1938=IKcos(j9);
IkReal x1939=((1.0)*cj8);
IkReal x1940=((1.0)*sj8);
evalcond[0]=(x1937+new_r11);
evalcond[1]=(x1938+(((-1.0)*new_r10)));
evalcond[2]=(((sj8*x1937))+new_r00);
evalcond[3]=(((sj8*x1938))+new_r01);
evalcond[4]=((((-1.0)*x1937*x1939))+new_r20);
evalcond[5]=((((-1.0)*x1938*x1939))+new_r21);
evalcond[6]=((((-1.0)*new_r00*x1940))+((cj8*new_r20))+(((-1.0)*x1937)));
evalcond[7]=(((cj8*new_r21))+(((-1.0)*new_r01*x1940))+(((-1.0)*x1938)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1941=IKsin(j9);
IkReal x1942=IKcos(j9);
IkReal x1943=((1.0)*cj8);
evalcond[0]=(x1942+new_r10);
evalcond[1]=(x1941+(((-1.0)*new_r11)));
evalcond[2]=((((-1.0)*x1941*x1943))+new_r20);
evalcond[3]=((((-1.0)*x1942*x1943))+new_r21);
evalcond[4]=(((sj8*x1941))+(((-1.0)*new_r00)));
evalcond[5]=(((sj8*x1942))+(((-1.0)*new_r01)));
evalcond[6]=(((cj8*new_r20))+((new_r00*sj8))+(((-1.0)*x1941)));
evalcond[7]=(((cj8*new_r21))+((new_r01*sj8))+(((-1.0)*x1942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r20, new_r21);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1944=IKcos(j9);
IkReal x1945=IKsin(j9);
IkReal x1946=((1.0)*cj7);
IkReal x1947=((1.0)*x1945);
evalcond[0]=((((-1.0)*x1947))+new_r20);
evalcond[1]=((((-1.0)*x1944))+new_r21);
evalcond[2]=(((sj7*x1944))+new_r00);
evalcond[3]=(((cj7*x1945))+new_r11);
evalcond[4]=((((-1.0)*sj7*x1947))+new_r01);
evalcond[5]=((((-1.0)*x1944*x1946))+new_r10);
evalcond[6]=((((-1.0)*new_r01*sj7))+x1945+((cj7*new_r11)));
evalcond[7]=((((-1.0)*new_r10*x1946))+((new_r00*sj7))+x1944);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1948=IKcos(j9);
IkReal x1949=IKsin(j9);
IkReal x1950=((1.0)*cj7);
IkReal x1951=((1.0)*sj7);
evalcond[0]=(x1949+new_r20);
evalcond[1]=(x1948+new_r21);
evalcond[2]=(((sj7*x1948))+new_r00);
evalcond[3]=(((cj7*x1949))+new_r11);
evalcond[4]=((((-1.0)*x1949*x1951))+new_r01);
evalcond[5]=((((-1.0)*x1948*x1950))+new_r10);
evalcond[6]=((((-1.0)*new_r01*x1951))+x1949+((cj7*new_r11)));
evalcond[7]=((((-1.0)*new_r10*x1950))+((new_r00*sj7))+x1948);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=IKabs(new_r22);
if( IKabs(j9eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j9]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j9array[2], cj9array[2], sj9array[2], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[2]={true,true};
_nj9 = 2;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x1953=IKPowWithIntegerCheck(cj8,-1);
if(!x1953.valid){
continue;
}
IkReal x1952=x1953.value;
CheckValue<IkReal> x1954=IKPowWithIntegerCheck(sj7,-1);
if(!x1954.valid){
continue;
}
CheckValue<IkReal> x1955=IKPowWithIntegerCheck(sj8,-1);
if(!x1955.valid){
continue;
}
if( IKabs((new_r20*x1952)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1952*(x1954.value)*(x1955.value)*(((((-1.0)*cj8*new_r11))+(((-1.0)*cj7*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x1952))+IKsqr((x1952*(x1954.value)*(x1955.value)*(((((-1.0)*cj8*new_r11))+(((-1.0)*cj7*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r20*x1952), (x1952*(x1954.value)*(x1955.value)*(((((-1.0)*cj8*new_r11))+(((-1.0)*cj7*new_r20))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x1956=IKsin(j9);
IkReal x1957=IKcos(j9);
IkReal x1958=((1.0)*new_r10);
IkReal x1959=(sj7*sj8);
IkReal x1960=(cj7*new_r01);
IkReal x1961=((1.0)*sj8);
IkReal x1962=(cj7*new_r00);
IkReal x1963=(cj7*x1956);
IkReal x1964=(sj8*x1957);
IkReal x1965=((1.0)*x1956);
IkReal x1966=((1.0)*x1957);
evalcond[0]=(new_r20+(((-1.0)*cj8*x1965)));
evalcond[1]=(new_r21+(((-1.0)*cj8*x1966)));
evalcond[2]=((((-1.0)*new_r01*sj7))+x1956+((cj7*new_r11)));
evalcond[3]=((((-1.0)*cj7*x1958))+((new_r00*sj7))+x1957);
evalcond[4]=(((new_r10*sj7))+((sj8*x1956))+x1962);
evalcond[5]=(((new_r11*sj7))+x1964+x1960);
evalcond[6]=(((sj8*x1963))+((sj7*x1957))+new_r00);
evalcond[7]=(((x1957*x1959))+x1963+new_r11);
evalcond[8]=(((cj7*x1964))+new_r01+(((-1.0)*sj7*x1965)));
evalcond[9]=((((-1.0)*cj7*x1966))+new_r10+((x1956*x1959)));
evalcond[10]=(((cj8*new_r20))+(((-1.0)*x1958*x1959))+(((-1.0)*x1965))+(((-1.0)*x1961*x1962)));
evalcond[11]=(((cj8*new_r21))+(((-1.0)*new_r11*x1959))+(((-1.0)*x1966))+(((-1.0)*x1960*x1961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x1968=IKPowWithIntegerCheck(cj8,-1);
if(!x1968.valid){
continue;
}
IkReal x1967=x1968.value;
CheckValue<IkReal> x1969=IKPowWithIntegerCheck(sj7,-1);
if(!x1969.valid){
continue;
}
if( IKabs((new_r20*x1967)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1967*(x1969.value)*(((((-1.0)*cj7*new_r20*sj8))+(((-1.0)*cj8*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x1967))+IKsqr((x1967*(x1969.value)*(((((-1.0)*cj7*new_r20*sj8))+(((-1.0)*cj8*new_r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r20*x1967), (x1967*(x1969.value)*(((((-1.0)*cj7*new_r20*sj8))+(((-1.0)*cj8*new_r00))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x1970=IKsin(j9);
IkReal x1971=IKcos(j9);
IkReal x1972=((1.0)*new_r10);
IkReal x1973=(sj7*sj8);
IkReal x1974=(cj7*new_r01);
IkReal x1975=((1.0)*sj8);
IkReal x1976=(cj7*new_r00);
IkReal x1977=(cj7*x1970);
IkReal x1978=(sj8*x1971);
IkReal x1979=((1.0)*x1970);
IkReal x1980=((1.0)*x1971);
evalcond[0]=(new_r20+(((-1.0)*cj8*x1979)));
evalcond[1]=((((-1.0)*cj8*x1980))+new_r21);
evalcond[2]=((((-1.0)*new_r01*sj7))+x1970+((cj7*new_r11)));
evalcond[3]=(((new_r00*sj7))+(((-1.0)*cj7*x1972))+x1971);
evalcond[4]=(((new_r10*sj7))+((sj8*x1970))+x1976);
evalcond[5]=(((new_r11*sj7))+x1978+x1974);
evalcond[6]=(((sj8*x1977))+((sj7*x1971))+new_r00);
evalcond[7]=(((x1971*x1973))+x1977+new_r11);
evalcond[8]=(((cj7*x1978))+new_r01+(((-1.0)*sj7*x1979)));
evalcond[9]=(((x1970*x1973))+new_r10+(((-1.0)*cj7*x1980)));
evalcond[10]=((((-1.0)*x1975*x1976))+((cj8*new_r20))+(((-1.0)*x1979))+(((-1.0)*x1972*x1973)));
evalcond[11]=((((-1.0)*x1980))+((cj8*new_r21))+(((-1.0)*x1974*x1975))+(((-1.0)*new_r11*x1973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x1981=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x1981.valid){
continue;
}
CheckValue<IkReal> x1982 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1982.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1981.value)))+(x1982.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x1983=IKsin(j9);
IkReal x1984=IKcos(j9);
IkReal x1985=((1.0)*new_r10);
IkReal x1986=(sj7*sj8);
IkReal x1987=(cj7*new_r01);
IkReal x1988=((1.0)*sj8);
IkReal x1989=(cj7*new_r00);
IkReal x1990=(cj7*x1983);
IkReal x1991=(sj8*x1984);
IkReal x1992=((1.0)*x1983);
IkReal x1993=((1.0)*x1984);
evalcond[0]=(new_r20+(((-1.0)*cj8*x1992)));
evalcond[1]=(new_r21+(((-1.0)*cj8*x1993)));
evalcond[2]=((((-1.0)*new_r01*sj7))+x1983+((cj7*new_r11)));
evalcond[3]=(((new_r00*sj7))+x1984+(((-1.0)*cj7*x1985)));
evalcond[4]=(((new_r10*sj7))+((sj8*x1983))+x1989);
evalcond[5]=(((new_r11*sj7))+x1987+x1991);
evalcond[6]=(((sj8*x1990))+((sj7*x1984))+new_r00);
evalcond[7]=(((x1984*x1986))+x1990+new_r11);
evalcond[8]=(((cj7*x1991))+(((-1.0)*sj7*x1992))+new_r01);
evalcond[9]=((((-1.0)*cj7*x1993))+new_r10+((x1983*x1986)));
evalcond[10]=(((cj8*new_r20))+(((-1.0)*x1985*x1986))+(((-1.0)*x1992))+(((-1.0)*x1988*x1989)));
evalcond[11]=(((cj8*new_r21))+(((-1.0)*new_r11*x1986))+(((-1.0)*x1987*x1988))+(((-1.0)*x1993)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - seednoid (99946063f1e160be78f1bbc0207b937e)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif


int all_left_ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint,int *NumSolutions)
{
 double Numik;
  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  for(std::size_t i = 0; i < vfree.size(); ++i)
    vfree[i] = free_joint[i];
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
 
  if( !bSuccess ) {
      return -1;
  }

  sol_joint.resize(solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
    sol_joint[i].resize(solvalues.size());
    for( std::size_t j = 0; j < solvalues.size(); ++j){
      if(j==3){
	sol_joint[i][j] = -solvalues[j];
      }
      else if(j==4){//seednoidはアームが伸びきった状態の第2関節が，+90°のため
	sol_joint[i][j] = M_PI/2+solvalues[j];
	//std::cout << "計算" <<std::endl;
      }
      else if(j==6){
	sol_joint[i][j] = -solvalues[j];
      }
      else
	sol_joint[i][j] = solvalues[j];
    }
  }
  *NumSolutions = (int)solutions.GetNumSolutions();
  return 0;
}
