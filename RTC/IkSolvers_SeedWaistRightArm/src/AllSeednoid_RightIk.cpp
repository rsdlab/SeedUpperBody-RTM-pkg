/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-11-17 13:39:58.082624
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97,x98,x99,x100,x101,x102,x103,x104,x105,x106,x107,x108;
x0=IKsin(j[3]);
x1=IKcos(j[3]);
x2=IKsin(j[5]);
x3=IKcos(j[4]);
x4=IKcos(j[5]);
x5=IKcos(j[6]);
x6=IKsin(j[4]);
x7=IKsin(j[6]);
x8=IKcos(j[0]);
x9=IKcos(j[8]);
x10=IKcos(j[7]);
x11=IKsin(j[7]);
x12=IKsin(j[8]);
x13=IKsin(j[1]);
x14=IKsin(j[2]);
x15=IKcos(j[2]);
x16=IKsin(j[0]);
x17=IKcos(j[1]);
x18=IKsin(j[9]);
x19=IKcos(j[9]);
x20=((0.028046)*x0);
x21=((0.028046)*x1);
x22=((0.134)*x15);
x23=((1.0)*x1);
x24=((0.279642)*x2);
x25=((1.0)*x16);
x26=((0.035)*x1);
x27=((0.275358)*x6);
x28=((1.0)*x19);
x29=((0.279642)*x1);
x30=((1.0)*x11);
x31=((1.0)*x2);
x32=((0.134)*x13);
x33=((1.0)*x9);
x34=((1.0)*x12);
x35=((1.0)*x18);
x36=((0.035)*x2);
x37=((1.0)*x5);
x38=((1.0)*x10);
x39=(x14*x17);
x40=(x15*x17);
x41=(x6*x7);
x42=(x3*x7);
x43=(x1*x3);
x44=(x0*x4);
x45=(x14*x8);
x46=(x5*x6);
x47=((-1.0)*x10);
x48=(x0*x3);
x49=(x16*x17);
x50=(x15*x8);
x51=(x13*x15);
x52=(x3*x5);
x53=(x14*x16);
x54=(x17*x8);
x55=((-1.0)*x11);
x56=(x26*x4);
x57=((0.035)*x44);
x58=(x1*x27);
x59=((0.01)*x43);
x60=(x11*x4*x6);
x61=(x31*x48);
x62=(x36*x48);
x63=(x2*x26*x3);
x64=(x23*x41);
x65=(x29*x46);
x66=(x26*x41);
x67=(x56+x20);
x68=((((-1.0)*x15*x25))+((x13*x45)));
x69=(x45+(((-1.0)*x25*x51)));
x70=(((x13*x53))+x50);
x71=(((x2*x46))+x42);
x72=((((-1.0)*x31*x41))+x52);
x73=(((x2*x43))+x44);
x74=((((-1.0)*x0*x31))+((x4*x43)));
x75=(((x1*x4))+(((-1.0)*x61)));
x76=(((x29*x4))+(((-1.0)*x24*x48)));
x77=(x62+(((-1.0)*x56)));
x78=((((-1.0)*x14*x25))+(((-1.0)*x13*x50)));
x79=((((-1.0)*x2*x23))+(((-1.0)*x3*x44)));
x80=((((0.279642)*x44))+((x24*x43)));
x81=((((-1.0)*x57))+(((-1.0)*x63)));
x82=(x57+x63);
x83=(x5*x73);
x84=(x10*x71);
x85=(x11*x74);
x86=(x7*x76);
x87=(x7*x80);
x88=(x5*x81);
x89=(x11*x79);
x90=(x83+(((-1.0)*x64)));
x91=(((x5*x75))+((x0*x41)));
x92=(((x7*((x61+(((-1.0)*x23*x4))))))+((x0*x46)));
IkReal x109=((1.0)*x23);
x93=(((x7*(((((-1.0)*x44))+(((-1.0)*x109*x2*x3))))))+(((-1.0)*x109*x46)));
x94=(x10*x91);
x95=(x10*x90);
x96=(x12*x92);
x97=(x12*x93);
x98=(x59+x58+x65+x66);
x99=(((x0*(((((0.279642)*x46))+x27+(((0.035)*x41))))))+x62+(((0.01)*x48)));
x100=(((x9*((x60+x84))))+((x12*x72)));
x101=(x85+x95);
x102=(x89+x94);
x103=(x101*x9);
x104=((-0.054778)+(((-0.279642)*x52))+(((-0.035)*x42))+((x6*(((0.01)+x36))))+(((-1.0)*x36*x46))+((x24*x41))+(((-0.275358)*x3)));
x105=(x103+x97);
x106=(x96+((x102*x9)));
x107=(((x5*x77))+x67+x86+(((-1.0)*x99)));
x108=((((-1.0)*x21))+x88+x82+x87+x98);
eerot[0]=(((x105*x78))+((x106*x54))+((x100*x68)));
IkReal x110=IKcos(j[3]);
IkReal x111=IKcos(j[5]);
IkReal x112=IKcos(j[4]);
IkReal x113=IKsin(j[3]);
IkReal x114=IKsin(j[5]);
IkReal x115=IKcos(j[6]);
IkReal x116=IKsin(j[4]);
IkReal x117=IKsin(j[6]);
IkReal x118=IKcos(j[7]);
IkReal x119=IKsin(j[7]);
IkReal x120=IKcos(j[0]);
IkReal x121=IKsin(j[9]);
IkReal x122=IKcos(j[9]);
IkReal x123=IKcos(j[8]);
IkReal x124=IKsin(j[8]);
IkReal x125=IKsin(j[0]);
IkReal x126=IKsin(j[2]);
IkReal x127=IKcos(j[2]);
IkReal x128=IKsin(j[1]);
IkReal x129=((1.0)*x110);
IkReal x130=((1.0)*x115);
IkReal x131=((1.0)*x127);
IkReal x132=((1.0)*x114);
IkReal x133=((1.0)*x113);
IkReal x134=(x116*x117);
IkReal x135=(x112*x114);
IkReal x136=(x120*x128);
IkReal x137=((-1.0)*x115);
IkReal x138=(x115*x116);
IkReal x139=(x111*x133);
IkReal x140=((1.0)*x111*x116);
IkReal x141=(x112*x113*x132);
IkReal x142=(x133*x134);
IkReal x143=((((-1.0)*x111*x129))+x141);
IkReal x144=(((x113*x132))+(((-1.0)*x111*x112*x129)));
IkReal x145=(((x112*x139))+((x114*x129)));
IkReal x146=(((x114*x116*x130))+(((1.0)*x112*x117)));
IkReal x147=((((-1.0)*x139))+(((-1.0)*x129*x135)));
eerot[1]=(((((((x121*((((x119*(((((-1.0)*x110*x134))+((x137*x147))))))+((x118*x144))))))+((x122*((((x124*((((x119*x144))+((x118*((((x129*x134))+(((-1.0)*x130*((((x111*x113))+((x110*x135))))))))))))))+((x123*((((x117*x147))+(((-1.0)*x129*x138))))))))))))*(((((-1.0)*x125*x126))+(((-1.0)*x131*x136))))))+((x120*((((x122*((((x123*((((x117*x143))+((x113*x138))))))+((x124*((((x119*x145))+(((-1.0)*x118*((x142+((x130*(((((-1.0)*x141))+((x110*x111))))))))))))))))))+((x121*((((x119*((((x137*x143))+x142))))+((x118*x145))))))))*(IKcos(j[1]))))+((((((x121*((((x119*x146))+(((-1.0)*x118*x140))))))+((x122*((((x124*(((((-1.0)*x119*x140))+(((-1.0)*x118*x146))))))+((x123*((((x112*x115))+(((-1.0)*x132*x134))))))))))))*(((((-1.0)*x125*x131))+((x126*x136)))))));
eerot[2]=((((((((((((((((-1.0)*(IKcos(j[4]))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((1.0)*(IKcos(j[5]))*(IKsin(j[4]))*(IKsin(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[4]))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((1.0)*(IKcos(j[6]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-1.0)*(IKcos(j[5]))*(IKcos(j[7]))*(IKsin(j[4]))))))*(IKcos(j[9]))))))*(((((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))))+(((IKcos(j[0]))*(IKsin(j[1]))*(IKsin(j[2]))))))))+(((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((1.0)*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[6]))*(IKsin(j[4]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(((((-1.0)*(IKsin(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[2]))*(IKsin(j[1]))))))))+(((((((((((((((1.0)*(IKcos(j[3]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))+(((-1.0)*(((((1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[7]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((-1.0)*(((((1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[0]))*(IKcos(j[1])))));
eetrans[0]=((((-0.018)*x54))+((x104*x68))+(((0.304)*x53))+((x108*x78))+((x16*x22))+((x107*x54))+(((0.304)*x13*x50))+(((-1.0)*x32*x45)));
eerot[3]=(((x105*x69))+((x106*x49))+((x100*x70)));
IkReal x148=IKcos(j[3]);
IkReal x149=IKcos(j[5]);
IkReal x150=IKcos(j[4]);
IkReal x151=IKsin(j[3]);
IkReal x152=IKsin(j[5]);
IkReal x153=IKcos(j[6]);
IkReal x154=IKsin(j[4]);
IkReal x155=IKsin(j[6]);
IkReal x156=IKcos(j[7]);
IkReal x157=IKsin(j[7]);
IkReal x158=IKsin(j[0]);
IkReal x159=IKsin(j[9]);
IkReal x160=IKcos(j[9]);
IkReal x161=IKcos(j[8]);
IkReal x162=IKsin(j[8]);
IkReal x163=IKcos(j[0]);
IkReal x164=IKsin(j[2]);
IkReal x165=IKcos(j[2]);
IkReal x166=IKsin(j[1]);
IkReal x167=((1.0)*x148);
IkReal x168=((1.0)*x154);
IkReal x169=((1.0)*x152);
IkReal x170=((1.0)*x151);
IkReal x171=((1.0)*x153);
IkReal x172=(x154*x155);
IkReal x173=(x150*x152);
IkReal x174=(x158*x166);
IkReal x175=((-1.0)*x153);
IkReal x176=(x153*x154);
IkReal x177=(x149*x170);
IkReal x178=(x150*x151*x169);
IkReal x179=(x151*x155*x168);
IkReal x180=(x178+(((-1.0)*x149*x167)));
IkReal x181=(((x151*x169))+(((-1.0)*x149*x150*x167)));
IkReal x182=(((x152*x167))+((x150*x177)));
IkReal x183=((((1.0)*x150*x155))+((x152*x153*x168)));
IkReal x184=((((-1.0)*x177))+(((-1.0)*x167*x173)));
eerot[4]=(((x158*((((x160*((((x161*((((x151*x176))+((x155*x180))))))+((x162*((((x157*x182))+(((-1.0)*x156*((((x171*(((((-1.0)*x178))+((x148*x149))))))+x179))))))))))))+((x159*((((x157*((((x175*x180))+x179))))+((x156*x182))))))))*(IKcos(j[1]))))+((((((x160*((((x161*((((x150*x153))+(((-1.0)*x152*x155*x168))))))+((x162*(((((-1.0)*x156*x183))+(((-1.0)*x149*x157*x168))))))))))+((x159*((((x157*x183))+(((-1.0)*x149*x156*x168))))))))*((((x164*x174))+((x163*x165))))))+((((((x160*((((x161*((((x155*x184))+(((-1.0)*x167*x176))))))+((x162*((((x157*x181))+((x156*(((((-1.0)*x171*((((x149*x151))+((x148*x173))))))+((x167*x172))))))))))))))+((x159*((((x156*x181))+((x157*((((x175*x184))+(((-1.0)*x148*x172))))))))))))*(((((-1.0)*x165*x174))+((x163*x164)))))));
eerot[5]=((((((((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((((((1.0)*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[6]))*(IKsin(j[4]))))))*(IKcos(j[8]))))+(((((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))))*(((((IKcos(j[0]))*(IKsin(j[2]))))+(((-1.0)*(IKcos(j[2]))*(IKsin(j[0]))*(IKsin(j[1]))))))))+(((((((((((((((1.0)*(IKcos(j[3]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((((((1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))+(((-1.0)*(((((1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[7]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((((((-1.0)*(((((1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((((((((((-1.0)*(IKcos(j[4]))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((1.0)*(IKcos(j[5]))*(IKsin(j[4]))*(IKsin(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[4]))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((1.0)*(IKcos(j[6]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-1.0)*(IKcos(j[5]))*(IKcos(j[7]))*(IKsin(j[4]))))))*(IKcos(j[9]))))))*(((((IKcos(j[0]))*(IKcos(j[2]))))+(((IKsin(j[0]))*(IKsin(j[1]))*(IKsin(j[2])))))))));
eetrans[1]=((((-0.304)*x45))+((x107*x49))+(((0.304)*x16*x51))+(((-0.018)*x49))+((x108*x69))+((x104*x70))+(((-1.0)*x22*x8))+(((-1.0)*x32*x53)));
IkReal x185=((1.0)*x33);
IkReal x186=((1.0)*x34);
eerot[6]=(((x100*x39))+((x13*(((((-1.0)*x186*x92))+(((-1.0)*x102*x185))))))+((x40*(((((-1.0)*x101*x185))+(((-1.0)*x186*x93)))))));
IkReal x187=((1.0)*x38);
IkReal x188=((1.0)*x30);
IkReal x189=(x4*x6);
IkReal x190=((1.0)*x37);
eerot[7]=((((-1.0)*x40*((((x28*((((x9*x93))+((x12*(((((-1.0)*x188*x74))+(((-1.0)*x187*x90))))))))))+((x35*((((x47*x74))+((x55*(((((-1.0)*x190*x73))+x64))))))))))))+((x39*((((x19*((((x12*(((((-1.0)*x188*x189))+(((-1.0)*x187*x71))))))+((x72*x9))))))+(((-1.0)*x18*((((x30*(((((-1.0)*x42))+(((-1.0)*x31*x46))))))+((x189*x38))))))))))+(((-1.0)*x13*((((x28*((((x12*((((x55*x79))+((x47*x91))))))+((x9*x92))))))+(((-1.0)*x35*((((x38*x79))+((x30*(((((-1.0)*x190*x75))+(((-1.0)*x0*x41)))))))))))))));
eerot[8]=((((((((((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))+(((-1.0)*(((((1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKcos(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))+(((((((-1.0)*(((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKcos(j[5]))*(IKsin(j[3]))))))*(IKsin(j[7]))))+(((-1.0)*(((((-1.0)*(((((IKcos(j[3]))*(IKcos(j[5]))))+(((-1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKsin(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((-1.0)*(((((1.0)*(IKcos(j[4]))*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[3]))*(IKsin(j[4]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))))*(IKsin(j[1]))))+(((((((((((((((-1.0)*(IKcos(j[4]))*(IKcos(j[6]))))+(((1.0)*(IKsin(j[4]))*(IKsin(j[5]))*(IKsin(j[6]))))))*(IKcos(j[8]))))+(((((((1.0)*(IKcos(j[5]))*(IKsin(j[4]))*(IKsin(j[7]))))+(((-1.0)*(((((-1.0)*(IKcos(j[4]))*(IKsin(j[6]))))+(((-1.0)*(IKcos(j[6]))*(IKsin(j[4]))*(IKsin(j[5]))))))*(IKcos(j[7]))))))*(IKsin(j[8]))))))*(IKsin(j[9]))))+(((((((((((1.0)*(IKcos(j[6]))*(IKsin(j[4]))*(IKsin(j[5]))))+(((1.0)*(IKcos(j[4]))*(IKsin(j[6]))))))*(IKsin(j[7]))))+(((-1.0)*(IKcos(j[5]))*(IKcos(j[7]))*(IKsin(j[4]))))))*(IKcos(j[9]))))))*(IKcos(j[1]))*(IKsin(j[2]))))+(((((((((((-1.0)*(((((-1.0)*(((((1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))+(((-1.0)*(((((IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))+(((IKcos(j[5]))*(IKsin(j[3]))))))*(IKcos(j[6]))))))*(IKcos(j[7]))))+(((-1.0)*(((((1.0)*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKsin(j[7]))))))*(IKsin(j[8]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((1.0)*(IKcos(j[3]))*(IKcos(j[6]))*(IKsin(j[4]))))))*(IKcos(j[8]))))))*(IKsin(j[9]))))+(((((((-1.0)*(((((1.0)*(IKsin(j[3]))*(IKsin(j[5]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKcos(j[5]))))))*(IKcos(j[7]))))+(((-1.0)*(((((-1.0)*(((((-1.0)*(IKcos(j[5]))*(IKsin(j[3]))))+(((-1.0)*(IKcos(j[3]))*(IKcos(j[4]))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((-1.0)*(IKcos(j[3]))*(IKsin(j[4]))*(IKsin(j[6]))))))*(IKsin(j[7]))))))*(IKcos(j[9]))))))*(IKcos(j[1]))*(IKcos(j[2])))));
IkReal x191=((1.0)*x37);
eetrans[2]=((0.1455)+(((-0.134)*x39))+((x40*(((((-1.0)*x191*x81))+x21+(((-1.0)*x87))+(((-1.0)*x82))+(((-1.0)*x98))))))+((x104*x39))+(((0.304)*x40))+(((0.018)*x13))+((x13*(((((-1.0)*x191*x77))+x99+(((-1.0)*x86))+(((-1.0)*x67)))))));
}

IKFAST_API int GetNumFreeParameters() { return 4; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0, 1, 2, 5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 10; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]), htj0=tan(pfree[0]*0.5);
j1=pfree[1]; cj1=cos(pfree[1]); sj1=sin(pfree[1]), htj1=tan(pfree[1]*0.5);
j2=pfree[2]; cj2=cos(pfree[2]); sj2=sin(pfree[2]), htj2=tan(pfree[2]*0.5);
j5=pfree[3]; cj5=cos(pfree[3]); sj5=sin(pfree[3]), htj5=tan(pfree[3]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

IkReal x192=IKcos(j1);
IkReal x193=((1.0)*x192);
new_r00=((((-1.0)*r02*x193*(IKcos(j0))))+(((-1.0)*r12*x193*(IKsin(j0))))+((r22*(IKsin(j1)))));
IkReal x194=IKcos(j1);
new_r01=(((r11*x194*(IKsin(j0))))+(((-1.0)*r21*(IKsin(j1))))+((r01*x194*(IKcos(j0)))));
IkReal x195=IKcos(j1);
new_r02=(((r00*x195*(IKcos(j0))))+((r10*x195*(IKsin(j0))))+(((-1.0)*r20*(IKsin(j1)))));
IkReal x196=IKcos(j1);
IkReal x197=IKsin(j1);
new_px=((0.018)+((py*x196*(IKsin(j0))))+(((0.1455)*x197))+(((-1.0)*pz*x197))+((px*x196*(IKcos(j0)))));
IkReal x198=IKcos(j2);
IkReal x199=IKsin(j0);
IkReal x200=IKsin(j1);
IkReal x201=IKcos(j0);
IkReal x202=IKsin(j2);
IkReal x203=(x198*x200);
new_r10=((((-1.0)*r12*x201*x202))+((r12*x199*x203))+((r22*x198*(IKcos(j1))))+((r02*x199*x202))+((r02*x201*x203)));
IkReal x204=IKsin(j0);
IkReal x205=IKsin(j2);
IkReal x206=IKcos(j2);
IkReal x207=IKcos(j0);
IkReal x208=IKsin(j1);
IkReal x209=((1.0)*x206);
new_r11=((((-1.0)*r21*x209*(IKcos(j1))))+(((-1.0)*r11*x204*x208*x209))+(((-1.0)*r01*x207*x208*x209))+((r11*x205*x207))+(((-1.0)*r01*x204*x205)));
IkReal x210=IKcos(j2);
IkReal x211=IKcos(j0);
IkReal x212=IKsin(j1);
IkReal x213=IKsin(j0);
IkReal x214=IKsin(j2);
IkReal x215=((1.0)*x210*x212);
new_r12=((((-1.0)*r10*x213*x215))+(((-1.0)*r00*x211*x215))+((r10*x211*x214))+(((-1.0)*r20*x210*(IKcos(j1))))+(((-1.0)*r00*x213*x214)));
IkReal x216=IKcos(j0);
IkReal x217=IKcos(j2);
IkReal x218=IKcos(j1);
IkReal x219=IKsin(j1);
IkReal x220=IKsin(j0);
IkReal x221=IKsin(j2);
IkReal x222=((1.0)*px);
IkReal x223=(x217*x218);
IkReal x224=(x217*x219);
new_py=((0.304)+(((0.1455)*x223))+(((-1.0)*x216*x222*x224))+(((-1.0)*x220*x221*x222))+(((-1.0)*pz*x223))+((py*x216*x221))+(((-1.0)*py*x220*x224)));
IkReal x225=IKcos(j2);
IkReal x226=IKcos(j0);
IkReal x227=IKsin(j0);
IkReal x228=IKsin(j1);
IkReal x229=IKsin(j2);
IkReal x230=((1.0)*x229);
new_r20=((((-1.0)*r12*x225*x226))+(((-1.0)*r02*x226*x228*x230))+(((-1.0)*r22*x230*(IKcos(j1))))+((r02*x225*x227))+(((-1.0)*r12*x227*x228*x230)));
IkReal x231=IKsin(j2);
IkReal x232=IKsin(j1);
IkReal x233=IKcos(j0);
IkReal x234=IKcos(j2);
IkReal x235=IKsin(j0);
IkReal x236=(x231*x232);
new_r21=(((r11*x235*x236))+((r21*x231*(IKcos(j1))))+(((-1.0)*r01*x234*x235))+((r11*x233*x234))+((r01*x233*x236)));
IkReal x237=IKsin(j2);
IkReal x238=IKcos(j0);
IkReal x239=IKsin(j1);
IkReal x240=IKcos(j2);
IkReal x241=IKsin(j0);
IkReal x242=(x237*x239);
new_r22=(((r20*x237*(IKcos(j1))))+((r10*x241*x242))+(((-1.0)*r00*x240*x241))+((r00*x238*x242))+((r10*x238*x240)));
IkReal x243=IKsin(j2);
IkReal x244=IKsin(j1);
IkReal x245=IKcos(j0);
IkReal x246=IKcos(j2);
IkReal x247=IKsin(j0);
IkReal x248=IKcos(j1);
IkReal x249=(x243*x248);
IkReal x250=(x243*x244);
new_pz=((0.134)+(((-0.1455)*x249))+((px*x245*x250))+(((-1.0)*px*x246*x247))+((pz*x249))+((py*x247*x250))+((py*x245*x246)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x251=((1.0)*px);
IkReal x252=((1.0)*pz);
IkReal x253=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x253))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x252)));
rxp0_2=(((py*r00))+(((-1.0)*r10*x251)));
rxp1_0=((((-1.0)*r21*x253))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x252)));
rxp1_2=((((-1.0)*r11*x251))+((py*r01)));
rxp2_0=((((-1.0)*r22*x253))+((pz*r12)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x252)));
rxp2_2=((((-1.0)*r12*x251))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x254=((0.056092)*py);
IkReal x255=((0.109556)*pz);
IkReal x256=((1.0)*pp);
IkReal x257=((0.0014)*sj5);
IkReal x258=((((0.07)*cj5))+(((-1.0)*px)));
IkReal x259=((0.001231145256)+x257);
IkReal x260=(x255+x256);
IkReal x261=(x254+x260);
IkReal x262=((0.3043377926)+(((-1.0)*x261)));
IkReal x263=((0.3043377926)+x254+(((-1.0)*x260)));
IkReal x264=(x259+(((-1.0)*x261)));
IkReal x265=(x259+x254+(((-1.0)*x260)));
IkReal gconst0=x258;
IkReal gconst1=x262;
IkReal gconst2=x264;
IkReal gconst3=x258;
IkReal gconst4=x262;
IkReal gconst5=x264;
IkReal gconst6=x263;
IkReal gconst7=x265;
IkReal gconst8=x263;
IkReal gconst9=x265;
IkReal x266=px*px;
IkReal x267=cj5*cj5;
IkReal x268=sj5*sj5;
IkReal x269=py*py;
IkReal x270=px*px*px;
IkReal x271=(cj5*py);
IkReal x272=((0.0048751090530912)*cj5);
IkReal x273=(px*py);
IkReal x274=(gconst0*gconst5);
IkReal x275=((0.01251194370624)*sj5);
IkReal x276=(cj5*gconst4);
IkReal x277=(gconst2*gconst4);
IkReal x278=((0.012585249856)*gconst0);
IkReal x279=((0.006953018688)*sj5);
IkReal x280=(gconst0*px);
IkReal x281=(gconst1*gconst4);
IkReal x282=(gconst7*gconst8);
IkReal x283=(cj5*px);
IkReal x284=(gconst1*gconst5);
IkReal x285=((0.112184)*gconst2);
IkReal x286=((0.112184)*gconst4);
IkReal x287=(gconst2*px);
IkReal x288=((0.001738254672)*sj5);
IkReal x289=(gconst2*gconst5);
IkReal x290=(cj5*sj5);
IkReal x291=((0.0434563668)*gconst8);
IkReal x292=(gconst6*gconst8);
IkReal x293=((1.0)*gconst3);
IkReal x294=((0.224368)*py);
IkReal x295=((1.0)*px);
IkReal x296=((2.0)*py);
IkReal x297=(gconst6*gconst9);
IkReal x298=(px*sj5);
IkReal x299=(gconst0*gconst8);
IkReal x300=(gconst7*gconst9);
IkReal x301=(gconst1*gconst3);
IkReal x302=((0.003476509344)*sj5);
IkReal x303=(gconst4*gconst7);
IkReal x304=(gconst0*gconst4);
IkReal x305=(gconst0*py);
IkReal x306=((0.00625597185312)*sj5);
IkReal x307=((0.0004226103)*x283);
IkReal x308=((0.00603729)*x266);
IkReal x309=((0.00603729)*x280);
IkReal x310=((0.312798592656)*x267);
IkReal x311=(gconst3*x266);
IkReal x312=((4.0)*x269);
IkReal x313=(gconst3*x296);
IkReal x314=((0.0001251194370624)*x268);
IkReal x315=((1.0)*x266);
IkReal x316=(px*x267);
IkReal x317=((0.0002502388741248)*x268);
IkReal x318=((0.0005004777482496)*x268);
IkReal x319=(gconst1*x266);
IkReal x320=((0.003041945676)*x267);
IkReal x321=((0.00012167782704)*sj5*x283);
IkReal x322=(x266*x288);
IkReal x323=((0.0434563668)*gconst7*x283);
IkReal x324=(x280*x288);
IkReal x325=((0.0434563668)*gconst2*x283);
IkReal x326=((0.00785288)*cj5*x266);
IkReal x327=((0.0004379180297184)*sj5*x267);
IkReal x328=(x266*x314);
IkReal x329=((8.758360594368e-6)*x268*x283);
IkReal x330=(gconst7*x283*x306);
IkReal x331=(x280*x314);
IkReal x332=(gconst2*x283*x306);
IkReal x333=(x332+x325);
IkReal x334=(x330+x323);
IkReal x335=(x309+x331+x324);
IkReal x336=(x308+x307+x321+x322+x328+x329);
op[0]=((((0.07)*x283*x297))+((x266*x297))+(((-1.0)*x292*x315))+(((-0.0049)*x267*x292))+((gconst8*x283*x306))+((x283*x291))+(((-1.0)*x282*x310))+x334+(((0.07)*x282*x283))+(((-1.0)*x300*x315))+(((-1.0)*x336))+((x266*x282))+(((-0.14)*x283*x292))+((gconst8*x320))+((gconst8*x327)));
op[1]=(((x273*x279))+(((-0.0350909973185207)*gconst7*x316))+(((-0.0869127336)*gconst8*x271))+((gconst9*x326))+(((-0.14)*x271*x282))+(((-0.0005497016)*gconst6*x316))+(((0.00140363989274083)*x266*x290))+((x273*x318))+(((-1.0)*gconst8*x271*x275))+(((-4.0)*x273*x297))+(((0.00024335565408)*sj5*x271))+(((-1.0)*gconst8*x326))+(((0.02414916)*x273))+((gconst7*x326))+(((0.000341257633716384)*x316))+(((-0.0869127336)*gconst7*x271))+(((1.7516721188736e-5)*x268*x271))+(((-0.0356406989185207)*gconst8*x316))+(((0.28)*x271*x292))+(((-1.0)*gconst6*x326))+(((0.0008452206)*x271))+(((4.0)*x273*x300))+(((-4.0)*x273*x282))+(((-0.14)*x271*x297))+(((-1.0)*gconst7*x271*x275))+(((4.0)*x273*x292))+(((0.0097502181061824)*cj5*x266))+(((4.9127396245929e-5)*x267*x298)));
op[2]=((((-1.0)*gconst6*gconst9*(px*px)))+(((-0.312798592656)*gconst4*gconst7*(cj5*cj5)))+(((-0.01570576)*cj5*gconst9*px*py))+((gconst5*gconst6*(px*px)))+(((4.0)*gconst7*gconst8*(py*py)))+(((-0.00603729)*gconst0*px))+(((2.0)*gconst7*gconst9*(px*px)))+(((0.0434563668)*cj5*gconst0*gconst8))+(((-0.00280727978548166)*cj5*px*py*sj5))+(((-0.00399831616747533)*(cj5*cj5)*(px*px)))+(((-0.0001251194370624)*gconst0*px*(sj5*sj5)))+(((-0.14)*cj5*gconst1*gconst8*px))+(((-0.312798592656)*gconst2*gconst8*(cj5*cj5)))+(((-1.0)*gconst0*gconst6*gconst8*px))+((gconst3*gconst7*gconst8*px))+((gconst0*gconst6*gconst9*px))+(((0.01570576)*cj5*gconst6*px*py))+(((0.006083891352)*gconst8*(cj5*cj5)))+(((-0.07)*cj5*gconst3*gconst6*gconst8))+(((-0.001738254672)*gconst0*px*sj5))+(((-1.0)*gconst3*gconst6*gconst8*px))+(((0.0434563668)*cj5*gconst2*px))+(((-1.0)*gconst7*gconst8*(px*px)))+(((-0.006953018688)*sj5*(py*py)))+(((0.00625597185312)*cj5*gconst0*gconst8*sj5))+(((0.07)*cj5*gconst2*gconst8*px))+(((-0.00012167782704)*cj5*px*sj5))+(((0.07)*cj5*gconst4*gconst7*px))+(((-0.001738254672)*sj5*(px*px)))+(((0.00625597185312)*cj5*gconst2*px*sj5))+(((-0.0049)*gconst1*gconst8*(cj5*cj5)))+((gconst2*gconst8*(px*px)))+((gconst1*gconst9*(px*px)))+(((-0.02414916)*(py*py)))+((gconst4*gconst7*(px*px)))+(((-0.01570576)*cj5*gconst7*px*py))+(((0.07)*cj5*gconst5*gconst6*px))+(((0.0004379180297184)*gconst4*sj5*(cj5*cj5)))+(((-0.0049)*gconst4*gconst6*(cj5*cj5)))+(((0.01570576)*cj5*gconst8*px*py))+(((-1.0)*gconst5*gconst7*(px*px)))+(((-0.625597185312)*gconst7*gconst8*(cj5*cj5)))+(((0.00625597185312)*cj5*gconst4*px*sj5))+(((0.003041945676)*gconst4*(cj5*cj5)))+(((-0.00603729)*(px*px)))+(((-1.0)*gconst1*gconst8*(px*px)))+(((0.01251194370624)*cj5*gconst8*px*sj5))+(((-1.0)*gconst2*gconst9*(px*px)))+(((-1.0)*gconst4*gconst6*(px*px)))+(((0.0434563668)*cj5*gconst7*px))+(((0.0869127336)*cj5*gconst8*px))+(((-0.0005004777482496)*(py*py)*(sj5*sj5)))+(((0.0434563668)*cj5*gconst4*px))+(((-0.0195004362123648)*cj5*px*py))+(((-8.758360594368e-6)*cj5*px*(sj5*sj5)))+(((4.0)*gconst6*gconst9*(py*py)))+(((-0.0001251194370624)*(px*px)*(sj5*sj5)))+(((-0.14)*cj5*gconst4*gconst6*px))+(((-0.0004226103)*cj5*px))+(((0.0008758360594368)*gconst8*sj5*(cj5*cj5)))+(((0.07)*cj5*gconst1*gconst9*px))+(((-0.07)*cj5*gconst6*gconst9*px))+(((0.00625597185312)*cj5*gconst7*px*sj5))+(((-4.0)*gconst7*gconst9*(py*py)))+(((-0.07)*cj5*gconst7*gconst8*px))+(((-0.07)*cj5*gconst0*gconst6*gconst8))+(((-4.0)*gconst6*gconst8*(py*py))));
op[3]=((((-4.0)*gconst1*gconst9*px*py))+(((0.0002502388741248)*gconst0*py*(sj5*sj5)))+(((0.03622374)*px*py))+(((-0.14)*cj5*gconst4*gconst7*py))+(((0.00785288)*cj5*gconst5*(px*px)))+(((0.00785288)*cj5*gconst2*(px*px)))+(((2.0)*gconst6*gconst9*px*py))+(((-0.112184)*gconst3*gconst6*(px*px)))+(((-0.00785288)*cj5*gconst4*(px*px)))+(((-4.0)*gconst5*gconst6*px*py))+(((-0.00785288)*cj5*gconst8*(px*px)))+(((2.0)*gconst0*gconst6*gconst8*py))+(((0.112184)*gconst7*(px*px*px)))+(((-4.0)*gconst2*gconst8*px*py))+(((-0.00785288)*cj5*gconst3*gconst8*px))+(((0.28)*cj5*gconst4*gconst6*py))+(((-0.00785288)*cj5*gconst0*gconst6*px))+(((0.01207458)*gconst0*py))+(((-0.01251194370624)*cj5*gconst2*py*sj5))+(((-0.1738254672)*cj5*gconst7*py))+(((4.0)*gconst5*gconst7*px*py))+(((0.000701819946370414)*cj5*gconst0*px*sj5))+(((4.0)*gconst4*gconst6*px*py))+(((3.5033442377472e-5)*cj5*py*(sj5*sj5)))+(((-0.0701819946370414)*gconst8*px*(cj5*cj5)))+(((2.0)*gconst7*gconst8*px*py))+(((4.0)*gconst1*gconst8*px*py))+(((0.000682515267432768)*px*(cj5*cj5)))+(((-0.01251194370624)*cj5*gconst4*py*sj5))+(((-2.0)*gconst3*gconst7*gconst8*py))+(((4.0)*gconst2*gconst9*px*py))+(((-4.0)*gconst4*gconst7*px*py))+(((-4.0)*gconst7*gconst9*px*py))+(((-0.0356406989185207)*gconst4*px*(cj5*cj5)))+(((-0.00785288)*cj5*gconst0*gconst8*px))+(((0.003476509344)*gconst0*py*sj5))+(((-0.02502388741248)*cj5*gconst8*py*sj5))+(((0.010429528032)*px*py*sj5))+(((-0.00785288)*cj5*gconst3*gconst6*px))+(((-0.112184)*gconst0*gconst8*(px*px)))+(((9.8254792491858e-5)*px*sj5*(cj5*cj5)))+(((-0.112184)*gconst8*(px*px*px)))+(((0.0048751090530912)*cj5*gconst0*px))+(((-2.0)*gconst0*gconst6*gconst9*py))+(((-0.00785288)*cj5*gconst6*(px*px)))+(((0.112184)*gconst0*gconst9*(px*px)))+(((-0.0350909973185207)*gconst2*px*(cj5*cj5)))+(((-0.14)*cj5*gconst2*gconst8*py))+(((0.00210545983911124)*cj5*sj5*(px*px)))+(((0.0007507166223744)*px*py*(sj5*sj5)))+(((-0.14)*cj5*gconst1*gconst9*py))+(((-0.0869127336)*cj5*gconst4*py))+(((2.0)*gconst3*gconst6*gconst8*py))+(((0.112184)*gconst9*(px*px*px)))+(((-0.00785288)*cj5*gconst1*(px*px)))+(((0.112184)*gconst3*gconst7*(px*px)))+(((0.0016904412)*cj5*py))+(((-0.00785288)*cj5*gconst7*(px*px)))+(((-0.0869127336)*cj5*gconst2*py))+(((0.0146253271592736)*cj5*(px*px)))+(((-0.112184)*gconst6*(px*px*px)))+(((-0.0005497016)*gconst1*px*(cj5*cj5)))+(((0.28)*cj5*gconst1*gconst8*py))+(((-0.0701819946370414)*gconst7*px*(cj5*cj5)))+(((0.00048671130816)*cj5*py*sj5))+(((-0.00785288)*cj5*gconst9*(px*px)))+(((-0.02502388741248)*cj5*gconst7*py*sj5))+(((-0.14)*cj5*gconst5*gconst6*py))+(((-0.1738254672)*cj5*gconst8*py)));
op[4]=((((-0.00561455957096331)*cj5*px*py*sj5))+(((-4.0)*gconst5*gconst7*(py*py)))+(((-1.0)*gconst5*gconst6*(px*px)))+(((-0.07)*cj5*gconst5*gconst6*px))+(((0.00012167782704)*cj5*px*sj5))+(((-0.07)*cj5*gconst3*gconst4*gconst6))+(((2.0)*gconst5*gconst7*(px*px)))+((gconst0*gconst1*gconst9*px))+(((0.0434563668)*cj5*gconst8*px))+(((0.224368)*gconst0*gconst8*px*py))+(((-0.01570576)*cj5*gconst2*px*py))+(((-0.00603729)*gconst0*px))+(((-1.0)*gconst1*gconst3*gconst8*px))+(((-0.07)*cj5*gconst0*gconst4*gconst6))+(((-0.00787329688636185)*(cj5*cj5)*(px*px)))+(((2.0)*gconst2*gconst9*(px*px)))+(((0.0434563668)*cj5*gconst0*gconst4))+(((-4.0)*gconst1*gconst8*(py*py)))+(((-0.07)*cj5*gconst0*gconst1*gconst8))+(((-0.0001251194370624)*gconst0*px*(sj5*sj5)))+(((0.0004226103)*cj5*px))+(((-0.224368)*gconst9*py*(px*px)))+(((0.001738254672)*sj5*(px*px)))+(((-0.07)*cj5*gconst2*gconst8*px))+(((-0.0049)*gconst1*gconst4*(cj5*cj5)))+(((-0.01570576)*cj5*gconst5*px*py))+(((-1.0)*gconst0*gconst1*gconst8*px))+((gconst0*gconst5*gconst6*px))+(((-4.0)*gconst2*gconst9*(py*py)))+(((0.0001251194370624)*(px*px)*(sj5*sj5)))+(((0.0869127336)*cj5*gconst0*gconst8))+(((-0.001738254672)*gconst0*px*sj5))+(((0.0008758360594368)*gconst4*sj5*(cj5*cj5)))+(((0.01251194370624)*cj5*gconst4*px*sj5))+(((0.0434563668)*cj5*gconst2*px))+(((-4.0)*gconst4*gconst6*(py*py)))+(((-1.0)*gconst3*gconst4*gconst6*px))+(((-0.07)*cj5*gconst4*gconst7*px))+(((0.01570576)*cj5*gconst4*px*py))+(((-1.0)*gconst0*gconst6*gconst9*px))+(((0.07)*cj5*gconst2*gconst4*px))+(((-0.07)*cj5*gconst1*gconst3*gconst8))+(((-1.0)*gconst7*gconst9*(px*px)))+(((0.00625597185312)*cj5*gconst2*px*sj5))+(((4.0)*gconst4*gconst7*(py*py)))+(((-0.625597185312)*gconst2*gconst8*(cj5*cj5)))+(((-1.0)*gconst0*gconst3*gconst6*gconst8))+(((0.003041945676)*gconst8*(cj5*cj5)))+(((0.00603729)*(px*px)))+(((0.0004379180297184)*gconst8*sj5*(cj5*cj5)))+(((0.006083891352)*gconst4*(cj5*cj5)))+(((8.758360594368e-6)*cj5*px*(sj5*sj5)))+(((-1.0)*gconst0*gconst4*gconst6*px))+(((-0.013906037376)*sj5*(py*py)))+((gconst2*gconst4*(px*px)))+(((-1.0)*gconst1*gconst9*(px*px)))+(((0.01251194370624)*cj5*gconst0*gconst8*sj5))+(((0.224368)*gconst6*py*(px*px)))+((gconst1*gconst5*(px*px)))+(((-1.0)*gconst1*gconst4*(px*px)))+(((-0.0390008724247296)*cj5*px*py))+(((4.0)*gconst1*gconst9*(py*py)))+(((0.00625597185312)*cj5*gconst0*gconst4*sj5))+(((-0.14)*cj5*gconst1*gconst4*px))+(((-0.00625597185312)*cj5*gconst7*px*sj5))+(((-0.04829832)*(py*py)))+(((-0.0010009554964992)*(py*py)*(sj5*sj5)))+(((0.224368)*gconst3*gconst6*px*py))+(((-1.0)*gconst2*gconst8*(px*px)))+(((-0.00088096748992)*cj5*gconst0*(px*px)))+(((-1.0)*gconst3*gconst7*gconst8*px))+(((-0.312798592656)*gconst7*gconst8*(cj5*cj5)))+(((0.07)*cj5*gconst1*gconst5*px))+(((-0.00176193497984)*cj5*(px*px*px)))+(((-1.0)*gconst2*gconst5*(px*px)))+(((4.0)*gconst2*gconst8*(py*py)))+(((-1.0)*gconst4*gconst7*(px*px)))+(((-0.00088096748992)*cj5*gconst3*(px*px)))+((gconst3*gconst4*gconst7*px))+(((0.01570576)*cj5*gconst1*px*py))+(((-0.224368)*gconst0*gconst9*px*py))+((gconst2*gconst3*gconst8*px))+(((0.224368)*gconst8*py*(px*px)))+(((-0.224368)*gconst7*py*(px*px)))+(((-0.625597185312)*gconst4*gconst7*(cj5*cj5)))+(((4.0)*gconst5*gconst6*(py*py)))+(((-0.07)*cj5*gconst1*gconst9*px))+(((-0.224368)*gconst3*gconst7*px*py))+(((0.00625597185312)*cj5*gconst8*px*sj5))+(((0.0869127336)*cj5*gconst4*px))+(((-0.0434563668)*cj5*gconst7*px))+(((-0.312798592656)*gconst2*gconst4*(cj5*cj5))));
op[5]=((((-0.00785288)*cj5*gconst5*(px*px)))+(((-0.01251194370624)*cj5*gconst7*py*sj5))+(((0.0008452206)*cj5*py))+(((0.0005004777482496)*gconst0*py*(sj5*sj5)))+(((-4.0)*gconst2*gconst9*px*py))+(((-0.02502388741248)*cj5*gconst4*py*sj5))+(((-0.00785288)*cj5*gconst4*(px*px)))+(((-0.00785288)*cj5*gconst3*gconst4*px))+(((-0.14)*cj5*gconst2*gconst4*py))+(((0.112184)*gconst2*(px*px*px)))+(((-2.0)*gconst0*gconst1*gconst9*py))+(((-0.112184)*gconst0*gconst4*(px*px)))+(((-0.0350909973185207)*gconst7*px*(cj5*cj5)))+(((-0.112184)*gconst0*gconst3*gconst6*px))+(((-0.00785288)*cj5*gconst0*gconst1*px))+(((2.0)*gconst1*gconst9*px*py))+(((0.006953018688)*gconst0*py*sj5))+(((0.112184)*gconst0*gconst5*(px*px)))+(((-2.0)*gconst2*gconst3*gconst8*py))+(((0.112184)*gconst2*gconst3*(px*px)))+(((-0.112184)*gconst3*gconst7*(px*px)))+(((-4.0)*gconst5*gconst7*px*py))+(((2.0)*gconst3*gconst4*gconst6*py))+(((4.0)*gconst2*gconst5*px*py))+(((-2.0)*gconst0*gconst5*gconst6*py))+(((-0.1738254672)*cj5*gconst4*py))+(((0.00024335565408)*cj5*py*sj5))+(((2.0)*gconst2*gconst8*px*py))+(((-0.0350909973185207)*gconst8*px*(cj5*cj5)))+(((-0.112184)*gconst9*(px*px*px)))+(((-4.0)*gconst1*gconst5*px*py))+(((2.0)*gconst4*gconst7*px*py))+(((-0.1738254672)*cj5*gconst2*py))+(((2.0)*gconst1*gconst3*gconst8*py))+(((-0.112184)*gconst3*gconst8*(px*px)))+(((-0.14)*cj5*gconst1*gconst5*py))+(((1.7516721188736e-5)*cj5*py*(sj5*sj5)))+(((-0.02502388741248)*cj5*gconst2*py*sj5))+(((-0.01251194370624)*cj5*gconst8*py*sj5))+(((-0.112184)*gconst0*gconst6*(px*px)))+(((4.0)*gconst1*gconst4*px*py))+(((-0.112184)*gconst1*gconst3*(px*px)))+(((-4.0)*gconst2*gconst4*px*py))+(((-0.0701819946370414)*gconst2*px*(cj5*cj5)))+(((-0.00785288)*cj5*gconst0*gconst4*px))+(((2.0)*gconst5*gconst6*px*py))+(((-0.0869127336)*cj5*gconst7*py))+(((-0.00785288)*cj5*gconst1*(px*px)))+(((-0.00785288)*cj5*gconst1*gconst3*px))+(((0.00140363989274083)*cj5*gconst0*px*sj5))+(((2.0)*gconst0*gconst4*gconst6*py))+(((-0.112184)*gconst0*gconst9*(px*px)))+(((-0.0701819946370414)*gconst4*px*(cj5*cj5)))+(((2.0)*gconst0*gconst1*gconst8*py))+(((0.28)*cj5*gconst1*gconst4*py))+(((0.02414916)*gconst0*py))+(((0.000341257633716384)*px*(cj5*cj5)))+(((-2.0)*gconst3*gconst4*gconst7*py))+(((-0.112184)*gconst1*(px*px*px)))+(((-0.00785288)*cj5*gconst2*(px*px)))+(((-0.112184)*gconst4*(px*px*px)))+(((0.112184)*gconst5*(px*px*px)))+(((-0.112184)*gconst7*(px*px*px)))+(((-0.112184)*gconst0*gconst3*gconst8*px))+(((0.0097502181061824)*cj5*gconst0*px))+(((4.9127396245929e-5)*px*sj5*(cj5*cj5)))+(((-0.0869127336)*cj5*gconst8*py)));
op[6]=(((x294*x319))+(((0.00625597185312)*x290*x299))+(((-0.224368)*x273*x274))+(((-0.00280727978548166)*x271*x298))+(((-1.0)*x277*x315))+(((-1.0)*x269*x318))+(((-1.0)*gconst6*x274*x295))+((gconst4*x266*x294))+(((-1.0)*gconst1*x293*x299))+(((-1.0)*gconst5*x266*x294))+(((-0.07)*x276*x287))+(((-1.0)*x280*x281))+(((-1.0)*x284*x315))+(((-1.0)*gconst1*gconst9*x280))+(((-0.02414916)*x269))+(((-1.0)*x278*x311))+(((-0.0195004362123648)*px*x271))+(((-0.07)*gconst0*gconst1*x276))+(((-0.00393664844318093)*x266*x267))+(((-1.0)*x303*x310))+(((-0.625597185312)*x267*x277))+(((-0.012585249856)*gconst3*x270))+(((-1.0)*x281*x312))+(((2.0)*x266*x289))+(((0.00625597185312)*x276*x298))+(((-0.224368)*gconst2*gconst3*x273))+(((-1.0)*px*x281*x293))+(((-1.0)*x269*x279))+(((-0.012585249856)*(x266*x266)))+((x284*x312))+x336+x335+(((-1.0)*gconst2*x266*x294))+(((-1.0)*gconst2*gconst9*x315))+(((-1.0)*gconst6*x293*x304))+(((-1.0)*gconst8*x287*x293))+((gconst4*x327))+((gconst4*x320))+((cj5*gconst0*x291))+(((0.224368)*x273*x304))+(((0.224368)*x273*x301))+((gconst0*x275*x276))+(((-0.07)*x276*x301))+(((-1.0)*gconst2*gconst8*x310))+((gconst1*px*x274))+(((-1.0)*x333))+(((-1.0)*x334))+(((-1.0)*px*x293*x303))+(((0.0869127336)*gconst0*x276))+(((-1.0)*x289*x312))+(((-1.0)*x270*x278))+(((0.0434563668)*px*x276))+(((-1.0)*gconst5*gconst7*x315))+((x277*x312))+(((-0.07)*x283*x284))+((gconst3*px*x277)));
op[7]=(((x305*x317))+(((-1.0)*x270*x285))+(((-0.112184)*x266*x274))+(((-1.0)*x277*x313))+(((-0.112184)*x280*x301))+(((2.0)*x273*x277))+(((-1.0)*x286*x311))+(((-0.0350909973185207)*x267*x287))+(((-1.0)*gconst2*x271*x275))+(((-1.0)*gconst1*x274*x296))+(((-0.0869127336)*gconst4*x271))+(((-1.0)*x285*x311))+(((2.0)*x273*x284))+(((0.01207458)*x305))+((x272*x280))+(((-1.0)*gconst3*x280*x286))+(((-1.0)*x273*x317))+(((-0.01207458)*x273))+(((0.000701819946370414)*x280*x290))+((x281*x313))+(((-1.0)*gconst4*x271*x275))+(((-0.000701819946370414)*x266*x290))+(((-4.0)*x273*x289))+((x302*x305))+(((-1.0)*x273*x302))+(((-1.0)*x266*x272))+(((-0.0350909973185207)*gconst4*x316))+(((-0.0869127336)*gconst2*x271))+(((-0.112184)*gconst5*x270))+((gconst0*x281*x296))+(((-0.112184)*gconst0*x319)));
op[8]=((((-1.0)*x277*x310))+(((-1.0)*px*x277*x293))+((gconst0*x276*x306))+(((-1.0)*gconst1*x274*x295))+(((0.0434563668)*gconst0*x276))+(((-1.0)*gconst0*x281*x293))+x335+(((-1.0)*x333))+(((-1.0)*x289*x315)));
polyroots8(op,zeror,numroots);
IkReal j3array[8], cj3array[8], sj3array[8], tempj3array[1];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ++ij3)
{
IkReal htj3 = zeror[ij3];
tempj3array[0]=((2.0)*(atan(htj3)));
for(int kj3 = 0; kj3 < 1; ++kj3)
{
j3array[numsolutions] = tempj3array[kj3];
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
numsolutions++;
}
}
bool j3valid[8]={true,true,true,true,true,true,true,true};
_nj3 = 8;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
htj3 = IKtan(j3/2);

_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
{
IkReal j6eval[2];
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x337=cj3*cj3;
IkReal x338=px*px;
IkReal x339=pz*pz;
IkReal x340=py*py;
IkReal x341=(cj5*pz);
IkReal x342=(px*sj3);
IkReal x343=(cj5*x339);
IkReal x344=(cj3*cj5*py);
IkReal x345=(cj5*x338);
IkReal x346=((264.04680134497)*cj5*x337);
IkReal x347=((0.550716)*cj5*x337);
j4eval[0]=(cj5+(((-14.8109131810421)*cj5*x342))+(((14.8109131810421)*x344))+(((-264.04680134497)*x337*x345))+(((28.9279113681495)*x341))+(((264.04680134497)*x343))+(((264.04680134497)*x345))+(((-528.09360268994)*x342*x344))+((x340*x346)));
j4eval[1]=IKsign(((((-0.550716)*x337*x345))+(((0.060334242096)*x341))+(((-0.030890761872)*cj5*x342))+(((0.550716)*x343))+(((0.550716)*x345))+(((0.030890761872)*x344))+(((-1.101432)*x342*x344))+((x340*x347))+(((0.0020856757104984)*cj5))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( (((-0.975968434013407)+(((0.35667466410794)*cj3*py))+(((0.696638549187219)*pz))+(((-0.35667466410794)*px*sj3))+(((6.35874392262605)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-0.975968434013407)+(((0.35667466410794)*cj3*py))+(((0.696638549187219)*pz))+(((-0.35667466410794)*px*sj3))+(((6.35874392262605)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x348=IKasin(((-0.975968434013407)+(((0.35667466410794)*cj3*py))+(((0.696638549187219)*pz))+(((-0.35667466410794)*px*sj3))+(((6.35874392262605)*pp))));
j6array[0]=((-1.28429214449518)+(((1.0)*x348)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((1.85730050909461)+(((-1.0)*x348)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j4eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
j4eval[0]=((-3.53874046591082)+(((-1.0)*sj6))+(((-3.39432231765567)*cj6)));
j4eval[1]=IKsign(((-0.157271676328)+(((-0.150853323672)*cj6))+(((-0.04444284)*sj6))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
IkReal x349=(pz*sj6);
IkReal x350=(cj6*pz);
IkReal x351=(cj3*py);
IkReal x352=((3.58604002617468)*cj6);
IkReal x353=((0.035)*cj6);
IkReal x354=(px*sj3);
IkReal x355=(sj6*x354);
j4eval[0]=((-1.67474529463219)+(((-28.2127088436402)*pz))+(((-1.0)*sj6))+(((-28.651640142844)*sj6*x351))+(((-3.58604002617468)*x349))+(((4.61062289079602)*x354))+(((-28.651640142844)*x350))+((x351*x352))+(((-4.61062289079602)*x351))+(((28.651640142844)*x355))+(((-1.46890546517061)*cj6))+(((-1.0)*x352*x354)));
j4eval[1]=IKsign(((-0.016345630524)+(((-0.279642)*x350))+(((0.045)*x354))+(((-0.275358)*pz))+(((-0.279642)*sj6*x351))+(((-0.045)*x351))+(((0.279642)*x355))+((x351*x353))+(((-0.035)*x349))+(((-1.0)*x353*x354))+(((-0.014336619476)*cj6))+(((-0.009760069532)*sj6))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=1.0;
cj5=0;
j5=1.5707963267949;
IkReal x356=(cj6*pz);
IkReal x357=(px*sj3);
IkReal x358=((0.279642)*cj6);
IkReal x359=((0.035)*sj6);
IkReal x360=((53.1873326464008)*cj6);
IkReal x361=(cj3*py);
IkReal x362=((6.65692793866453)*sj6);
IkReal x363=(pz*sj6);
j4eval[0]=((1.0)+((x361*x362))+(((-2.72679550673676)*sj6))+(((1.85634513002512)*cj6))+(((-8.55890734971154)*pz))+(((52.3725246667082)*x361))+(((-52.3725246667082)*x357))+(((6.65692793866453)*x356))+(((-53.1873326464008)*x363))+(((-1.0)*x357*x362))+(((-1.0)*x357*x360))+((x360*x361)));
j4eval[1]=IKsign(((0.005257680468)+(((-0.279642)*x363))+(((0.275358)*x361))+(((-0.014336619476)*sj6))+(((-0.045)*pz))+((x358*x361))+(((-0.275358)*x357))+(((-1.0)*x357*x358))+(((-1.0)*x357*x359))+((x359*x361))+(((0.035)*x356))+(((0.009760069532)*cj6))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x364=cj6*cj6;
IkReal x365=(px*sj3);
IkReal x366=((0.279642)*cj6);
IkReal x367=((0.035)*sj6);
IkReal x368=(cj3*py);
IkReal x369=(cj6*sj6);
CheckValue<IkReal> x370=IKPowWithIntegerCheck(IKsign(((0.005257680468)+(((0.275358)*x368))+(((-0.014336619476)*sj6))+(((-0.045)*pz))+(((0.035)*cj6*pz))+((x366*x368))+(((-0.275358)*x365))+(((-0.279642)*pz*sj6))+(((0.009760069532)*cj6))+(((-1.0)*x365*x367))+(((-1.0)*x365*x366))+((x367*x368)))),-1);
if(!x370.valid){
continue;
}
CheckValue<IkReal> x371 = IKatan2WithCheck(IkReal(((0.07404639888)+(((0.01927506)*sj6))+(((0.076974648164)*x364))+(((-0.109556)*pz))+(((0.154003323672)*cj6))+(((-1.0)*(pz*pz)))+(((0.01957494)*x369)))),IkReal(((0.020642276212)+(((-0.028046)*pz))+(((0.076974648164)*x369))+(((-1.0)*pz*x368))+(((0.00294636)*cj6))+(((0.078576661836)*sj6))+((pz*x365))+(((-0.054778)*x368))+(((-0.01957494)*x364))+(((0.054778)*x365)))),IKFAST_ATAN2_MAGTHRESH);
if(!x371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x370.value)))+(x371.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x372=IKsin(j4);
IkReal x373=IKcos(j4);
IkReal x374=(px*sj3);
IkReal x375=(cj3*py);
IkReal x376=((0.035)*cj6);
IkReal x377=((0.279642)*cj6);
IkReal x378=((0.279642)*sj6);
IkReal x379=((1.0)*x372);
IkReal x380=((0.035)*x372);
IkReal x381=((1.0)*x373);
IkReal x382=((0.550716)*x372);
IkReal x383=((0.09)*x373);
IkReal x384=(sj6*x373);
evalcond[0]=((-0.275358)+(((-0.035)*sj6))+(((0.028046)*x372))+(((-1.0)*x377))+((x372*x375))+(((-1.0)*x374*x379))+(((-0.054778)*x373))+(((-1.0)*pz*x381)));
evalcond[1]=((0.045)+(((-1.0)*x376))+(((-1.0)*x375*x381))+x378+(((-0.028046)*x373))+(((-1.0)*pz*x379))+(((-0.054778)*x372))+((x373*x374)));
evalcond[2]=((-0.054778)+(((-1.0)*x372*x376))+(((-0.275358)*x373))+((x372*x378))+(((-1.0)*pz))+(((-1.0)*x373*x377))+(((-0.035)*x384))+(((0.045)*x372)));
evalcond[3]=((-0.028046)+(((-1.0)*x375))+((sj6*x380))+(((0.275358)*x372))+((x372*x377))+x374+(((-1.0)*x373*x376))+((x373*x378))+(((0.045)*x373)));
evalcond[4]=((-0.0022095874)+(((-0.109556)*pz))+(((-1.0)*x374*x383))+(((-1.0)*x374*x382))+(((0.09)*pz*x372))+(((-0.550716)*pz*x373))+(((0.020375400936)*x372))+(((-0.056092)*x375))+(((0.056092)*x374))+(((-1.0)*pp))+((x375*x382))+((x375*x383))+(((-0.027642981048)*x373)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1993=cj6*cj6;
IkReal x1994=(cj3*py);
IkReal x1995=(px*sj3);
IkReal x1996=((0.279642)*sj6);
IkReal x1997=((0.035)*cj6);
IkReal x1998=(cj6*sj6);
CheckValue<IkReal> x1999 = IKatan2WithCheck(IkReal(((-0.023714883788)+(((-0.028046)*pz))+(((0.01957494)*x1993))+(((-0.076974648164)*x1998))+(((-0.054778)*x1994))+(((0.054778)*x1995))+(((-0.078576661836)*sj6))+(((-0.00294636)*cj6))+((pz*x1995))+(((-1.0)*pz*x1994)))),IkReal(((-0.07722401888)+(((0.01957494)*x1998))+(pz*pz)+(((0.109556)*pz))+(((0.076974648164)*x1993))+(((-0.02516778)*sj6))+(((0.00315)*cj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1999.valid){
continue;
}
CheckValue<IkReal> x2000=IKPowWithIntegerCheck(IKsign(((-0.016345630524)+(((-0.279642)*cj6*pz))+(((-0.275358)*pz))+(((-0.045)*x1994))+(((-0.035)*pz*sj6))+((x1995*x1996))+((x1994*x1997))+(((0.045)*x1995))+(((-1.0)*x1995*x1997))+(((-1.0)*x1994*x1996))+(((-0.014336619476)*cj6))+(((-0.009760069532)*sj6)))),-1);
if(!x2000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1999.value)+(((1.5707963267949)*(x2000.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2001=IKsin(j4);
IkReal x2002=IKcos(j4);
IkReal x2003=(px*sj3);
IkReal x2004=(cj3*py);
IkReal x2005=((0.035)*cj6);
IkReal x2006=((0.279642)*cj6);
IkReal x2007=((0.279642)*sj6);
IkReal x2008=((1.0)*x2001);
IkReal x2009=((0.035)*x2001);
IkReal x2010=((1.0)*x2002);
IkReal x2011=((0.550716)*x2001);
IkReal x2012=((0.09)*x2002);
IkReal x2013=(sj6*x2002);
evalcond[0]=((-0.275358)+(((-0.035)*sj6))+(((-1.0)*pz*x2010))+(((-1.0)*x2003*x2008))+(((-0.054778)*x2002))+(((-1.0)*x2006))+(((0.028046)*x2001))+((x2001*x2004)));
evalcond[1]=((0.045)+((x2002*x2003))+x2007+(((-1.0)*pz*x2008))+(((-1.0)*x2004*x2010))+(((-0.028046)*x2002))+(((-0.054778)*x2001))+(((-1.0)*x2005)));
evalcond[2]=((-0.054778)+(((-0.035)*x2013))+(((-1.0)*x2002*x2006))+(((-0.275358)*x2002))+(((-1.0)*x2001*x2005))+(((-1.0)*pz))+((x2001*x2007))+(((0.045)*x2001)));
evalcond[3]=((-0.028046)+(((0.275358)*x2001))+((x2002*x2007))+x2003+(((-1.0)*x2002*x2005))+((sj6*x2009))+(((-1.0)*x2004))+((x2001*x2006))+(((0.045)*x2002)));
evalcond[4]=((-0.0022095874)+(((-0.056092)*x2004))+(((0.056092)*x2003))+(((-0.027642981048)*x2002))+(((-0.109556)*pz))+((x2004*x2012))+((x2004*x2011))+(((-1.0)*x2003*x2012))+(((-1.0)*x2003*x2011))+(((-1.0)*pp))+(((0.020375400936)*x2001))+(((0.09)*pz*x2001))+(((-0.550716)*pz*x2002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2014=(px*sj3);
IkReal x2015=((0.279642)*cj6);
IkReal x2016=((0.035)*sj6);
IkReal x2017=(cj3*py);
IkReal x2018=((0.035)*cj6);
IkReal x2019=((0.279642)*sj6);
CheckValue<IkReal> x2020 = IKatan2WithCheck(IkReal(((-0.010187700468)+(((-1.0)*pz*x2019))+(((-0.045)*pz))+((x2014*x2015))+((x2014*x2016))+(((-0.005925609532)*cj6))+(((0.275358)*x2014))+(((-1.0)*x2015*x2017))+(((-1.0)*x2016*x2017))+(((-0.016299839476)*sj6))+(((-0.275358)*x2017))+((pz*x2018)))),IkReal(((0.013821490524)+(((-0.005925609532)*sj6))+((x2014*x2019))+(((-0.045)*x2017))+(((0.045)*x2014))+(((0.275358)*pz))+(((-1.0)*x2014*x2018))+(((0.016299839476)*cj6))+((x2017*x2018))+(((-1.0)*x2017*x2019))+((pz*x2016))+((pz*x2015)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2020.valid){
continue;
}
CheckValue<IkReal> x2021=IKPowWithIntegerCheck(IKsign(((-0.157271676328)+(((-0.150853323672)*cj6))+(((-0.04444284)*sj6)))),-1);
if(!x2021.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2020.value)+(((1.5707963267949)*(x2021.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2022=IKsin(j4);
IkReal x2023=IKcos(j4);
IkReal x2024=(px*sj3);
IkReal x2025=(cj3*py);
IkReal x2026=((0.035)*cj6);
IkReal x2027=((0.279642)*cj6);
IkReal x2028=((0.279642)*sj6);
IkReal x2029=((1.0)*x2022);
IkReal x2030=((0.035)*x2022);
IkReal x2031=((1.0)*x2023);
IkReal x2032=((0.550716)*x2022);
IkReal x2033=((0.09)*x2023);
IkReal x2034=(sj6*x2023);
evalcond[0]=((-0.275358)+(((-0.035)*sj6))+(((-1.0)*pz*x2031))+((x2022*x2025))+(((-1.0)*x2024*x2029))+(((-0.054778)*x2023))+(((-1.0)*x2027))+(((0.028046)*x2022)));
evalcond[1]=((0.045)+x2028+(((-0.028046)*x2023))+(((-1.0)*pz*x2029))+((x2023*x2024))+(((-0.054778)*x2022))+(((-1.0)*x2026))+(((-1.0)*x2025*x2031)));
evalcond[2]=((-0.054778)+(((-1.0)*x2022*x2026))+(((-1.0)*x2023*x2027))+(((-0.275358)*x2023))+((x2022*x2028))+(((-0.035)*x2034))+(((-1.0)*pz))+(((0.045)*x2022)));
evalcond[3]=((-0.028046)+(((-1.0)*x2023*x2026))+x2024+((x2022*x2027))+((x2023*x2028))+(((-1.0)*x2025))+((sj6*x2030))+(((0.045)*x2023))+(((0.275358)*x2022)));
evalcond[4]=((-0.0022095874)+(((-0.027642981048)*x2023))+(((-0.550716)*pz*x2023))+((x2025*x2033))+((x2025*x2032))+(((-0.109556)*pz))+(((0.056092)*x2024))+(((-1.0)*pp))+(((-1.0)*x2024*x2033))+(((-1.0)*x2024*x2032))+(((0.020375400936)*x2022))+(((0.09)*pz*x2022))+(((-0.056092)*x2025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( (((-0.975881121279537)+(((0.359925798082159)*cj3*py))+(((6.41670466523139)*pp))+(((0.70298849630409)*pz))+(((-0.359925798082159)*px*sj3)))) < -1-IKFAST_SINCOS_THRESH || (((-0.975881121279537)+(((0.359925798082159)*cj3*py))+(((6.41670466523139)*pp))+(((0.70298849630409)*pz))+(((-0.359925798082159)*px*sj3)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2035=IKasin(((-0.975881121279537)+(((0.359925798082159)*cj3*py))+(((6.41670466523139)*pp))+(((0.70298849630409)*pz))+(((-0.359925798082159)*px*sj3))));
j6array[0]=((-1.3557411097506)+(((1.0)*x2035)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((1.78585154383919)+(((-1.0)*x2035)));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal j4eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x2036=(px*sj3);
IkReal x2037=((5.90656536023677)*cj6);
IkReal x2038=((47.1921071562094)*sj6);
IkReal x2039=(cj3*py);
IkReal x2040=(pz*sj6);
IkReal x2041=(cj6*pz);
IkReal x2042=((0.279642)*sj6);
IkReal x2043=((0.035)*cj6);
j4eval[0]=((2.42716136565038)+(((46.4691435561164)*pz))+(((2.75074477789604)*cj6))+(((-1.0)*x2036*x2037))+(((-1.0)*sj6))+(((5.90656536023677)*x2040))+(((47.1921071562094)*x2041))+(((4.21897525731198)*x2036))+(((-4.21897525731198)*x2039))+((x2036*x2038))+(((-1.0)*x2038*x2039))+((x2037*x2039)));
j4eval[1]=IKsign(((0.014382410524)+(((-0.005925609532)*sj6))+(((-1.0)*x2039*x2042))+((x2039*x2043))+(((0.275358)*pz))+(((0.279642)*x2041))+(((0.016299839476)*cj6))+(((0.025)*x2036))+(((-1.0)*x2036*x2043))+(((0.035)*x2040))+(((-0.025)*x2039))+((x2036*x2042))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x2044=(px*sj3);
IkReal x2045=((0.279642)*cj6);
IkReal x2046=((0.035)*sj6);
IkReal x2047=(cj3*py);
IkReal x2048=((5.90656536023677)*sj6);
IkReal x2049=((47.1921071562094)*cj6);
IkReal x2050=(cj6*pz);
IkReal x2051=(pz*sj6);
j4eval[0]=((1.53438062681988)+cj6+(((2.75074477789604)*sj6))+(((-1.0)*x2044*x2048))+(((-1.0)*x2044*x2049))+(((46.4691435561164)*x2047))+(((4.21897525731198)*pz))+(((-46.4691435561164)*x2044))+(((47.1921071562094)*x2051))+(((-5.90656536023677)*x2050))+((x2047*x2049))+((x2047*x2048)));
j4eval[1]=IKsign(((0.009092140468)+(((0.025)*pz))+(((0.016299839476)*sj6))+(((-1.0)*x2044*x2046))+(((-1.0)*x2044*x2045))+(((-0.035)*x2050))+((x2046*x2047))+(((0.279642)*x2051))+((x2045*x2047))+(((-0.275358)*x2044))+(((0.275358)*x2047))+(((0.005925609532)*cj6))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj5=-1.0;
cj5=0;
j5=-1.5707963267949;
IkReal x2052=cj3*cj3;
IkReal x2053=px*px;
IkReal x2054=py*py;
IkReal x2055=pz*pz;
IkReal x2056=(cj3*py);
IkReal x2057=(px*sj3);
IkReal x2058=((264.04680134497)*x2053);
IkReal x2059=(x2052*x2054);
j4eval[0]=((1.0)+(((-528.09360268994)*x2056*x2057))+x2058+(((264.04680134497)*x2059))+(((264.04680134497)*x2055))+(((14.8109131810421)*x2056))+(((-14.8109131810421)*x2057))+(((-1.0)*x2052*x2058))+(((28.9279113681495)*pz)));
j4eval[1]=IKsign(((0.0037872074)+x2053+x2055+x2059+(((0.056092)*x2056))+(((-1.0)*x2052*x2053))+(((0.109556)*pz))+(((-2.0)*x2056*x2057))+(((-0.056092)*x2057))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2060=cj3*cj3;
IkReal x2061=px*px;
IkReal x2062=(cj3*py);
IkReal x2063=(px*sj3);
IkReal x2064=((0.279642)*cj6);
IkReal x2065=((0.035)*sj6);
IkReal x2066=((0.035)*cj6);
IkReal x2067=((0.279642)*sj6);
CheckValue<IkReal> x2068=IKPowWithIntegerCheck(IKsign(((0.0037872074)+x2061+(((-1.0)*x2060*x2061))+(((-2.0)*x2062*x2063))+(pz*pz)+((x2060*(py*py)))+(((0.109556)*pz))+(((-0.056092)*x2063))+(((0.056092)*x2062)))),-1);
if(!x2068.valid){
continue;
}
CheckValue<IkReal> x2069 = IKatan2WithCheck(IkReal(((0.006353240468)+(((-0.014336619476)*sj6))+(((-1.0)*x2063*x2064))+(((-1.0)*x2063*x2065))+(((-0.275358)*x2063))+((pz*x2066))+((x2062*x2064))+((x2062*x2065))+(((0.275358)*x2062))+(((0.009760069532)*cj6))+(((-1.0)*pz*x2067))+(((-0.025)*pz)))),IkReal(((-0.015784710524)+(((-0.275358)*pz))+(((-1.0)*x2063*x2066))+(((-0.025)*x2062))+(((-1.0)*x2062*x2067))+(((0.025)*x2063))+((x2062*x2066))+((x2063*x2067))+(((-1.0)*pz*x2065))+(((-1.0)*pz*x2064))+(((-0.014336619476)*cj6))+(((-0.009760069532)*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2068.value)))+(x2069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2070=IKsin(j4);
IkReal x2071=IKcos(j4);
IkReal x2072=((0.035)*cj6);
IkReal x2073=(cj3*py);
IkReal x2074=(px*sj3);
IkReal x2075=((0.279642)*cj6);
IkReal x2076=((0.279642)*sj6);
IkReal x2077=((0.035)*x2070);
IkReal x2078=(pz*x2070);
IkReal x2079=(pz*x2071);
IkReal x2080=((0.550716)*x2070);
IkReal x2081=((0.05)*x2071);
IkReal x2082=(sj6*x2071);
evalcond[0]=((0.025)+x2078+x2076+(((-1.0)*x2072))+(((-1.0)*x2071*x2074))+((x2071*x2073))+(((0.054778)*x2070))+(((0.028046)*x2071)));
evalcond[1]=((-0.275358)+(((-0.035)*sj6))+(((-1.0)*x2070*x2074))+(((-0.054778)*x2071))+(((-1.0)*x2075))+((x2070*x2073))+(((-1.0)*x2079))+(((0.028046)*x2070)));
evalcond[2]=((-0.054778)+(((-1.0)*x2070*x2076))+(((-1.0)*x2071*x2075))+(((-0.025)*x2070))+((x2070*x2072))+(((-1.0)*pz))+(((-0.035)*x2082))+(((-0.275358)*x2071)));
evalcond[3]=((-0.028046)+((sj6*x2077))+(((-1.0)*x2071*x2076))+x2074+(((-0.025)*x2071))+((x2070*x2075))+((x2071*x2072))+(((-1.0)*x2073))+(((0.275358)*x2070)));
evalcond[4]=((-0.0008095874)+(((0.056092)*x2074))+(((-0.031569421048)*x2071))+(((-0.109556)*pz))+(((-1.0)*x2074*x2080))+(((0.012706480936)*x2070))+((x2074*x2081))+(((-1.0)*x2073*x2081))+((x2073*x2080))+(((-1.0)*pp))+(((-0.056092)*x2073))+(((-0.05)*x2078))+(((-0.550716)*x2079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2083=cj6*cj6;
IkReal x2084=(px*sj3);
IkReal x2085=((0.279642)*cj6);
IkReal x2086=((0.035)*sj6);
IkReal x2087=(cj3*py);
IkReal x2088=(cj6*sj6);
CheckValue<IkReal> x2089 = IKatan2WithCheck(IkReal(((0.07404639888)+(((0.076974648164)*x2083))+(((0.01927506)*sj6))+(((-0.109556)*pz))+(((0.154003323672)*cj6))+(((-1.0)*(pz*pz)))+(((0.01957494)*x2088)))),IkReal(((-0.018207723788)+(((-0.054778)*x2087))+(((-0.028046)*pz))+(((-0.077876661836)*sj6))+(((0.054778)*x2084))+((pz*x2084))+(((-0.076974648164)*x2088))+(((-1.0)*pz*x2087))+(((0.00264648)*cj6))+(((0.01957494)*x2083)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2089.valid){
continue;
}
CheckValue<IkReal> x2090=IKPowWithIntegerCheck(IKsign(((0.009092140468)+(((0.025)*pz))+(((0.279642)*pz*sj6))+((x2085*x2087))+(((-0.275358)*x2084))+((x2086*x2087))+(((0.016299839476)*sj6))+(((-1.0)*x2084*x2085))+(((-1.0)*x2084*x2086))+(((-0.035)*cj6*pz))+(((0.275358)*x2087))+(((0.005925609532)*cj6)))),-1);
if(!x2090.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2089.value)+(((1.5707963267949)*(x2090.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2091=IKsin(j4);
IkReal x2092=IKcos(j4);
IkReal x2093=((0.035)*cj6);
IkReal x2094=(cj3*py);
IkReal x2095=(px*sj3);
IkReal x2096=((0.279642)*cj6);
IkReal x2097=((0.279642)*sj6);
IkReal x2098=((0.035)*x2091);
IkReal x2099=(pz*x2091);
IkReal x2100=(pz*x2092);
IkReal x2101=((0.550716)*x2091);
IkReal x2102=((0.05)*x2092);
IkReal x2103=(sj6*x2092);
evalcond[0]=((0.025)+(((0.054778)*x2091))+(((-1.0)*x2093))+x2097+x2099+((x2092*x2094))+(((0.028046)*x2092))+(((-1.0)*x2092*x2095)));
evalcond[1]=((-0.275358)+(((-1.0)*x2096))+(((-0.035)*sj6))+((x2091*x2094))+(((-1.0)*x2091*x2095))+(((0.028046)*x2091))+(((-1.0)*x2100))+(((-0.054778)*x2092)));
evalcond[2]=((-0.054778)+(((-0.025)*x2091))+(((-0.035)*x2103))+(((-1.0)*x2091*x2097))+((x2091*x2093))+(((-1.0)*pz))+(((-1.0)*x2092*x2096))+(((-0.275358)*x2092)));
evalcond[3]=((-0.028046)+(((-0.025)*x2092))+(((0.275358)*x2091))+((x2091*x2096))+x2095+((sj6*x2098))+((x2092*x2093))+(((-1.0)*x2092*x2097))+(((-1.0)*x2094)));
evalcond[4]=((-0.0008095874)+(((-0.05)*x2099))+(((-0.056092)*x2094))+(((-0.109556)*pz))+(((-0.550716)*x2100))+(((-1.0)*pp))+(((-1.0)*x2095*x2101))+(((0.056092)*x2095))+(((0.012706480936)*x2091))+(((-1.0)*x2094*x2102))+((x2095*x2102))+(((-0.031569421048)*x2092))+((x2094*x2101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2104=cj6*cj6;
IkReal x2105=(cj3*py);
IkReal x2106=(px*sj3);
IkReal x2107=((0.279642)*sj6);
IkReal x2108=(cj6*sj6);
IkReal x2109=((0.035)*cj6);
CheckValue<IkReal> x2110 = IKatan2WithCheck(IkReal(((-0.015135116212)+(((0.01957494)*x2104))+(((-0.077876661836)*sj6))+(((0.054778)*x2105))+((pz*x2105))+(((-0.076974648164)*x2108))+(((0.028046)*pz))+(((-0.054778)*x2106))+(((0.00264648)*cj6))+(((-1.0)*pz*x2106)))),IkReal(((0.07582401888)+(((-0.109556)*pz))+(((-0.076974648164)*x2104))+(((-0.01957494)*x2108))+(((0.0139821)*sj6))+(((-1.0)*(pz*pz)))+(((-0.00175)*cj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2110.valid){
continue;
}
CheckValue<IkReal> x2111=IKPowWithIntegerCheck(IKsign(((0.014382410524)+(((-0.025)*x2105))+(((-0.005925609532)*sj6))+(((-1.0)*x2106*x2109))+(((-1.0)*x2105*x2107))+(((0.275358)*pz))+(((0.016299839476)*cj6))+((x2106*x2107))+((x2105*x2109))+(((0.279642)*cj6*pz))+(((0.035)*pz*sj6))+(((0.025)*x2106)))),-1);
if(!x2111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2110.value)+(((1.5707963267949)*(x2111.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2112=IKsin(j4);
IkReal x2113=IKcos(j4);
IkReal x2114=((0.035)*cj6);
IkReal x2115=(cj3*py);
IkReal x2116=(px*sj3);
IkReal x2117=((0.279642)*cj6);
IkReal x2118=((0.279642)*sj6);
IkReal x2119=((0.035)*x2112);
IkReal x2120=(pz*x2112);
IkReal x2121=(pz*x2113);
IkReal x2122=((0.550716)*x2112);
IkReal x2123=((0.05)*x2113);
IkReal x2124=(sj6*x2113);
evalcond[0]=((0.025)+x2120+x2118+(((0.028046)*x2113))+(((-1.0)*x2113*x2116))+(((-1.0)*x2114))+(((0.054778)*x2112))+((x2113*x2115)));
evalcond[1]=((-0.275358)+(((-0.035)*sj6))+(((-0.054778)*x2113))+(((-1.0)*x2121))+(((0.028046)*x2112))+(((-1.0)*x2112*x2116))+(((-1.0)*x2117))+((x2112*x2115)));
evalcond[2]=((-0.054778)+(((-1.0)*x2112*x2118))+(((-0.025)*x2112))+(((-1.0)*pz))+(((-0.275358)*x2113))+((x2112*x2114))+(((-0.035)*x2124))+(((-1.0)*x2113*x2117)));
evalcond[3]=((-0.028046)+((sj6*x2119))+(((0.275358)*x2112))+x2116+(((-0.025)*x2113))+(((-1.0)*x2115))+((x2113*x2114))+((x2112*x2117))+(((-1.0)*x2113*x2118)));
evalcond[4]=((-0.0008095874)+(((-1.0)*x2116*x2122))+(((0.012706480936)*x2112))+(((-0.109556)*pz))+(((-0.056092)*x2115))+((x2115*x2122))+(((-0.031569421048)*x2113))+(((-1.0)*x2115*x2123))+(((-1.0)*pp))+(((-0.05)*x2120))+(((-0.550716)*x2121))+((x2116*x2123))+(((0.056092)*x2116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2125=cj3*cj3;
IkReal x2126=px*px;
IkReal x2127=py*py;
IkReal x2128=pz*pz;
IkReal x2129=(py*sj5);
IkReal x2130=((0.02)*px);
IkReal x2131=(cj5*pp);
IkReal x2132=((0.07)*py);
IkReal x2133=(cj3*px);
IkReal x2134=(cj5*pz);
IkReal x2135=(cj3*py);
IkReal x2136=(pz*sj3);
IkReal x2137=(py*sj3);
IkReal x2138=((0.550716)*cj5);
IkReal x2139=(pz*sj5);
IkReal x2140=(cj5*px*sj3);
IkReal x2141=(px*x2125);
IkReal x2142=(cj3*sj3*x2127);
IkReal x2143=((0.056092)*cj5*x2125);
IkReal x2144=(cj3*sj3*sj5*x2126);
CheckValue<IkReal> x2145 = IKatan2WithCheck(IkReal(((((-1.0)*x2126*x2143))+((px*x2132))+(((0.028046)*x2131))+(((-0.002882743632)*x2140))+((x2131*x2135))+(((-0.109556)*px*sj3*x2134))+(((0.07)*cj3*sj3*x2126))+((x2127*x2143))+(((-0.07)*x2142))+(((0.550716)*x2129*x2136))+(((0.029606201048)*sj3*x2129))+(((0.002882743632)*cj5*x2135))+(((0.056092)*cj5*x2126))+(((0.0003383998987004)*cj5))+(((-0.04)*x2129*x2141))+(((0.02)*x2144))+(((-1.0)*px*sj3*x2131))+(((-0.00196322)*x2133))+(((-0.00196322)*x2137))+(((-0.14)*py*x2141))+(((0.550716)*x2133*x2139))+(((0.109556)*x2134*x2135))+(((0.008579767576)*x2134))+(((0.029606201048)*sj5*x2133))+(((-0.112184)*cj5*x2133*x2137))+((x2129*x2130))+(((-0.02)*sj5*x2142)))),IkReal(((((-0.550716)*x2144))+(((-0.056092)*x2134*x2135))+(((0.00383446)*x2137))+(((0.00383446)*x2133))+(((-0.002434552424)*x2140))+(((0.016540940936)*sj3*x2129))+(((0.002434552424)*cj5*x2135))+(((8.27172307628e-5)*cj5))+((cj3*x2130*x2139))+(((0.056092)*px*sj3*x2134))+(((0.07)*pz*x2133))+(((0.016540940936)*sj5*x2133))+(((-0.054778)*x2131))+(((-0.109556)*cj5*x2128))+(((0.02)*x2129*x2136))+((x2132*x2136))+(((0.550716)*sj5*x2142))+(((1.101432)*x2129*x2141))+(((-0.007310845968)*x2134))+(((-0.550716)*px*x2129))+(((-1.0)*pz*x2131)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2145.valid){
continue;
}
CheckValue<IkReal> x2146=IKPowWithIntegerCheck(IKsign(((((-1.101432)*cj5*x2133*x2137))+(((0.030890761872)*cj5*x2135))+(((-1.0)*x2125*x2126*x2138))+(((0.060334242096)*x2134))+((x2126*x2138))+((x2128*x2138))+((x2125*x2127*x2138))+(((-0.030890761872)*x2140))+(((0.0020856757104984)*cj5)))),-1);
if(!x2146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2145.value)+(((1.5707963267949)*(x2146.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2147=IKsin(j4);
IkReal x2148=IKcos(j4);
IkReal x2149=((0.07)*cj5);
IkReal x2150=(cj3*px);
IkReal x2151=(py*sj3);
IkReal x2152=((1.0)*sj5);
IkReal x2153=(px*sj3);
IkReal x2154=(cj3*py);
IkReal x2155=(cj5*x2148);
IkReal x2156=(pz*x2147);
IkReal x2157=((0.02)*x2148);
IkReal x2158=((0.550716)*x2147);
IkReal x2159=(sj5*x2148);
evalcond[0]=((((0.054778)*cj5*x2147))+(((-0.01)*cj5))+((x2154*x2155))+(((0.028046)*x2155))+((cj5*x2156))+(((-1.0)*x2153*x2155))+(((-1.0)*x2150*x2152))+(((-1.0)*x2151*x2152)));
evalcond[1]=((-0.0015095874)+(((0.00383446)*sj5*x2147))+(((0.056092)*x2153))+((x2149*x2151))+((x2149*x2150))+(((-0.07)*x2153*x2159))+(((0.07)*sj5*x2156))+((x2154*x2157))+((x2154*x2158))+(((-0.109556)*pz))+(((0.00196322)*x2159))+(((-0.0007)*sj5))+(((0.016540940936)*x2147))+(((0.07)*x2154*x2159))+(((-1.0)*x2153*x2158))+(((-1.0)*x2153*x2157))+(((-1.0)*pp))+(((0.02)*x2156))+(((-0.029606201048)*x2148))+(((-0.550716)*pz*x2148))+(((-0.056092)*x2154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[2];
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2160=(cj4*cj5);
j6eval[0]=x2160;
j6eval[1]=IKsign(x2160);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
IkReal x2161=(cj5*sj4);
j6eval[0]=x2161;
j6eval[1]=IKsign(x2161);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2162=(cj4*pz);
IkReal x2163=(cj3*py);
IkReal x2164=((6.21733107729594)*sj4);
IkReal x2165=((21.1036256319198)*sj4);
IkReal x2166=(px*sj3);
if( IKabs(((-0.193339696070658)+(((-0.591872284472822)*sj4))+(((-1.0)*x2163*x2165))+(((-2.19434806400981)*x2166))+(((21.1036256319198)*x2162))+(((4.28588740819829)*pz))+((x2165*x2166))+(((1.1560144048653)*cj4))+(((39.1205174358163)*pp))+(((2.19434806400981)*x2163)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.960482011420055)+(((-0.274644660817557)*x2163))+(((-6.21733107729594)*x2162))+(((-0.536421779585828)*pz))+(((-1.0)*x2164*x2166))+(((0.274644660817557)*x2166))+(((-4.89632498070236)*pp))+(((-0.340572961752117)*cj4))+(((0.174371267393842)*sj4))+((x2163*x2164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.193339696070658)+(((-0.591872284472822)*sj4))+(((-1.0)*x2163*x2165))+(((-2.19434806400981)*x2166))+(((21.1036256319198)*x2162))+(((4.28588740819829)*pz))+((x2165*x2166))+(((1.1560144048653)*cj4))+(((39.1205174358163)*pp))+(((2.19434806400981)*x2163))))+IKsqr(((-0.960482011420055)+(((-0.274644660817557)*x2163))+(((-6.21733107729594)*x2162))+(((-0.536421779585828)*pz))+(((-1.0)*x2164*x2166))+(((0.274644660817557)*x2166))+(((-4.89632498070236)*pp))+(((-0.340572961752117)*cj4))+(((0.174371267393842)*sj4))+((x2163*x2164))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-0.193339696070658)+(((-0.591872284472822)*sj4))+(((-1.0)*x2163*x2165))+(((-2.19434806400981)*x2166))+(((21.1036256319198)*x2162))+(((4.28588740819829)*pz))+((x2165*x2166))+(((1.1560144048653)*cj4))+(((39.1205174358163)*pp))+(((2.19434806400981)*x2163))), ((-0.960482011420055)+(((-0.274644660817557)*x2163))+(((-6.21733107729594)*x2162))+(((-0.536421779585828)*pz))+(((-1.0)*x2164*x2166))+(((0.274644660817557)*x2166))+(((-4.89632498070236)*pp))+(((-0.340572961752117)*cj4))+(((0.174371267393842)*sj4))+((x2163*x2164))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x2167=IKsin(j6);
IkReal x2168=IKcos(j6);
IkReal x2169=((1.0)*pz);
IkReal x2170=(px*sj3);
IkReal x2171=(cj3*py);
IkReal x2172=(sj4*x2168);
IkReal x2173=((0.279642)*x2167);
IkReal x2174=((0.279642)*x2168);
IkReal x2175=((0.035)*x2167);
IkReal x2176=((0.035)*x2168);
evalcond[0]=((0.153484468928)+(((0.04444284)*x2167))+(((0.056092)*x2170))+(((-0.056092)*x2171))+(((-0.109556)*pz))+(((0.150853323672)*x2168))+(((-1.0)*pp)));
evalcond[1]=((-0.275358)+(((-0.054778)*cj4))+(((-1.0)*cj4*x2169))+(((0.028046)*sj4))+(((-1.0)*sj4*x2170))+(((-1.0)*x2175))+(((-1.0)*x2174))+((sj4*x2171)));
evalcond[2]=((0.045)+(((-1.0)*sj4*x2169))+x2173+((cj4*x2170))+(((-1.0)*cj4*x2171))+(((-0.054778)*sj4))+(((-1.0)*x2176))+(((-0.028046)*cj4)));
evalcond[3]=((-0.054778)+(((0.045)*sj4))+(((-1.0)*cj4*x2175))+(((-1.0)*cj4*x2174))+(((-0.035)*x2172))+(((-1.0)*x2169))+(((-0.275358)*cj4))+((sj4*x2173)));
evalcond[4]=((-0.028046)+(((0.279642)*x2172))+(((0.045)*cj4))+x2170+(((-1.0)*cj4*x2176))+(((0.275358)*sj4))+((cj4*x2173))+(((-1.0)*x2171))+((sj4*x2175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2177=(pz*sj4);
IkReal x2178=((3.48083781259907)*cj4);
IkReal x2179=(cj3*py);
IkReal x2180=(px*sj3);
IkReal x2181=((0.760330068833476)*cj4);
if( IKabs(((-0.208715155388793)+(((-0.0976235772921534)*cj4))+(((-1.0)*x2178*x2179))+(((-3.48083781259907)*x2177))+(((-0.190673333698552)*sj4))+((x2178*x2180))+(((-0.0448834235315119)*x2180))+(((0.0876639868148456)*pz))+(((0.800175132487911)*pp))+(((0.0448834235315119)*x2179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.953300670949507)+(((6.39321641140527)*pp))+((x2179*x2181))+(((-0.358608294948544)*x2180))+(((-1.0)*x2180*x2181))+(((0.700415217167915)*pz))+(((0.0416493605105601)*sj4))+(((0.760330068833476)*x2177))+(((0.0213242171105037)*cj4))+(((0.358608294948544)*x2179)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.208715155388793)+(((-0.0976235772921534)*cj4))+(((-1.0)*x2178*x2179))+(((-3.48083781259907)*x2177))+(((-0.190673333698552)*sj4))+((x2178*x2180))+(((-0.0448834235315119)*x2180))+(((0.0876639868148456)*pz))+(((0.800175132487911)*pp))+(((0.0448834235315119)*x2179))))+IKsqr(((-0.953300670949507)+(((6.39321641140527)*pp))+((x2179*x2181))+(((-0.358608294948544)*x2180))+(((-1.0)*x2180*x2181))+(((0.700415217167915)*pz))+(((0.0416493605105601)*sj4))+(((0.760330068833476)*x2177))+(((0.0213242171105037)*cj4))+(((0.358608294948544)*x2179))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-0.208715155388793)+(((-0.0976235772921534)*cj4))+(((-1.0)*x2178*x2179))+(((-3.48083781259907)*x2177))+(((-0.190673333698552)*sj4))+((x2178*x2180))+(((-0.0448834235315119)*x2180))+(((0.0876639868148456)*pz))+(((0.800175132487911)*pp))+(((0.0448834235315119)*x2179))), ((-0.953300670949507)+(((6.39321641140527)*pp))+((x2179*x2181))+(((-0.358608294948544)*x2180))+(((-1.0)*x2180*x2181))+(((0.700415217167915)*pz))+(((0.0416493605105601)*sj4))+(((0.760330068833476)*x2177))+(((0.0213242171105037)*cj4))+(((0.358608294948544)*x2179))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x2182=IKsin(j6);
IkReal x2183=IKcos(j6);
IkReal x2184=(cj3*py);
IkReal x2185=((1.0)*pz);
IkReal x2186=(px*sj3);
IkReal x2187=(sj4*x2183);
IkReal x2188=((0.279642)*x2182);
IkReal x2189=((0.279642)*x2183);
IkReal x2190=((1.0)*x2186);
IkReal x2191=((0.035)*x2182);
IkReal x2192=((0.035)*x2183);
evalcond[0]=((0.152084468928)+(((-0.056092)*x2184))+(((-0.109556)*pz))+(((0.056092)*x2186))+(((0.03325716)*x2182))+(((-1.0)*pp))+(((0.152253323672)*x2183)));
evalcond[1]=((0.025)+(((-1.0)*cj4*x2190))+x2188+((cj4*x2184))+(((-1.0)*x2192))+(((0.054778)*sj4))+(((0.028046)*cj4))+((pz*sj4)));
evalcond[2]=((-0.275358)+(((-1.0)*cj4*x2185))+(((-0.054778)*cj4))+(((0.028046)*sj4))+(((-1.0)*sj4*x2190))+(((-1.0)*x2189))+(((-1.0)*x2191))+((sj4*x2184)));
evalcond[3]=((-0.054778)+(((0.035)*x2187))+(((-1.0)*cj4*x2189))+(((-0.025)*sj4))+(((-1.0)*cj4*x2191))+(((-1.0)*sj4*x2188))+(((-1.0)*x2185))+(((-0.275358)*cj4)));
evalcond[4]=((-0.028046)+(((-0.025)*cj4))+(((-1.0)*cj4*x2188))+x2186+(((-1.0)*x2184))+(((0.275358)*sj4))+((sj4*x2191))+((cj4*x2192))+(((0.279642)*x2187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2193=((0.440669248263212)*sj5);
IkReal x2194=(cj3*py);
IkReal x2195=(px*sj3);
IkReal x2196=((3.52084656922346)*sj5);
IkReal x2197=(cj3*cj5*px);
IkReal x2198=(cj5*py*sj3);
if( IKabs(((-0.268710412867445)+(((-1.0)*x2195*x2196))+(((3.52084656922346)*x2197))+(((3.52084656922346)*x2198))+((x2194*x2196))+(((-0.440669248263212)*pz))+(((0.0635371971882066)*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.14693477928794)+((x2193*x2195))+(((-1.0)*x2193*x2194))+(((-0.440669248263212)*x2197))+(((-0.440669248263212)*x2198))+(((-0.00795231725415793)*sj5))+(((-3.52084656922346)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.268710412867445)+(((-1.0)*x2195*x2196))+(((3.52084656922346)*x2197))+(((3.52084656922346)*x2198))+((x2194*x2196))+(((-0.440669248263212)*pz))+(((0.0635371971882066)*sj5))))+IKsqr(((-1.14693477928794)+((x2193*x2195))+(((-1.0)*x2193*x2194))+(((-0.440669248263212)*x2197))+(((-0.440669248263212)*x2198))+(((-0.00795231725415793)*sj5))+(((-3.52084656922346)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-0.268710412867445)+(((-1.0)*x2195*x2196))+(((3.52084656922346)*x2197))+(((3.52084656922346)*x2198))+((x2194*x2196))+(((-0.440669248263212)*pz))+(((0.0635371971882066)*sj5))), ((-1.14693477928794)+((x2193*x2195))+(((-1.0)*x2193*x2194))+(((-0.440669248263212)*x2197))+(((-0.440669248263212)*x2198))+(((-0.00795231725415793)*sj5))+(((-3.52084656922346)*pz))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x2199=IKsin(j6);
IkReal x2200=IKcos(j6);
IkReal x2201=((1.0)*py);
IkReal x2202=((0.035)*sj5);
IkReal x2203=(px*sj3);
IkReal x2204=((0.0007)*sj5);
IkReal x2205=(sj5*x2199);
IkReal x2206=((0.279642)*x2199);
IkReal x2207=((1.0)*cj3*px);
IkReal x2208=((0.035)*x2200);
evalcond[0]=((-0.330136)+(((-0.279642)*x2200))+(((-1.0)*pz))+(((-0.035)*x2199)));
evalcond[1]=((((-1.0)*cj5*x2208))+(((-1.0)*sj3*x2201))+((cj5*x2206))+(((-1.0)*x2207))+(((0.035)*cj5)));
evalcond[2]=((-0.018046)+x2202+x2203+(((0.279642)*x2205))+(((-1.0)*cj3*x2201))+(((-1.0)*x2200*x2202)));
evalcond[3]=((0.035)+(((-1.0)*cj5*sj3*x2201))+(((-1.0)*cj5*x2207))+x2206+(((-1.0)*x2208))+(((-0.018046)*sj5))+(((-1.0)*cj3*sj5*x2201))+((sj5*x2203)));
evalcond[4]=((0.152784468928)+x2204+(((-0.109556)*pz))+(((0.00559284)*x2205))+(((-1.0)*pp))+(((0.03885)*x2199))+(((-0.056092)*cj3*py))+(((0.056092)*x2203))+(((0.151553323672)*x2200))+(((-1.0)*x2200*x2204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2209=((0.440669248263212)*sj5);
IkReal x2210=(cj3*py);
IkReal x2211=(px*sj3);
IkReal x2212=((3.52084656922346)*sj5);
IkReal x2213=(cj3*cj5*px);
IkReal x2214=(cj5*py*sj3);
if( IKabs(((-0.220432452704721)+(((-1.0)*x2210*x2212))+(((-0.133954128572676)*sj5))+(((0.440669248263212)*pz))+((x2211*x2212))+(((3.52084656922346)*x2214))+(((3.52084656922346)*x2213)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.761204912550099)+(((0.0167657022194222)*sj5))+(((-1.0)*x2209*x2211))+((x2209*x2210))+(((3.52084656922346)*pz))+(((-0.440669248263212)*x2213))+(((-0.440669248263212)*x2214)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.220432452704721)+(((-1.0)*x2210*x2212))+(((-0.133954128572676)*sj5))+(((0.440669248263212)*pz))+((x2211*x2212))+(((3.52084656922346)*x2214))+(((3.52084656922346)*x2213))))+IKsqr(((-0.761204912550099)+(((0.0167657022194222)*sj5))+(((-1.0)*x2209*x2211))+((x2209*x2210))+(((3.52084656922346)*pz))+(((-0.440669248263212)*x2213))+(((-0.440669248263212)*x2214))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-0.220432452704721)+(((-1.0)*x2210*x2212))+(((-0.133954128572676)*sj5))+(((0.440669248263212)*pz))+((x2211*x2212))+(((3.52084656922346)*x2214))+(((3.52084656922346)*x2213))), ((-0.761204912550099)+(((0.0167657022194222)*sj5))+(((-1.0)*x2209*x2211))+((x2209*x2210))+(((3.52084656922346)*pz))+(((-0.440669248263212)*x2213))+(((-0.440669248263212)*x2214))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x2215=IKsin(j6);
IkReal x2216=IKcos(j6);
IkReal x2217=((1.0)*sj3);
IkReal x2218=((0.035)*sj5);
IkReal x2219=(cj3*py);
IkReal x2220=((0.0007)*sj5);
IkReal x2221=(px*sj3);
IkReal x2222=(sj5*x2215);
IkReal x2223=((0.279642)*x2215);
IkReal x2224=((1.0)*cj3*px);
IkReal x2225=((0.035)*x2216);
evalcond[0]=((-0.22058)+(((-0.035)*x2215))+(((-0.279642)*x2216))+pz);
evalcond[1]=((((-1.0)*py*x2217))+((cj5*x2223))+(((-1.0)*cj5*x2225))+(((-1.0)*x2224))+(((0.035)*cj5)));
evalcond[2]=((-0.038046)+(((-1.0)*x2219))+x2221+(((-1.0)*x2218))+(((-0.279642)*x2222))+((x2216*x2218)));
evalcond[3]=((0.035)+(((-1.0)*cj5*py*x2217))+x2223+(((0.038046)*sj5))+(((-1.0)*px*sj5*x2217))+(((-1.0)*cj5*x2224))+(((-1.0)*x2225))+((sj5*x2219)));
evalcond[4]=((0.152784468928)+x2220+(((-0.109556)*pz))+(((-1.0)*pp))+(((0.151553323672)*x2216))+(((-0.056092)*x2219))+(((0.00559284)*x2222))+(((-1.0)*x2216*x2220))+(((0.03885)*x2215))+(((0.056092)*x2221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2226=(pz*sj5);
IkReal x2227=((3.52084656922346)*cj3);
IkReal x2228=(cj5*px);
IkReal x2229=((0.440669248263212)*py);
IkReal x2230=(cj5*sj3);
IkReal x2231=(px*sj3);
if( IKabs(((-0.232212423049293)+(((3.52084656922346)*x2226))+((x2227*x2228))+(((0.157656467676688)*sj5))+(((3.52084656922346)*py*x2230))+(((-0.440669248263212)*x2231))+((cj3*x2229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.855324183038581)+(((-0.0197322875987301)*sj5))+((py*x2227))+(((-0.440669248263212)*cj3*x2228))+(((-3.52084656922346)*x2231))+(((-1.0)*x2229*x2230))+(((-0.440669248263212)*x2226)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.232212423049293)+(((3.52084656922346)*x2226))+((x2227*x2228))+(((0.157656467676688)*sj5))+(((3.52084656922346)*py*x2230))+(((-0.440669248263212)*x2231))+((cj3*x2229))))+IKsqr(((-0.855324183038581)+(((-0.0197322875987301)*sj5))+((py*x2227))+(((-0.440669248263212)*cj3*x2228))+(((-3.52084656922346)*x2231))+(((-1.0)*x2229*x2230))+(((-0.440669248263212)*x2226))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-0.232212423049293)+(((3.52084656922346)*x2226))+((x2227*x2228))+(((0.157656467676688)*sj5))+(((3.52084656922346)*py*x2230))+(((-0.440669248263212)*x2231))+((cj3*x2229))), ((-0.855324183038581)+(((-0.0197322875987301)*sj5))+((py*x2227))+(((-0.440669248263212)*cj3*x2228))+(((-3.52084656922346)*x2231))+(((-1.0)*x2229*x2230))+(((-0.440669248263212)*x2226))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x2232=IKsin(j6);
IkReal x2233=IKcos(j6);
IkReal x2234=(cj3*py);
IkReal x2235=((0.035)*sj5);
IkReal x2236=((1.0)*pz);
IkReal x2237=((1.0)*px);
IkReal x2238=((0.0007)*sj5);
IkReal x2239=(sj5*x2232);
IkReal x2240=((0.279642)*x2232);
IkReal x2241=((1.0)*py*sj3);
IkReal x2242=((0.035)*x2233);
evalcond[0]=((-0.247312)+x2234+(((-0.035)*x2232))+(((-0.279642)*x2233))+(((-1.0)*sj3*x2237)));
evalcond[1]=((-0.044778)+x2235+(((-1.0)*x2236))+(((-1.0)*x2233*x2235))+(((0.279642)*x2239)));
evalcond[2]=((((-1.0)*cj5*x2242))+(((-1.0)*x2241))+(((0.035)*cj5))+((cj5*x2240))+(((-1.0)*cj3*x2237)));
evalcond[3]=((0.035)+x2240+(((-1.0)*cj5*x2241))+(((-0.044778)*sj5))+(((-1.0)*x2242))+(((-1.0)*sj5*x2236))+(((-1.0)*cj3*cj5*x2237)));
evalcond[4]=((0.152784468928)+(((0.151553323672)*x2233))+x2238+(((0.056092)*px*sj3))+(((-0.109556)*pz))+(((-0.056092)*x2234))+(((0.03885)*x2232))+(((-1.0)*pp))+(((-1.0)*x2233*x2238))+(((0.00559284)*x2239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2243=((0.440669248263212)*py);
IkReal x2244=(cj5*sj3);
IkReal x2245=(pz*sj5);
IkReal x2246=((3.52084656922346)*cj3);
IkReal x2247=(cj5*px);
IkReal x2248=(px*sj3);
if( IKabs(((-0.256930442522873)+(((-0.228073399061157)*sj5))+((x2246*x2247))+(((-3.52084656922346)*x2245))+(((3.52084656922346)*py*x2244))+(((-1.0)*cj3*x2243))+(((0.440669248263212)*x2248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.05281550879946)+(((0.0285456725639944)*sj5))+(((-0.440669248263212)*cj3*x2247))+(((-1.0)*py*x2246))+(((-1.0)*x2243*x2244))+(((0.440669248263212)*x2245))+(((3.52084656922346)*x2248)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.256930442522873)+(((-0.228073399061157)*sj5))+((x2246*x2247))+(((-3.52084656922346)*x2245))+(((3.52084656922346)*py*x2244))+(((-1.0)*cj3*x2243))+(((0.440669248263212)*x2248))))+IKsqr(((-1.05281550879946)+(((0.0285456725639944)*sj5))+(((-0.440669248263212)*cj3*x2247))+(((-1.0)*py*x2246))+(((-1.0)*x2243*x2244))+(((0.440669248263212)*x2245))+(((3.52084656922346)*x2248))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-0.256930442522873)+(((-0.228073399061157)*sj5))+((x2246*x2247))+(((-3.52084656922346)*x2245))+(((3.52084656922346)*py*x2244))+(((-1.0)*cj3*x2243))+(((0.440669248263212)*x2248))), ((-1.05281550879946)+(((0.0285456725639944)*sj5))+(((-0.440669248263212)*cj3*x2247))+(((-1.0)*py*x2246))+(((-1.0)*x2243*x2244))+(((0.440669248263212)*x2245))+(((3.52084656922346)*x2248))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x2249=IKcos(j6);
IkReal x2250=IKsin(j6);
IkReal x2251=((0.035)*sj5);
IkReal x2252=(px*sj3);
IkReal x2253=((1.0)*py);
IkReal x2254=((0.0007)*sj5);
IkReal x2255=(sj5*x2250);
IkReal x2256=((0.279642)*x2250);
IkReal x2257=((1.0)*cj3*px);
IkReal x2258=((0.035)*x2249);
evalcond[0]=((-0.303404)+(((-0.279642)*x2249))+x2252+(((-1.0)*cj3*x2253))+(((-0.035)*x2250)));
evalcond[1]=((-0.064778)+((x2249*x2251))+(((-1.0)*x2251))+(((-1.0)*pz))+(((-0.279642)*x2255)));
evalcond[2]=((((-1.0)*cj5*x2258))+(((-1.0)*sj3*x2253))+(((-1.0)*x2257))+((cj5*x2256))+(((0.035)*cj5)));
evalcond[3]=((0.035)+(((-1.0)*cj5*x2257))+(((0.064778)*sj5))+x2256+(((-1.0)*cj5*sj3*x2253))+(((-1.0)*x2258))+((pz*sj5)));
evalcond[4]=((0.152784468928)+(((-1.0)*x2249*x2254))+x2254+(((-0.109556)*pz))+(((-1.0)*pp))+(((0.00559284)*x2255))+(((0.151553323672)*x2249))+(((0.03885)*x2250))+(((-0.056092)*cj3*py))+(((0.056092)*x2252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2259=(cj4*sj5);
IkReal x2260=((17500.0)*sj3);
IkReal x2261=(cj5*px);
IkReal x2262=(cj5*sj4);
IkReal x2263=(py*sj4);
IkReal x2264=(cj4*cj5);
IkReal x2265=((139821.0)*sj3);
IkReal x2266=((139821.0)*cj3*px);
IkReal x2267=((17500.0)*cj3*px);
IkReal x2268=(cj3*cj5*py);
CheckValue<IkReal> x2269=IKPowWithIntegerCheck(IKsign(x2262),-1);
if(!x2269.valid){
continue;
}
CheckValue<IkReal> x2270 = IKatan2WithCheck(IkReal(((((-9712.5)*x2262))+((sj4*x2266))+((x2263*x2265))+(((-1.0)*py*x2259*x2260))+(((-1.0)*x2260*x2261))+(((-1.0)*x2259*x2267))+(((17500.0)*x2268))+(((-175.0)*x2264))+(((490.805)*cj5)))),IkReal(((((-37888.330918)*x2262))+(((3921.419766)*cj5))+(((-1.0)*py*x2259*x2265))+(((-1.0)*x2260*x2263))+(((-1.0)*x2259*x2266))+(((-1398.21)*x2264))+(((-1.0)*sj4*x2267))+(((-1.0)*x2261*x2265))+(((139821.0)*x2268)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2270.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2269.value)))+(x2270.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2271=IKsin(j6);
IkReal x2272=IKcos(j6);
IkReal x2273=(cj4*sj5);
IkReal x2274=(cj3*py);
IkReal x2275=((1.0)*pz);
IkReal x2276=(px*sj3);
IkReal x2277=(sj4*sj5);
IkReal x2278=((0.0007)*sj5);
IkReal x2279=((1.0)*py*sj3);
IkReal x2280=(sj5*x2271);
IkReal x2281=((0.279642)*x2272);
IkReal x2282=((0.279642)*x2271);
IkReal x2283=((1.0)*cj3*px);
IkReal x2284=((0.035)*x2271);
IkReal x2285=((0.035)*x2272);
evalcond[0]=((((-1.0)*x2283))+(((0.035)*cj5))+(((-1.0)*x2279))+((cj5*x2282))+(((-1.0)*cj5*x2285)));
evalcond[1]=((-0.275358)+((sj4*x2274))+(((-0.054778)*cj4))+(((-1.0)*cj4*x2275))+(((-1.0)*x2284))+(((-1.0)*x2281))+(((0.028046)*sj4))+(((-1.0)*sj4*x2276)));
evalcond[2]=((0.152784468928)+(((0.03885)*x2271))+x2278+(((-0.109556)*pz))+(((0.056092)*x2276))+(((0.151553323672)*x2272))+(((-0.056092)*x2274))+(((-1.0)*pp))+(((0.00559284)*x2280))+(((-1.0)*x2272*x2278)));
evalcond[3]=((-0.054778)+(((0.035)*x2277))+(((-1.0)*x2277*x2285))+((x2277*x2282))+(((-1.0)*x2275))+(((-1.0)*cj4*x2284))+(((-1.0)*cj4*x2281))+(((0.01)*sj4))+(((-0.275358)*cj4)));
evalcond[4]=((-0.028046)+(((0.035)*x2273))+x2276+(((0.01)*cj4))+(((0.275358)*sj4))+((x2273*x2282))+((sj4*x2281))+((sj4*x2284))+(((-1.0)*x2274))+(((-1.0)*x2273*x2285)));
evalcond[5]=((0.035)+(((-0.054778)*x2277))+((x2273*x2276))+x2282+(((-1.0)*x2275*x2277))+(((-1.0)*x2285))+(((-1.0)*cj5*x2279))+(((-1.0)*x2273*x2274))+(((-0.028046)*x2273))+(((0.01)*sj5))+(((-1.0)*cj5*x2283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2286=(sj4*sj5);
IkReal x2287=(cj3*px);
IkReal x2288=(cj4*cj5);
IkReal x2289=(py*sj3);
IkReal x2290=((139821.0)*cj4);
IkReal x2291=(cj5*sj4);
IkReal x2292=(cj5*pz);
IkReal x2293=((17500.0)*cj4);
CheckValue<IkReal> x2294=IKPowWithIntegerCheck(IKsign(x2288),-1);
if(!x2294.valid){
continue;
}
CheckValue<IkReal> x2295 = IKatan2WithCheck(IkReal(((((-1.0)*x2289*x2290))+(((-17500.0)*x2286*x2289))+(((-17500.0)*x2286*x2287))+(((17500.0)*x2292))+(((-175.0)*x2291))+(((-1.0)*x2287*x2290))+(((9712.5)*x2288))+(((958.615)*cj5)))),IkReal(((((-139821.0)*x2286*x2289))+(((-139821.0)*x2286*x2287))+(((7659.114738)*cj5))+(((-1398.21)*x2291))+((x2287*x2293))+((x2289*x2293))+(((37888.330918)*x2288))+(((139821.0)*x2292)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2295.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x2294.value)))+(x2295.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2296=IKsin(j6);
IkReal x2297=IKcos(j6);
IkReal x2298=(cj4*sj5);
IkReal x2299=(cj3*py);
IkReal x2300=((1.0)*pz);
IkReal x2301=(px*sj3);
IkReal x2302=(sj4*sj5);
IkReal x2303=((0.0007)*sj5);
IkReal x2304=((1.0)*py*sj3);
IkReal x2305=(sj5*x2296);
IkReal x2306=((0.279642)*x2297);
IkReal x2307=((0.279642)*x2296);
IkReal x2308=((1.0)*cj3*px);
IkReal x2309=((0.035)*x2296);
IkReal x2310=((0.035)*x2297);
evalcond[0]=(((cj5*x2307))+(((-1.0)*x2304))+(((-1.0)*x2308))+(((0.035)*cj5))+(((-1.0)*cj5*x2310)));
evalcond[1]=((-0.275358)+((sj4*x2299))+(((-0.054778)*cj4))+(((-1.0)*sj4*x2301))+(((-1.0)*x2306))+(((-1.0)*x2309))+(((0.028046)*sj4))+(((-1.0)*cj4*x2300)));
evalcond[2]=((0.152784468928)+(((0.151553323672)*x2297))+(((0.00559284)*x2305))+x2303+(((-0.056092)*x2299))+(((-0.109556)*pz))+(((-1.0)*x2297*x2303))+(((-1.0)*pp))+(((0.056092)*x2301))+(((0.03885)*x2296)));
evalcond[3]=((-0.054778)+(((-1.0)*x2302*x2310))+(((-1.0)*x2300))+(((0.035)*x2302))+(((-1.0)*cj4*x2306))+(((-1.0)*cj4*x2309))+(((0.01)*sj4))+(((-0.275358)*cj4))+((x2302*x2307)));
evalcond[4]=((-0.028046)+(((0.035)*x2298))+(((-1.0)*x2298*x2310))+x2301+((x2298*x2307))+(((0.01)*cj4))+(((-1.0)*x2299))+(((0.275358)*sj4))+((sj4*x2309))+((sj4*x2306)));
evalcond[5]=((0.035)+(((-1.0)*x2298*x2299))+(((-0.054778)*x2302))+(((-1.0)*x2300*x2302))+(((-0.028046)*x2298))+x2307+((x2298*x2301))+(((-1.0)*cj5*x2308))+(((-1.0)*cj5*x2304))+(((0.01)*sj5))+(((-1.0)*x2310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2311=((69910500000.0)*sj3);
IkReal x2312=(cj4*cj5);
IkReal x2313=((8750000000.0)*cj3);
IkReal x2314=(cj5*sj4);
IkReal x2315=((69910500000.0)*cj3);
IkReal x2316=((8750000000.0)*sj3);
IkReal x2317=(pz*x2312);
CheckValue<IkReal> x2318 = IKatan2WithCheck(IkReal(((((-8750000000.0)*x2317))+(((-1.0)*px*x2314*x2316))+((py*x2313*x2314))+(((245402500.0)*x2314))+(((-4856250000.0)*cj5))+((px*x2315))+(((-479307500.0)*x2312))+((py*x2311)))),IkReal(((((-1.0)*py*x2316))+(((-3829557369.0)*x2312))+((py*x2314*x2315))+(((1960709883.0)*x2314))+(((-1.0)*px*x2313))+(((-69910500000.0)*x2317))+(((-18944165459.0)*cj5))+(((-1.0)*px*x2311*x2314)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2318.valid){
continue;
}
CheckValue<IkReal> x2319=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x2319.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2318.value)+(((1.5707963267949)*(x2319.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x2320=IKsin(j6);
IkReal x2321=IKcos(j6);
IkReal x2322=(cj4*sj5);
IkReal x2323=(cj3*py);
IkReal x2324=((1.0)*pz);
IkReal x2325=(px*sj3);
IkReal x2326=(sj4*sj5);
IkReal x2327=((0.0007)*sj5);
IkReal x2328=((1.0)*py*sj3);
IkReal x2329=(sj5*x2320);
IkReal x2330=((0.279642)*x2321);
IkReal x2331=((0.279642)*x2320);
IkReal x2332=((1.0)*cj3*px);
IkReal x2333=((0.035)*x2320);
IkReal x2334=((0.035)*x2321);
evalcond[0]=((((-1.0)*x2332))+(((0.035)*cj5))+((cj5*x2331))+(((-1.0)*cj5*x2334))+(((-1.0)*x2328)));
evalcond[1]=((-0.275358)+(((-1.0)*x2330))+(((-1.0)*x2333))+(((-0.054778)*cj4))+(((0.028046)*sj4))+(((-1.0)*sj4*x2325))+((sj4*x2323))+(((-1.0)*cj4*x2324)));
evalcond[2]=((0.152784468928)+(((-1.0)*x2321*x2327))+(((0.056092)*x2325))+(((-0.056092)*x2323))+x2327+(((-0.109556)*pz))+(((0.03885)*x2320))+(((-1.0)*pp))+(((0.151553323672)*x2321))+(((0.00559284)*x2329)));
evalcond[3]=((-0.054778)+(((0.035)*x2326))+((x2326*x2331))+(((-1.0)*x2326*x2334))+(((-1.0)*cj4*x2333))+(((-1.0)*cj4*x2330))+(((0.01)*sj4))+(((-0.275358)*cj4))+(((-1.0)*x2324)));
evalcond[4]=((-0.028046)+(((0.035)*x2322))+(((-1.0)*x2322*x2334))+x2325+(((0.01)*cj4))+((x2322*x2331))+(((0.275358)*sj4))+((sj4*x2333))+((sj4*x2330))+(((-1.0)*x2323)));
evalcond[5]=((0.035)+(((-1.0)*x2324*x2326))+(((-1.0)*x2334))+(((-0.028046)*x2322))+x2331+((x2322*x2325))+(((-1.0)*x2322*x2323))+(((-0.054778)*x2326))+(((-1.0)*cj5*x2328))+(((0.01)*sj5))+(((-1.0)*cj5*x2332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x2335=((7842.839532)*cj5);
IkReal x2336=(cj3*py);
IkReal x2337=(cj5*pp);
IkReal x2338=(cj3*px);
IkReal x2339=((2796.42)*sj5);
IkReal x2340=((350.0)*sj5);
IkReal x2341=(cj5*pz);
IkReal x2342=(py*sj3);
IkReal x2343=(px*sj3);
IkReal x2344=((981.61)*cj5);
CheckValue<IkReal> x2345 = IKatan2WithCheck(IkReal(((((1917.23)*x2341))+(((-1.0)*x2340*x2342))+(((-1.0)*x2343*x2344))+(((-5325.9113705)*cj5))+(((75776.661836)*x2342))+(((75776.661836)*x2338))+(((-1.0)*x2338*x2340))+((x2336*x2344))+(((17500.0)*x2337)))),IkReal(((((-1.0)*x2339*x2342))+(((-20682.6022299819)*cj5))+(((-1.0)*x2338*x2339))+(((-1.0)*x2335*x2343))+((x2335*x2336))+(((-19425.0)*x2342))+(((-19425.0)*x2338))+(((139821.0)*x2337))+(((15318.229476)*x2341)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2345.valid){
continue;
}
CheckValue<IkReal> x2346=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x2346.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x2345.value)+(((1.5707963267949)*(x2346.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x2347=IKsin(j6);
IkReal x2348=IKcos(j6);
IkReal x2349=((0.0007)*sj5);
IkReal x2350=((0.035)*cj5);
evalcond[0]=(x2350+(((-1.0)*cj3*px))+(((-1.0)*x2348*x2350))+(((-1.0)*py*sj3))+(((0.279642)*cj5*x2347)));
evalcond[1]=((0.152784468928)+x2349+(((0.056092)*px*sj3))+(((-0.109556)*pz))+(((0.00559284)*sj5*x2347))+(((-1.0)*x2348*x2349))+(((0.03885)*x2347))+(((-1.0)*pp))+(((0.151553323672)*x2348))+(((-0.056092)*cj3*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x2351=((0.00191723)*sj5);
IkReal x2352=((1.95314839905869)*sj5);
IkReal x2353=(pz*sj5);
IkReal x2354=(px*sj3);
IkReal x2355=((0.279642)*cj6);
IkReal x2356=((0.035)*sj6);
IkReal x2357=(cj3*py);
IkReal x2358=((35.6557084789275)*sj6);
IkReal x2359=((284.880960870407)*cj6);
IkReal x2360=(sj5*sj6);
j4eval[0]=((7.30932902884037)+sj6+(((-1.0)*x2354*x2358))+(((-1.0)*x2354*x2359))+((x2357*x2358))+((x2357*x2359))+(((35.6557084789275)*cj6*x2353))+((cj6*x2352))+(((280.516702152586)*x2357))+(((-15.6052092745591)*x2360))+(((-35.6557084789275)*x2353))+(((-284.880960870407)*sj6*x2353))+(((-280.516702152586)*x2354))+(((7.98977142857143)*cj6))+(((-1.0)*x2352))+(((-10.1873452796936)*pz)));
j4eval[1]=IKsign(((0.007174910468)+((x2356*x2357))+(((-1.0)*x2354*x2356))+(((-1.0)*x2354*x2355))+(((-0.279642)*sj6*x2353))+((cj6*x2351))+(((0.00098161)*sj6))+((x2355*x2357))+(((0.007842839532)*cj6))+(((-0.275358)*x2354))+(((-0.015318229476)*x2360))+(((-0.035)*x2353))+(((0.035)*cj6*x2353))+(((-1.0)*x2351))+(((-0.01)*pz))+(((0.275358)*x2357))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2361=((284.880960870407)*sj6);
IkReal x2362=(cj6*sj5);
IkReal x2363=(pz*sj6);
IkReal x2364=(cj3*py);
IkReal x2365=(cj6*pz);
IkReal x2366=(px*sj3);
IkReal x2367=(sj5*sj6);
IkReal x2368=(sj5*x2366);
j4eval[0]=((-15.6518581962286)+(((10.1873452796936)*x2366))+(((-1.0)*sj5))+(((-1.95314839905869)*sj6))+(((-284.880960870407)*x2365))+x2362+(((35.6557084789275)*x2368))+(((-35.6557084789275)*x2363))+(((-1.0)*sj5*x2361*x2364))+((x2361*x2368))+(((-7.98977142857143)*x2367))+(((-15.6052092745591)*cj6))+(((35.6557084789275)*x2362*x2364))+(((-10.1873452796936)*x2364))+(((-35.6557084789275)*x2362*x2366))+(((-35.6557084789275)*sj5*x2364))+(((-280.516702152586)*pz)));
j4eval[1]=IKsign(((-0.015364020524)+(((-0.275358)*pz))+(((-0.015318229476)*cj6))+(((-0.01)*x2364))+(((-0.035)*sj5*x2364))+(((-0.035)*x2363))+(((0.01)*x2366))+(((-0.007842839532)*x2367))+(((0.00098161)*x2362))+(((-0.279642)*x2364*x2367))+(((-0.279642)*x2365))+(((-0.00191723)*sj6))+(((-0.00098161)*sj5))+(((-0.035)*x2362*x2366))+(((0.035)*x2362*x2364))+(((0.279642)*x2366*x2367))+(((0.035)*x2368))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2369=cj5*cj5;
IkReal x2370=cj6*cj6;
IkReal x2371=((0.01957494)*sj6);
IkReal x2372=(sj5*sj6);
IkReal x2373=((0.0007)*sj5);
IkReal x2374=(cj6*x2369);
IkReal x2375=((27.9642)*sj6*x2369);
IkReal x2376=(x2369*x2370);
j4eval[0]=((-223.673823325714)+(((-1.0)*sj5))+((cj6*sj5))+x2375+(((-27.9642)*sj6*x2374))+(((-55.5)*sj6))+(((-3.5)*x2374))+(((-216.504748102857)*cj6))+(((-7.98977142857143)*x2372))+(((-109.963783091429)*x2376))+(((113.463783091429)*x2369)));
j4eval[1]=IKsign(((-0.156571676328)+(((0.079424648164)*x2369))+(((-1.0)*x2373))+(((-0.00559284)*x2372))+(((-0.076974648164)*x2376))+(((-0.03885)*sj6))+(((-1.0)*x2371*x2374))+(((-0.00245)*x2374))+((cj6*x2373))+(((-0.151553323672)*cj6))+((x2369*x2371))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2377=cj5*cj5;
IkReal x2378=((0.00191723)*sj5);
IkReal x2379=(cj6*sj5);
IkReal x2380=(cj3*py);
IkReal x2381=(px*sj3);
IkReal x2382=((0.279642)*cj6);
IkReal x2383=(sj5*sj6);
IkReal x2384=((0.035)*sj6);
IkReal x2385=((0.035)*sj5);
IkReal x2386=((0.01957494)*sj6*x2377);
CheckValue<IkReal> x2387 = IKatan2WithCheck(IkReal(((-0.008270470468)+(((-1.0)*x2380*x2382))+(((-1.0)*x2380*x2384))+(((0.035)*pz*x2379))+((x2381*x2382))+((x2381*x2384))+(((-0.007842839532)*cj6))+(((-1.0)*x2378))+(((-0.275358)*x2380))+(((-1.0)*pz*x2385))+(((-0.015318229476)*x2383))+(((0.275358)*x2381))+(((-0.00098161)*sj6))+(((-0.279642)*pz*x2383))+((cj6*x2378))+(((-0.01)*pz)))),IkReal(((0.014803100524)+(((-0.01)*x2380))+(((-1.0)*x2380*x2385))+(((-0.035)*x2379*x2381))+((x2381*x2385))+(((0.279642)*x2381*x2383))+(((-0.007842839532)*x2383))+((pz*x2384))+((pz*x2382))+(((0.275358)*pz))+(((0.00191723)*sj6))+(((0.00098161)*x2379))+(((0.01)*x2381))+(((0.015318229476)*cj6))+(((0.035)*x2379*x2380))+(((-0.00098161)*sj5))+(((-0.279642)*x2380*x2383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2387.valid){
continue;
}
CheckValue<IkReal> x2388=IKPowWithIntegerCheck(IKsign(((-0.156571676328)+(((-0.076974648164)*x2377*(cj6*cj6)))+x2386+(((-0.0007)*sj5))+(((0.0007)*x2379))+(((-0.00559284)*x2383))+(((-0.03885)*sj6))+(((-0.00245)*cj6*x2377))+(((-1.0)*cj6*x2386))+(((0.079424648164)*x2377))+(((-0.151553323672)*cj6)))),-1);
if(!x2388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2387.value)+(((1.5707963267949)*(x2388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2389=IKsin(j4);
IkReal x2390=IKcos(j4);
IkReal x2391=((0.035)*sj6);
IkReal x2392=((0.07)*cj5);
IkReal x2393=(cj3*px);
IkReal x2394=((0.279642)*sj6);
IkReal x2395=(py*sj3);
IkReal x2396=((1.0)*cj5);
IkReal x2397=((0.035)*cj6);
IkReal x2398=(px*sj3);
IkReal x2399=((0.07)*sj5);
IkReal x2400=(cj3*py);
IkReal x2401=((0.279642)*cj6);
IkReal x2402=((1.0)*sj5);
IkReal x2403=(cj5*x2390);
IkReal x2404=(pz*x2389);
IkReal x2405=(py*x2402);
IkReal x2406=(cj3*x2390);
IkReal x2407=(sj5*x2390);
IkReal x2408=(pz*x2390);
IkReal x2409=((0.550716)*x2389);
IkReal x2410=((0.054778)*x2389);
IkReal x2411=(sj5*x2389);
evalcond[0]=((-0.275358)+(((-1.0)*x2408))+(((-1.0)*x2401))+(((-0.054778)*x2390))+(((-1.0)*x2391))+(((0.028046)*x2389))+(((-1.0)*x2389*x2398))+((x2389*x2400)));
evalcond[1]=((-0.054778)+(((-1.0)*x2390*x2391))+(((-1.0)*x2397*x2411))+(((-0.275358)*x2390))+(((-1.0)*pz))+(((0.01)*x2389))+(((0.035)*x2411))+(((-1.0)*x2390*x2401))+((x2394*x2411)));
evalcond[2]=((((0.028046)*x2403))+(((-0.01)*cj5))+(((-1.0)*x2390*x2396*x2398))+(((-1.0)*x2393*x2402))+(((-1.0)*x2395*x2402))+((x2400*x2403))+((cj5*x2410))+((cj5*x2404)));
evalcond[3]=((-0.028046)+(((-1.0)*x2400))+x2398+(((0.035)*x2407))+(((-1.0)*x2397*x2407))+((x2394*x2407))+(((0.01)*x2390))+(((0.275358)*x2389))+((x2389*x2401))+((x2389*x2391)));
evalcond[4]=((0.035)+(((-0.028046)*x2407))+x2394+((x2398*x2407))+(((-1.0)*x2390*x2400*x2402))+(((-1.0)*x2402*x2404))+(((-1.0)*x2397))+(((-1.0)*sj5*x2410))+(((0.01)*sj5))+(((-1.0)*x2393*x2396))+(((-1.0)*x2395*x2396)));
evalcond[5]=((-0.0015095874)+((x2392*x2395))+((x2392*x2393))+(((0.016540940936)*x2389))+(((-0.109556)*pz))+(((-0.02)*x2390*x2398))+((x2399*x2404))+((x2390*x2399*x2400))+(((-0.0007)*sj5))+(((-0.056092)*x2400))+(((-1.0)*pp))+((x2400*x2409))+(((0.056092)*x2398))+(((-1.0)*x2390*x2398*x2399))+(((-0.550716)*x2408))+(((0.00383446)*x2411))+(((0.02)*x2404))+(((0.02)*x2390*x2400))+(((-1.0)*x2398*x2409))+(((0.00196322)*x2407))+(((-0.029606201048)*x2390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2412=cj6*cj6;
IkReal x2413=cj3*cj3;
IkReal x2414=px*px;
IkReal x2415=(cj6*sj5);
IkReal x2416=(cj3*py);
IkReal x2417=(px*sj3);
IkReal x2418=(sj5*sj6);
IkReal x2419=((0.035)*x2417);
CheckValue<IkReal> x2420=IKPowWithIntegerCheck(IKsign(((-0.015364020524)+(((-0.279642)*cj6*pz))+(((-0.275358)*pz))+(((-0.015318229476)*cj6))+(((-0.007842839532)*x2418))+(((-0.279642)*x2416*x2418))+(((-0.035)*pz*sj6))+(((-1.0)*x2415*x2419))+(((0.01)*x2417))+(((0.00098161)*x2415))+((sj5*x2419))+(((-0.00191723)*sj6))+(((-0.00098161)*sj5))+(((-0.035)*sj5*x2416))+(((0.279642)*x2417*x2418))+(((-0.01)*x2416))+(((0.035)*x2415*x2416)))),-1);
if(!x2420.valid){
continue;
}
CheckValue<IkReal> x2421 = IKatan2WithCheck(IkReal(((-0.004289883788)+(((-1.0)*pz*x2416))+(((-0.028046)*pz))+(((-0.076974648164)*sj6*x2415))+(((-0.078226661836)*x2418))+((pz*x2417))+(((-0.00035)*sj6))+(((-0.00279642)*cj6))+(((0.054778)*x2417))+(((-0.019425)*sj5))+(((-0.054778)*x2416))+(((-0.00014994)*x2415))+(((0.01957494)*sj5*x2412)))),IkReal(((0.076260450048)+(((0.01957494)*cj6*sj6))+(((0.01927506)*sj6))+(((-1.0)*x2414))+((x2413*x2414))+(((2.0)*x2416*x2417))+(((0.056092)*x2417))+(((-1.0)*x2413*(py*py)))+(((0.154003323672)*cj6))+(((-0.056092)*x2416))+(((0.076974648164)*x2412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2420.value)))+(x2421.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2422=IKsin(j4);
IkReal x2423=IKcos(j4);
IkReal x2424=((0.035)*sj6);
IkReal x2425=((0.07)*cj5);
IkReal x2426=(cj3*px);
IkReal x2427=((0.279642)*sj6);
IkReal x2428=(py*sj3);
IkReal x2429=((1.0)*cj5);
IkReal x2430=((0.035)*cj6);
IkReal x2431=(px*sj3);
IkReal x2432=((0.07)*sj5);
IkReal x2433=(cj3*py);
IkReal x2434=((0.279642)*cj6);
IkReal x2435=((1.0)*sj5);
IkReal x2436=(cj5*x2423);
IkReal x2437=(pz*x2422);
IkReal x2438=(py*x2435);
IkReal x2439=(cj3*x2423);
IkReal x2440=(sj5*x2423);
IkReal x2441=(pz*x2423);
IkReal x2442=((0.550716)*x2422);
IkReal x2443=((0.054778)*x2422);
IkReal x2444=(sj5*x2422);
evalcond[0]=((-0.275358)+(((-1.0)*x2422*x2431))+(((-1.0)*x2434))+(((-1.0)*x2441))+(((0.028046)*x2422))+(((-1.0)*x2424))+((x2422*x2433))+(((-0.054778)*x2423)));
evalcond[1]=((-0.054778)+(((-1.0)*x2430*x2444))+(((-1.0)*x2423*x2424))+((x2427*x2444))+(((-0.275358)*x2423))+(((-1.0)*pz))+(((0.035)*x2444))+(((0.01)*x2422))+(((-1.0)*x2423*x2434)));
evalcond[2]=((((0.028046)*x2436))+(((-1.0)*x2423*x2429*x2431))+(((-0.01)*cj5))+(((-1.0)*x2426*x2435))+((cj5*x2443))+(((-1.0)*x2428*x2435))+((x2433*x2436))+((cj5*x2437)));
evalcond[3]=((-0.028046)+(((-1.0)*x2433))+x2431+(((-1.0)*x2430*x2440))+((x2427*x2440))+(((0.275358)*x2422))+((x2422*x2424))+(((0.035)*x2440))+(((0.01)*x2423))+((x2422*x2434)));
evalcond[4]=((0.035)+x2427+((x2431*x2440))+(((-1.0)*x2428*x2429))+(((-1.0)*x2430))+(((-0.028046)*x2440))+(((-1.0)*x2423*x2433*x2435))+(((-1.0)*x2435*x2437))+(((0.01)*sj5))+(((-1.0)*sj5*x2443))+(((-1.0)*x2426*x2429)));
evalcond[5]=((-0.0015095874)+(((-0.02)*x2423*x2431))+((x2433*x2442))+(((0.056092)*x2431))+(((-1.0)*x2431*x2442))+(((0.02)*x2423*x2433))+(((-0.550716)*x2441))+(((-1.0)*x2423*x2431*x2432))+(((-0.109556)*pz))+((x2432*x2437))+(((-0.0007)*sj5))+(((-1.0)*pp))+(((0.00196322)*x2440))+(((-0.056092)*x2433))+(((0.02)*x2437))+((x2425*x2426))+((x2425*x2428))+(((0.00383446)*x2444))+(((0.016540940936)*x2422))+(((-0.029606201048)*x2423))+((x2423*x2432*x2433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2445=cj6*cj6;
IkReal x2446=((0.00191723)*sj5);
IkReal x2447=(px*sj3);
IkReal x2448=((0.279642)*cj6);
IkReal x2449=((0.035)*sj6);
IkReal x2450=(sj5*sj6);
IkReal x2451=(cj3*py);
IkReal x2452=((0.035)*pz*sj5);
CheckValue<IkReal> x2453 = IKatan2WithCheck(IkReal(((0.07404639888)+(((0.076974648164)*x2445))+(((0.01957494)*cj6*sj6))+(((0.01927506)*sj6))+(((-0.109556)*pz))+(((0.154003323672)*cj6))+(((-1.0)*(pz*pz))))),IkReal(((0.001217276212)+(((-0.028046)*pz))+(((-0.054778)*x2451))+(((0.00035)*sj6))+(((0.019425)*sj5))+(((-0.01957494)*sj5*x2445))+(((0.00279642)*cj6))+(((-1.0)*pz*x2451))+((pz*x2447))+(((0.00014994)*cj6*sj5))+(((0.078226661836)*x2450))+(((0.076974648164)*cj6*x2450))+(((0.054778)*x2447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2453.valid){
continue;
}
CheckValue<IkReal> x2454=IKPowWithIntegerCheck(IKsign(((0.007174910468)+(((0.275358)*x2451))+(((-0.279642)*pz*x2450))+(((-0.275358)*x2447))+(((0.00098161)*sj6))+((x2449*x2451))+(((0.007842839532)*cj6))+((x2448*x2451))+(((-0.015318229476)*x2450))+(((-1.0)*x2452))+(((-1.0)*x2447*x2449))+(((-1.0)*x2447*x2448))+(((-1.0)*x2446))+((cj6*x2446))+((cj6*x2452))+(((-0.01)*pz)))),-1);
if(!x2454.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2453.value)+(((1.5707963267949)*(x2454.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2455=IKsin(j4);
IkReal x2456=IKcos(j4);
IkReal x2457=((0.035)*sj6);
IkReal x2458=((0.07)*cj5);
IkReal x2459=(cj3*px);
IkReal x2460=((0.279642)*sj6);
IkReal x2461=(py*sj3);
IkReal x2462=((1.0)*cj5);
IkReal x2463=((0.035)*cj6);
IkReal x2464=(px*sj3);
IkReal x2465=((0.07)*sj5);
IkReal x2466=(cj3*py);
IkReal x2467=((0.279642)*cj6);
IkReal x2468=((1.0)*sj5);
IkReal x2469=(cj5*x2456);
IkReal x2470=(pz*x2455);
IkReal x2471=(py*x2468);
IkReal x2472=(cj3*x2456);
IkReal x2473=(sj5*x2456);
IkReal x2474=(pz*x2456);
IkReal x2475=((0.550716)*x2455);
IkReal x2476=((0.054778)*x2455);
IkReal x2477=(sj5*x2455);
evalcond[0]=((-0.275358)+(((-0.054778)*x2456))+(((-1.0)*x2455*x2464))+(((-1.0)*x2474))+(((0.028046)*x2455))+(((-1.0)*x2467))+(((-1.0)*x2457))+((x2455*x2466)));
evalcond[1]=((-0.054778)+((x2460*x2477))+(((-1.0)*x2456*x2467))+(((-0.275358)*x2456))+(((-1.0)*x2456*x2457))+(((-1.0)*pz))+(((-1.0)*x2463*x2477))+(((0.01)*x2455))+(((0.035)*x2477)));
evalcond[2]=((((-1.0)*x2456*x2462*x2464))+(((-0.01)*cj5))+(((0.028046)*x2469))+((x2466*x2469))+((cj5*x2470))+((cj5*x2476))+(((-1.0)*x2461*x2468))+(((-1.0)*x2459*x2468)));
evalcond[3]=((-0.028046)+x2464+(((0.275358)*x2455))+((x2460*x2473))+(((-1.0)*x2466))+(((-1.0)*x2463*x2473))+((x2455*x2457))+(((0.01)*x2456))+(((0.035)*x2473))+((x2455*x2467)));
evalcond[4]=((0.035)+x2460+(((-0.028046)*x2473))+(((-1.0)*x2468*x2470))+(((-1.0)*x2463))+(((-1.0)*sj5*x2476))+(((-1.0)*x2456*x2466*x2468))+(((0.01)*sj5))+(((-1.0)*x2461*x2462))+(((-1.0)*x2459*x2462))+((x2464*x2473)));
evalcond[5]=((-0.0015095874)+((x2458*x2459))+((x2458*x2461))+(((-0.056092)*x2466))+(((-0.109556)*pz))+(((-0.550716)*x2474))+(((0.02)*x2456*x2466))+(((-0.0007)*sj5))+((x2456*x2465*x2466))+(((0.02)*x2470))+(((0.056092)*x2464))+(((-1.0)*pp))+(((0.00196322)*x2473))+(((-1.0)*x2456*x2464*x2465))+(((0.00383446)*x2477))+(((-0.02)*x2456*x2464))+(((0.016540940936)*x2455))+((x2466*x2475))+((x2465*x2470))+(((-1.0)*x2464*x2475))+(((-0.029606201048)*x2456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x385=(cj4*sj6);
IkReal x386=((1.0)*sj3);
IkReal x387=(cj5*sj6);
IkReal x388=(cj4*cj6);
IkReal x389=((1.0)*sj5);
IkReal x390=(cj5*sj4);
IkReal x391=(sj4*sj6);
IkReal x392=(cj4*cj5);
IkReal x393=(cj6*sj4);
IkReal x394=(cj5*cj6);
IkReal x395=(cj3*x394);
IkReal x396=((-1.0)*sj3);
IkReal x397=((((-1.0)*x391))+((sj5*x388)));
IkReal x398=(x385+((sj5*x393)));
IkReal x399=((((-1.0)*sj5*x386))+((cj3*x392)));
IkReal x400=((((-1.0)*x389*x391))+x388);
IkReal x401=((((-1.0)*x386*x392))+(((-1.0)*cj3*x389)));
IkReal x402=((((-1.0)*x393))+(((-1.0)*x385*x389)));
IkReal x403=(((sj3*x394))+((cj3*x397)));
IkReal x404=(((x396*x397))+x395);
IkReal x405=((((-1.0)*x386*x387))+((cj3*x402)));
IkReal x406=((((-1.0)*cj3*x387))+((x396*x402)));
new_r00=(((r20*x398))+((r00*x404))+((r10*x403)));
new_r01=(((r11*x403))+((r01*x404))+((r21*x398)));
new_r02=(((r12*x403))+((r02*(((((-1.0)*x386*x397))+x395))))+((r22*x398)));
new_r10=(((r20*x390))+((r10*x399))+((r00*x401)));
new_r11=(((r01*x401))+((r11*x399))+((r21*x390)));
new_r12=(((r22*x390))+((r12*x399))+((r02*x401)));
new_r20=(((r00*x406))+((r10*x405))+((r20*x400)));
new_r21=(((r11*x405))+((r01*x406))+((r21*x400)));
new_r22=(((r22*x400))+((r12*x405))+((r02*x406)));
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
sj8array[0]=new_r22;
if( sj8array[0] >= -1-IKFAST_SINCOS_THRESH && sj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKasin(sj8array[0]);
    cj8array[0] = IKcos(j8array[0]);
    sj8array[1] = sj8array[0];
    j8array[1] = j8array[0] > 0 ? (IKPI-j8array[0]) : (-IKPI-j8array[0]);
    cj8array[1] = -cj8array[0];
}
else if( isnan(sj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j7eval[3];
j7eval[0]=cj8;
j7eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j7eval[2]=IKsign(cj8);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
j9eval[0]=cj8;
j9eval[1]=IKsign(cj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj8;
j7eval[1]=new_r12;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j9mul = 1;
j9=0;
j7mul=-1.0;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].fmul = j7mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].fmul = j9mul;
vinfos[9].freeind = 0;
vinfos[9].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 9;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j9mul = 1;
j9=0;
j7mul=1.0;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7=IKatan2(((-1.0)*new_r00), new_r01);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].fmul = j7mul;
vinfos[7].freeind = 0;
vinfos[7].maxsolutions = 0;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].fmul = j9mul;
vinfos[9].freeind = 0;
vinfos[9].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 9;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x407=new_r22*new_r22;
IkReal x408=((16.0)*new_r11);
IkReal x409=((16.0)*new_r00);
IkReal x410=((16.0)*new_r01);
IkReal x411=(new_r10*new_r22);
IkReal x412=((8.0)*new_r01);
IkReal x413=((16.0)*x407);
IkReal x414=(x407*x408);
IkReal x415=(x407*x409);
j7eval[0]=((IKabs((x408+(((-1.0)*x414)))))+(IKabs(((((32.0)*new_r01*x407))+(((16.0)*x411))+(((-1.0)*x410)))))+(IKabs((x415+(((-1.0)*x409)))))+(IKabs(((((8.0)*x411))+x412)))+(IKabs((((new_r22*x412))+(((8.0)*new_r10*x407)))))+(IKabs(((((32.0)*new_r10))+((new_r22*x410))+(((-1.0)*new_r10*x413)))))+(IKabs((x409+(((-1.0)*x415)))))+(IKabs((x414+(((-1.0)*x408))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j9]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j7evalpoly[1];
IkReal x416=new_r22*new_r22;
IkReal x417=((16.0)*new_r11);
IkReal x418=(new_r10*new_r22);
IkReal x419=(x416*x417);
IkReal x420=((((8.0)*x418))+(((8.0)*new_r01)));
op[0]=x420;
op[1]=(x419+(((-1.0)*x417)));
op[2]=((((32.0)*new_r01*x416))+(((16.0)*x418))+(((-16.0)*new_r01)));
op[3]=(x417+(((-1.0)*x419)));
op[4]=x420;
polyroots4(op,zeror,numroots);
IkReal j7array[4], cj7array[4], sj7array[4], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[4]={true,true,true,true};
_nj7 = 4;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x421=new_r22*new_r22;
IkReal x422=((16.0)*new_r00);
IkReal x423=(new_r01*new_r22);
IkReal x424=((8.0)*x423);
IkReal x425=((16.0)*x421);
IkReal x426=(x421*x422);
IkReal x427=((8.0)*new_r10*x421);
IkReal x428=(x427+x424);
j7evalpoly[0]=(((htj7*(((((-1.0)*x426))+x422))))+(((htj7*htj7*htj7)*(((((-1.0)*x422))+x426))))+(((htj7*htj7)*(((((32.0)*new_r10))+(((-1.0)*new_r10*x425))+(((16.0)*x423))))))+x428+((x428*(htj7*htj7*htj7*htj7))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j9eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x429=cj7*cj7;
IkReal x430=((1.0)*cj7*new_r22);
IkReal x431=((1.0)+(((-1.0)*x429))+((x429*(new_r22*new_r22))));
j9eval[0]=x431;
j9eval[1]=IKsign(x431);
j9eval[2]=((IKabs(((((-1.0)*new_r00*x430))+((new_r01*sj7)))))+(IKabs(((((-1.0)*new_r01*x430))+(((-1.0)*new_r00*sj7))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j9eval[0]=new_r22;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x432=new_r22*new_r22;
j9eval[0]=(((cj7*x432))+(((-1.0)*cj7)));
j9eval[1]=((((-1.0)*sj7))+((sj7*x432)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r01)+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r01, ((-1.0)*new_r00));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x433=IKcos(j9);
IkReal x434=IKsin(j9);
evalcond[0]=(x433+new_r00);
evalcond[1]=((-1.0)*x434);
evalcond[2]=((-1.0)*x433);
evalcond[3]=(x434+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r01), new_r00);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x435=IKsin(j9);
IkReal x436=IKcos(j9);
evalcond[0]=(x435+new_r01);
evalcond[1]=((-1.0)*x435);
evalcond[2]=((-1.0)*x436);
evalcond[3]=(x436+(((-1.0)*new_r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x437=IKsin(j9);
IkReal x438=IKcos(j9);
evalcond[0]=(x437+new_r11);
evalcond[1]=((-1.0)*x437);
evalcond[2]=((-1.0)*x438);
evalcond[3]=(x438+(((-1.0)*new_r10)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x439=IKcos(j9);
IkReal x440=IKsin(j9);
evalcond[0]=(x439+new_r10);
evalcond[1]=((-1.0)*x440);
evalcond[2]=((-1.0)*x439);
evalcond[3]=(x440+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x441=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x441.valid){
continue;
}
if((((-1.0)*(x441.value))) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(((-1.0)*(x441.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj7)))))+(IKabs(((((-1.0)*gconst50))+cj7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
sj7=IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))));
cj7=gconst50;
if( (gconst50) < -1-IKFAST_SINCOS_THRESH || (gconst50) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=IKacos(gconst50);
CheckValue<IkReal> x442=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x442.valid){
continue;
}
if((((-1.0)*(x442.value))) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(((-1.0)*(x442.value)))));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x443=IKPowWithIntegerCheck(gconst50,-1);
if(!x443.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r11*(x443.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+((gconst50*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x443.value)))+IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+((gconst50*new_r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11*(x443.value)), ((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))+((gconst50*new_r10))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x444=IKsin(j9);
IkReal x445=IKcos(j9);
IkReal x446=((1.0)*gconst50);
if((((1.0)+(((-1.0)*gconst50*x446)))) < -0.00001)
continue;
IkReal x447=IKsqrt(((1.0)+(((-1.0)*gconst50*x446))));
IkReal x448=((1.0)*x447);
evalcond[0]=((-1.0)*x444);
evalcond[1]=((-1.0)*x445);
evalcond[2]=(((gconst50*x444))+new_r11);
evalcond[3]=((((-1.0)*x445*x446))+new_r10);
evalcond[4]=(((x445*x447))+new_r00);
evalcond[5]=((((-1.0)*x444*x448))+new_r01);
evalcond[6]=((((-1.0)*new_r01*x448))+x444+((gconst50*new_r11)));
evalcond[7]=(((new_r00*x447))+x445+(((-1.0)*new_r10*x446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x449=IKPowWithIntegerCheck(IKsign(gconst50),-1);
if(!x449.valid){
continue;
}
CheckValue<IkReal> x450 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x450.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x449.value)))+(x450.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x451=IKsin(j9);
IkReal x452=IKcos(j9);
IkReal x453=((1.0)*gconst50);
if((((1.0)+(((-1.0)*gconst50*x453)))) < -0.00001)
continue;
IkReal x454=IKsqrt(((1.0)+(((-1.0)*gconst50*x453))));
IkReal x455=((1.0)*x454);
evalcond[0]=((-1.0)*x451);
evalcond[1]=((-1.0)*x452);
evalcond[2]=(((gconst50*x451))+new_r11);
evalcond[3]=((((-1.0)*x452*x453))+new_r10);
evalcond[4]=(((x452*x454))+new_r00);
evalcond[5]=((((-1.0)*x451*x455))+new_r01);
evalcond[6]=((((-1.0)*new_r01*x455))+x451+((gconst50*new_r11)));
evalcond[7]=((((-1.0)*new_r10*x453))+((new_r00*x454))+x452);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x456=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x456.valid){
continue;
}
if((((-1.0)*(x456.value))) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(((-1.0)*(x456.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((((-1.0)*gconst50))+cj7)))+(IKabs(((1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
sj7=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))))));
cj7=gconst50;
if( (gconst50) < -1-IKFAST_SINCOS_THRESH || (gconst50) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=((-1.0)*(IKacos(gconst50)));
CheckValue<IkReal> x457=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x457.valid){
continue;
}
if((((-1.0)*(x457.value))) < -0.00001)
continue;
IkReal gconst50=((-1.0)*(IKsqrt(((-1.0)*(x457.value)))));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst50*gconst50))))) < -0.00001)
continue;
CheckValue<IkReal> x458=IKPowWithIntegerCheck(gconst50,-1);
if(!x458.valid){
continue;
}
if( IKabs(((((-1.0)*gconst50*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x458.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst50*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))))+IKsqr((new_r10*(x458.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*gconst50*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst50*gconst50))))))))), (new_r10*(x458.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x459=IKsin(j9);
IkReal x460=IKcos(j9);
IkReal x461=((1.0)*gconst50);
if((((1.0)+(((-1.0)*gconst50*x461)))) < -0.00001)
continue;
IkReal x462=IKsqrt(((1.0)+(((-1.0)*gconst50*x461))));
IkReal x463=((1.0)*x462);
evalcond[0]=((-1.0)*x459);
evalcond[1]=((-1.0)*x460);
evalcond[2]=(((gconst50*x459))+new_r11);
evalcond[3]=((((-1.0)*x460*x461))+new_r10);
evalcond[4]=(((x459*x462))+new_r01);
evalcond[5]=((((-1.0)*x460*x463))+new_r00);
evalcond[6]=(((new_r01*x462))+x459+((gconst50*new_r11)));
evalcond[7]=((((-1.0)*new_r10*x461))+(((-1.0)*new_r00*x463))+x460);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x464=IKPowWithIntegerCheck(IKsign(gconst50),-1);
if(!x464.valid){
continue;
}
CheckValue<IkReal> x465 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x465.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x464.value)))+(x465.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x466=IKsin(j9);
IkReal x467=IKcos(j9);
IkReal x468=((1.0)*gconst50);
if((((1.0)+(((-1.0)*gconst50*x468)))) < -0.00001)
continue;
IkReal x469=IKsqrt(((1.0)+(((-1.0)*gconst50*x468))));
IkReal x470=((1.0)*x469);
evalcond[0]=((-1.0)*x466);
evalcond[1]=((-1.0)*x467);
evalcond[2]=(((gconst50*x466))+new_r11);
evalcond[3]=(new_r10+(((-1.0)*x467*x468)));
evalcond[4]=(((x466*x469))+new_r01);
evalcond[5]=((((-1.0)*x467*x470))+new_r00);
evalcond[6]=(((new_r01*x469))+x466+((gconst50*new_r11)));
evalcond[7]=((((-1.0)*new_r10*x468))+(((-1.0)*new_r00*x470))+x467);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x471=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x471.valid){
continue;
}
if((((-1.0)*(x471.value))) < -0.00001)
continue;
IkReal gconst51=IKsqrt(((-1.0)*(x471.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj7)))))+(IKabs(((((-1.0)*gconst51))+cj7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
sj7=IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))));
cj7=gconst51;
if( (gconst51) < -1-IKFAST_SINCOS_THRESH || (gconst51) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=IKacos(gconst51);
CheckValue<IkReal> x472=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x472.valid){
continue;
}
if((((-1.0)*(x472.value))) < -0.00001)
continue;
IkReal gconst51=IKsqrt(((-1.0)*(x472.value)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x473=IKPowWithIntegerCheck(gconst51,-1);
if(!x473.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r11*(x473.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))+((gconst51*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x473.value)))+IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))+((gconst51*new_r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11*(x473.value)), ((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))+((gconst51*new_r10))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x474=IKsin(j9);
IkReal x475=IKcos(j9);
IkReal x476=((1.0)*gconst51);
if((((1.0)+(((-1.0)*gconst51*x476)))) < -0.00001)
continue;
IkReal x477=IKsqrt(((1.0)+(((-1.0)*gconst51*x476))));
IkReal x478=((1.0)*x477);
evalcond[0]=((-1.0)*x474);
evalcond[1]=((-1.0)*x475);
evalcond[2]=(((gconst51*x474))+new_r11);
evalcond[3]=((((-1.0)*x475*x476))+new_r10);
evalcond[4]=(new_r00+((x475*x477)));
evalcond[5]=(new_r01+(((-1.0)*x474*x478)));
evalcond[6]=((((-1.0)*new_r01*x478))+x474+((gconst51*new_r11)));
evalcond[7]=(((new_r00*x477))+(((-1.0)*new_r10*x476))+x475);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x479=IKPowWithIntegerCheck(IKsign(gconst51),-1);
if(!x479.valid){
continue;
}
CheckValue<IkReal> x480 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x480.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x479.value)))+(x480.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x481=IKsin(j9);
IkReal x482=IKcos(j9);
IkReal x483=((1.0)*gconst51);
if((((1.0)+(((-1.0)*gconst51*x483)))) < -0.00001)
continue;
IkReal x484=IKsqrt(((1.0)+(((-1.0)*gconst51*x483))));
IkReal x485=((1.0)*x484);
evalcond[0]=((-1.0)*x481);
evalcond[1]=((-1.0)*x482);
evalcond[2]=(new_r11+((gconst51*x481)));
evalcond[3]=((((-1.0)*x482*x483))+new_r10);
evalcond[4]=(((x482*x484))+new_r00);
evalcond[5]=((((-1.0)*x481*x485))+new_r01);
evalcond[6]=((((-1.0)*new_r01*x485))+x481+((gconst51*new_r11)));
evalcond[7]=((((-1.0)*new_r10*x483))+x482+((new_r00*x484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x486=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x486.valid){
continue;
}
if((((-1.0)*(x486.value))) < -0.00001)
continue;
IkReal gconst51=IKsqrt(((-1.0)*(x486.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(sj7)))))+(IKabs(((((-1.0)*gconst51))+cj7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
sj7=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))))));
cj7=gconst51;
if( (gconst51) < -1-IKFAST_SINCOS_THRESH || (gconst51) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=((-1.0)*(IKacos(gconst51)));
CheckValue<IkReal> x487=IKPowWithIntegerCheck(((-1.0)+(new_r22*new_r22)),-1);
if(!x487.valid){
continue;
}
if((((-1.0)*(x487.value))) < -0.00001)
continue;
IkReal gconst51=IKsqrt(((-1.0)*(x487.value)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
CheckValue<IkReal> x488=IKPowWithIntegerCheck(gconst51,-1);
if(!x488.valid){
continue;
}
if( IKabs(((((-1.0)*gconst51*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x488.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*gconst51*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))))+IKsqr((new_r10*(x488.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*gconst51*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51))))))))), (new_r10*(x488.value)));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x489=IKsin(j9);
IkReal x490=IKcos(j9);
IkReal x491=((1.0)*x490);
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
IkReal x492=IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))));
evalcond[0]=((-1.0)*x489);
evalcond[1]=((-1.0)*x490);
evalcond[2]=(new_r11+((gconst51*x489)));
evalcond[3]=((((-1.0)*gconst51*x491))+new_r10);
evalcond[4]=(((x489*x492))+new_r01);
evalcond[5]=((((-1.0)*x491*x492))+new_r00);
evalcond[6]=(x489+((new_r01*x492))+((gconst51*new_r11)));
evalcond[7]=((((-1.0)*gconst51*new_r10))+(((-1.0)*new_r00*x492))+x490);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x493=IKPowWithIntegerCheck(IKsign(gconst51),-1);
if(!x493.valid){
continue;
}
CheckValue<IkReal> x494 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x494.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x493.value)))+(x494.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x495=IKsin(j9);
IkReal x496=IKcos(j9);
IkReal x497=((1.0)*x496);
if((((1.0)+(((-1.0)*(gconst51*gconst51))))) < -0.00001)
continue;
IkReal x498=IKsqrt(((1.0)+(((-1.0)*(gconst51*gconst51)))));
evalcond[0]=((-1.0)*x495);
evalcond[1]=((-1.0)*x496);
evalcond[2]=(((gconst51*x495))+new_r11);
evalcond[3]=((((-1.0)*gconst51*x497))+new_r10);
evalcond[4]=(((x495*x498))+new_r01);
evalcond[5]=((((-1.0)*x497*x498))+new_r00);
evalcond[6]=(x495+((new_r01*x498))+((gconst51*new_r11)));
evalcond[7]=((((-1.0)*gconst51*new_r10))+(((-1.0)*new_r00*x498))+x496);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x499=new_r22*new_r22;
IkReal x500=((1.0)*new_r22);
CheckValue<IkReal> x501=IKPowWithIntegerCheck((((cj7*x499))+(((-1.0)*cj7))),-1);
if(!x501.valid){
continue;
}
CheckValue<IkReal> x502=IKPowWithIntegerCheck(((((-1.0)*sj7))+((sj7*x499))),-1);
if(!x502.valid){
continue;
}
if( IKabs(((x501.value)*(((((-1.0)*new_r00*x500))+new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x502.value)*(((((-1.0)*new_r11*x500))+new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x501.value)*(((((-1.0)*new_r00*x500))+new_r11))))+IKsqr(((x502.value)*(((((-1.0)*new_r11*x500))+new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x501.value)*(((((-1.0)*new_r00*x500))+new_r11))), ((x502.value)*(((((-1.0)*new_r11*x500))+new_r00))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x503=IKsin(j9);
IkReal x504=IKcos(j9);
IkReal x505=((1.0)*new_r10);
IkReal x506=(new_r22*sj7);
IkReal x507=(cj7*new_r01);
IkReal x508=((1.0)*new_r22);
IkReal x509=(cj7*new_r00);
IkReal x510=((1.0)*sj7);
IkReal x511=(new_r22*x503);
IkReal x512=(new_r22*x504);
IkReal x513=((1.0)*x504);
evalcond[0]=((((-1.0)*new_r01*x510))+x503+((cj7*new_r11)));
evalcond[1]=((((-1.0)*cj7*x505))+((new_r00*sj7))+x504);
evalcond[2]=(((new_r10*sj7))+x509+x511);
evalcond[3]=(((new_r11*sj7))+x507+x512);
evalcond[4]=(((sj7*x504))+((cj7*x511))+new_r00);
evalcond[5]=(new_r11+((x504*x506))+((cj7*x503)));
evalcond[6]=((((-1.0)*x503*x510))+((cj7*x512))+new_r01);
evalcond[7]=((((-1.0)*cj7*x513))+((x503*x506))+new_r10);
evalcond[8]=((((-1.0)*x505*x506))+(((-1.0)*x508*x509))+(((-1.0)*x503)));
evalcond[9]=((((-1.0)*new_r11*x506))+(((-1.0)*x507*x508))+(((-1.0)*x513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x514=((1.0)*sj7);
CheckValue<IkReal> x515=IKPowWithIntegerCheck(new_r22,-1);
if(!x515.valid){
continue;
}
if( IKabs(((x515.value)*(((((-1.0)*new_r10*x514))+(((-1.0)*cj7*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*x514))+((cj7*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x515.value)*(((((-1.0)*new_r10*x514))+(((-1.0)*cj7*new_r00))))))+IKsqr(((((-1.0)*new_r00*x514))+((cj7*new_r10))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x515.value)*(((((-1.0)*new_r10*x514))+(((-1.0)*cj7*new_r00))))), ((((-1.0)*new_r00*x514))+((cj7*new_r10))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x516=IKsin(j9);
IkReal x517=IKcos(j9);
IkReal x518=((1.0)*new_r10);
IkReal x519=(new_r22*sj7);
IkReal x520=(cj7*new_r01);
IkReal x521=((1.0)*new_r22);
IkReal x522=(cj7*new_r00);
IkReal x523=((1.0)*sj7);
IkReal x524=(new_r22*x516);
IkReal x525=(new_r22*x517);
IkReal x526=((1.0)*x517);
evalcond[0]=((((-1.0)*new_r01*x523))+x516+((cj7*new_r11)));
evalcond[1]=((((-1.0)*cj7*x518))+((new_r00*sj7))+x517);
evalcond[2]=(((new_r10*sj7))+x522+x524);
evalcond[3]=(((new_r11*sj7))+x520+x525);
evalcond[4]=(((cj7*x524))+((sj7*x517))+new_r00);
evalcond[5]=(((cj7*x516))+((x517*x519))+new_r11);
evalcond[6]=(((cj7*x525))+(((-1.0)*x516*x523))+new_r01);
evalcond[7]=((((-1.0)*cj7*x526))+((x516*x519))+new_r10);
evalcond[8]=((((-1.0)*x521*x522))+(((-1.0)*x516))+(((-1.0)*x518*x519)));
evalcond[9]=((((-1.0)*x520*x521))+(((-1.0)*x526))+(((-1.0)*new_r11*x519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x527=cj7*cj7;
IkReal x528=((1.0)*cj7*new_r22);
CheckValue<IkReal> x529 = IKatan2WithCheck(IkReal((((new_r01*sj7))+(((-1.0)*new_r00*x528)))),IkReal(((((-1.0)*new_r01*x528))+(((-1.0)*new_r00*sj7)))),IKFAST_ATAN2_MAGTHRESH);
if(!x529.valid){
continue;
}
CheckValue<IkReal> x530=IKPowWithIntegerCheck(IKsign(((1.0)+(((-1.0)*x527))+((x527*(new_r22*new_r22))))),-1);
if(!x530.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x529.value)+(((1.5707963267949)*(x530.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x531=IKsin(j9);
IkReal x532=IKcos(j9);
IkReal x533=((1.0)*new_r10);
IkReal x534=(new_r22*sj7);
IkReal x535=(cj7*new_r01);
IkReal x536=((1.0)*new_r22);
IkReal x537=(cj7*new_r00);
IkReal x538=((1.0)*sj7);
IkReal x539=(new_r22*x531);
IkReal x540=(new_r22*x532);
IkReal x541=((1.0)*x532);
evalcond[0]=((((-1.0)*new_r01*x538))+x531+((cj7*new_r11)));
evalcond[1]=(((new_r00*sj7))+(((-1.0)*cj7*x533))+x532);
evalcond[2]=(((new_r10*sj7))+x537+x539);
evalcond[3]=(((new_r11*sj7))+x540+x535);
evalcond[4]=(((cj7*x539))+((sj7*x532))+new_r00);
evalcond[5]=(((cj7*x531))+new_r11+((x532*x534)));
evalcond[6]=(((cj7*x540))+(((-1.0)*x531*x538))+new_r01);
evalcond[7]=(((x531*x534))+(((-1.0)*cj7*x541))+new_r10);
evalcond[8]=((((-1.0)*x533*x534))+(((-1.0)*x531))+(((-1.0)*x536*x537)));
evalcond[9]=((((-1.0)*x541))+(((-1.0)*new_r11*x534))+(((-1.0)*x535*x536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x543=IKPowWithIntegerCheck(cj8,-1);
if(!x543.valid){
continue;
}
IkReal x542=x543.value;
CheckValue<IkReal> x544=IKPowWithIntegerCheck(new_r12,-1);
if(!x544.valid){
continue;
}
CheckValue<IkReal> x545=IKPowWithIntegerCheck(x542,-2);
if(!x545.valid){
continue;
}
if( IKabs((x542*(x544.value)*(((((-1.0)*(new_r02*new_r02)))+(x545.value))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x542)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x542*(x544.value)*(((((-1.0)*(new_r02*new_r02)))+(x545.value)))))+IKsqr((new_r02*x542))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x542*(x544.value)*(((((-1.0)*(new_r02*new_r02)))+(x545.value)))), (new_r02*x542));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x546=IKcos(j7);
IkReal x547=IKsin(j7);
IkReal x548=((1.0)*new_r02);
IkReal x549=(cj8*x546);
IkReal x550=(new_r12*x547);
IkReal x551=(cj8*x547);
evalcond[0]=((((-1.0)*x549))+new_r02);
evalcond[1]=((((-1.0)*x551))+new_r12);
evalcond[2]=(((new_r12*x546))+(((-1.0)*x547*x548)));
evalcond[3]=(((new_r02*x546))+x550+(((-1.0)*cj8)));
evalcond[4]=(((new_r00*x549))+((new_r20*sj8))+((new_r10*x551)));
evalcond[5]=(((new_r11*x551))+((new_r21*sj8))+((new_r01*x549)));
evalcond[6]=((-1.0)+((new_r02*x549))+((new_r22*sj8))+((cj8*x550)));
evalcond[7]=(((cj8*new_r22))+(((-1.0)*sj8*x550))+(((-1.0)*sj8*x546*x548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=cj8;
j9eval[1]=IKsign(cj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=cj8;
j9eval[1]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
j9eval[0]=cj8;
j9eval[1]=sj7;
j9eval[2]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x552=((1.0)*cj7);
if( IKabs((((new_r01*sj7))+(((-1.0)*new_r00*x552)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x552))+(((-1.0)*new_r00*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*sj7))+(((-1.0)*new_r00*x552))))+IKsqr(((((-1.0)*new_r01*x552))+(((-1.0)*new_r00*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((new_r01*sj7))+(((-1.0)*new_r00*x552))), ((((-1.0)*new_r01*x552))+(((-1.0)*new_r00*sj7))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x553=IKsin(j9);
IkReal x554=IKcos(j9);
IkReal x555=((1.0)*cj7);
IkReal x556=(sj7*x554);
IkReal x557=(cj7*x553);
IkReal x558=(sj7*x553);
IkReal x559=(x557+x556);
evalcond[0]=(((new_r10*sj7))+x553+((cj7*new_r00)));
evalcond[1]=(((new_r11*sj7))+x554+((cj7*new_r01)));
evalcond[2]=((((-1.0)*new_r01*sj7))+x553+((cj7*new_r11)));
evalcond[3]=((((-1.0)*new_r10*x555))+((new_r00*sj7))+x554);
evalcond[4]=(x559+new_r00);
evalcond[5]=(x559+new_r11);
evalcond[6]=((((-1.0)*x558))+((cj7*x554))+new_r01);
evalcond[7]=((((-1.0)*x554*x555))+x558+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs((((new_r01*sj7))+((cj7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*sj7))+((cj7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*sj7))+((cj7*new_r00))))+IKsqr(((((-1.0)*new_r00*sj7))+((cj7*new_r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((new_r01*sj7))+((cj7*new_r00))), ((((-1.0)*new_r00*sj7))+((cj7*new_r01))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x560=IKsin(j9);
IkReal x561=IKcos(j9);
IkReal x562=((1.0)*cj7);
IkReal x563=((1.0)*sj7);
IkReal x564=(((x561*x562))+((x560*x563)));
evalcond[0]=(x560+((cj7*new_r11))+(((-1.0)*new_r01*x563)));
evalcond[1]=(((new_r00*sj7))+x561+(((-1.0)*new_r10*x562)));
evalcond[2]=(((new_r10*sj7))+(((-1.0)*x560))+((cj7*new_r00)));
evalcond[3]=(((new_r11*sj7))+(((-1.0)*x561))+((cj7*new_r01)));
evalcond[4]=(((sj7*x561))+(((-1.0)*x560*x562))+new_r00);
evalcond[5]=(((cj7*x560))+new_r11+(((-1.0)*x561*x563)));
evalcond[6]=(new_r01+(((-1.0)*x564)));
evalcond[7]=(new_r10+(((-1.0)*x564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x565=IKsin(j9);
IkReal x566=IKcos(j9);
IkReal x567=((1.0)*cj8);
IkReal x568=((1.0)*sj8);
evalcond[0]=(x565+new_r11);
evalcond[1]=(x566+(((-1.0)*new_r10)));
evalcond[2]=(((sj8*x565))+new_r00);
evalcond[3]=(((sj8*x566))+new_r01);
evalcond[4]=(new_r20+(((-1.0)*x565*x567)));
evalcond[5]=((((-1.0)*x566*x567))+new_r21);
evalcond[6]=((((-1.0)*new_r00*x568))+((cj8*new_r20))+(((-1.0)*x565)));
evalcond[7]=(((cj8*new_r21))+(((-1.0)*x566))+(((-1.0)*new_r01*x568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x569=IKsin(j9);
IkReal x570=IKcos(j9);
IkReal x571=((1.0)*cj8);
evalcond[0]=(x570+new_r10);
evalcond[1]=(x569+(((-1.0)*new_r11)));
evalcond[2]=((((-1.0)*x569*x571))+new_r20);
evalcond[3]=((((-1.0)*x570*x571))+new_r21);
evalcond[4]=(((sj8*x569))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r01))+((sj8*x570)));
evalcond[6]=(((cj8*new_r20))+((new_r00*sj8))+(((-1.0)*x569)));
evalcond[7]=(((cj8*new_r21))+((new_r01*sj8))+(((-1.0)*x570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r20, new_r21);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x572=IKcos(j9);
IkReal x573=IKsin(j9);
IkReal x574=((1.0)*cj7);
IkReal x575=((1.0)*x573);
evalcond[0]=((((-1.0)*x575))+new_r20);
evalcond[1]=((((-1.0)*x572))+new_r21);
evalcond[2]=(((sj7*x572))+new_r00);
evalcond[3]=(((cj7*x573))+new_r11);
evalcond[4]=((((-1.0)*sj7*x575))+new_r01);
evalcond[5]=(new_r10+(((-1.0)*x572*x574)));
evalcond[6]=((((-1.0)*new_r01*sj7))+x573+((cj7*new_r11)));
evalcond[7]=(((new_r00*sj7))+(((-1.0)*new_r10*x574))+x572);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x576=IKcos(j9);
IkReal x577=IKsin(j9);
IkReal x578=((1.0)*cj7);
IkReal x579=((1.0)*sj7);
evalcond[0]=(x577+new_r20);
evalcond[1]=(x576+new_r21);
evalcond[2]=(((sj7*x576))+new_r00);
evalcond[3]=(((cj7*x577))+new_r11);
evalcond[4]=((((-1.0)*x577*x579))+new_r01);
evalcond[5]=((((-1.0)*x576*x578))+new_r10);
evalcond[6]=(x577+(((-1.0)*new_r01*x579))+((cj7*new_r11)));
evalcond[7]=(((new_r00*sj7))+(((-1.0)*new_r10*x578))+x576);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=IKabs(new_r22);
if( IKabs(j9eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j9]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j9array[2], cj9array[2], sj9array[2], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[2]={true,true};
_nj9 = 2;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x581=IKPowWithIntegerCheck(cj8,-1);
if(!x581.valid){
continue;
}
IkReal x580=x581.value;
CheckValue<IkReal> x582=IKPowWithIntegerCheck(sj7,-1);
if(!x582.valid){
continue;
}
CheckValue<IkReal> x583=IKPowWithIntegerCheck(sj8,-1);
if(!x583.valid){
continue;
}
if( IKabs((new_r20*x580)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x580*(x582.value)*(x583.value)*(((((-1.0)*cj8*new_r11))+(((-1.0)*cj7*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x580))+IKsqr((x580*(x582.value)*(x583.value)*(((((-1.0)*cj8*new_r11))+(((-1.0)*cj7*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r20*x580), (x580*(x582.value)*(x583.value)*(((((-1.0)*cj8*new_r11))+(((-1.0)*cj7*new_r20))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x584=IKsin(j9);
IkReal x585=IKcos(j9);
IkReal x586=((1.0)*new_r10);
IkReal x587=(sj7*sj8);
IkReal x588=(cj7*new_r01);
IkReal x589=((1.0)*sj8);
IkReal x590=(cj7*new_r00);
IkReal x591=(cj7*x584);
IkReal x592=(sj8*x585);
IkReal x593=((1.0)*x584);
IkReal x594=((1.0)*x585);
evalcond[0]=((((-1.0)*cj8*x593))+new_r20);
evalcond[1]=((((-1.0)*cj8*x594))+new_r21);
evalcond[2]=((((-1.0)*new_r01*sj7))+x584+((cj7*new_r11)));
evalcond[3]=((((-1.0)*cj7*x586))+((new_r00*sj7))+x585);
evalcond[4]=(((sj8*x584))+((new_r10*sj7))+x590);
evalcond[5]=(((new_r11*sj7))+x588+x592);
evalcond[6]=(((sj8*x591))+new_r00+((sj7*x585)));
evalcond[7]=(((x585*x587))+x591+new_r11);
evalcond[8]=((((-1.0)*sj7*x593))+new_r01+((cj7*x592)));
evalcond[9]=(((x584*x587))+(((-1.0)*cj7*x594))+new_r10);
evalcond[10]=(((cj8*new_r20))+(((-1.0)*x589*x590))+(((-1.0)*x586*x587))+(((-1.0)*x593)));
evalcond[11]=(((cj8*new_r21))+(((-1.0)*x588*x589))+(((-1.0)*x594))+(((-1.0)*new_r11*x587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x596=IKPowWithIntegerCheck(cj8,-1);
if(!x596.valid){
continue;
}
IkReal x595=x596.value;
CheckValue<IkReal> x597=IKPowWithIntegerCheck(sj7,-1);
if(!x597.valid){
continue;
}
if( IKabs((new_r20*x595)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x595*(x597.value)*(((((-1.0)*cj7*new_r20*sj8))+(((-1.0)*cj8*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x595))+IKsqr((x595*(x597.value)*(((((-1.0)*cj7*new_r20*sj8))+(((-1.0)*cj8*new_r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r20*x595), (x595*(x597.value)*(((((-1.0)*cj7*new_r20*sj8))+(((-1.0)*cj8*new_r00))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x598=IKsin(j9);
IkReal x599=IKcos(j9);
IkReal x600=((1.0)*new_r10);
IkReal x601=(sj7*sj8);
IkReal x602=(cj7*new_r01);
IkReal x603=((1.0)*sj8);
IkReal x604=(cj7*new_r00);
IkReal x605=(cj7*x598);
IkReal x606=(sj8*x599);
IkReal x607=((1.0)*x598);
IkReal x608=((1.0)*x599);
evalcond[0]=((((-1.0)*cj8*x607))+new_r20);
evalcond[1]=((((-1.0)*cj8*x608))+new_r21);
evalcond[2]=((((-1.0)*new_r01*sj7))+x598+((cj7*new_r11)));
evalcond[3]=(((new_r00*sj7))+x599+(((-1.0)*cj7*x600)));
evalcond[4]=(((new_r10*sj7))+((sj8*x598))+x604);
evalcond[5]=(((new_r11*sj7))+x602+x606);
evalcond[6]=(((sj8*x605))+((sj7*x599))+new_r00);
evalcond[7]=(x605+((x599*x601))+new_r11);
evalcond[8]=(((cj7*x606))+(((-1.0)*sj7*x607))+new_r01);
evalcond[9]=(new_r10+((x598*x601))+(((-1.0)*cj7*x608)));
evalcond[10]=(((cj8*new_r20))+(((-1.0)*x603*x604))+(((-1.0)*x600*x601))+(((-1.0)*x607)));
evalcond[11]=((((-1.0)*x602*x603))+((cj8*new_r21))+(((-1.0)*x608))+(((-1.0)*new_r11*x601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x609=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x609.valid){
continue;
}
CheckValue<IkReal> x610 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x610.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x609.value)))+(x610.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x611=IKsin(j9);
IkReal x612=IKcos(j9);
IkReal x613=((1.0)*new_r10);
IkReal x614=(sj7*sj8);
IkReal x615=(cj7*new_r01);
IkReal x616=((1.0)*sj8);
IkReal x617=(cj7*new_r00);
IkReal x618=(cj7*x611);
IkReal x619=(sj8*x612);
IkReal x620=((1.0)*x611);
IkReal x621=((1.0)*x612);
evalcond[0]=((((-1.0)*cj8*x620))+new_r20);
evalcond[1]=((((-1.0)*cj8*x621))+new_r21);
evalcond[2]=((((-1.0)*new_r01*sj7))+x611+((cj7*new_r11)));
evalcond[3]=(((new_r00*sj7))+x612+(((-1.0)*cj7*x613)));
evalcond[4]=(((sj8*x611))+((new_r10*sj7))+x617);
evalcond[5]=(((new_r11*sj7))+x619+x615);
evalcond[6]=(((sj8*x618))+new_r00+((sj7*x612)));
evalcond[7]=(((x612*x614))+x618+new_r11);
evalcond[8]=((((-1.0)*sj7*x620))+new_r01+((cj7*x619)));
evalcond[9]=(((x611*x614))+(((-1.0)*cj7*x621))+new_r10);
evalcond[10]=(((cj8*new_r20))+(((-1.0)*x620))+(((-1.0)*x613*x614))+(((-1.0)*x616*x617)));
evalcond[11]=(((cj8*new_r21))+(((-1.0)*x621))+(((-1.0)*new_r11*x614))+(((-1.0)*x615*x616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x622=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x622.valid){
continue;
}
CheckValue<IkReal> x623 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x623.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x622.value)))+(x623.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
IkReal x624=((1.0)*cj8);
evalcond[0]=((((-1.0)*x624*(IKsin(j9))))+new_r20);
evalcond[1]=((((-1.0)*x624*(IKcos(j9))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=cj8;
j7eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j7eval[2]=IKsign(cj8);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=cj8;
j7eval[1]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
IkReal x625=(((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)));
j7eval[0]=x625;
j7eval[1]=IKsign(x625);
j7eval[2]=((IKabs(((((-1.0)*cj9*new_r00))+((new_r01*sj9)))))+(IKabs((((cj9*new_r10))+(((-1.0)*new_r11*sj9))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
IkReal x626=(((cj9*new_r01))+(((-1.0)*new_r11*sj9)));
j7eval[0]=x626;
j7eval[1]=((IKabs((((cj9*sj9))+(((-1.0)*new_r00*new_r01)))))+(IKabs(((((-1.0)*(cj9*cj9)))+((new_r00*new_r11))))));
j7eval[2]=IKsign(x626);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
IkReal x627=((1.0)*sj9);
IkReal x628=(((cj9*new_r00))+(((-1.0)*new_r10*x627)));
j7eval[0]=x628;
j7eval[1]=((IKabs(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*new_r00*new_r11)))))+(IKabs(((((-1.0)*cj9*x627))+((new_r10*new_r11))))));
j7eval[2]=IKsign(x628);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x631 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x631)==0){
continue;
}
IkReal x629=pow(x631,-0.5);
IkReal x630=((-1.0)*x629);
CheckValue<IkReal> x632 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x632.valid){
continue;
}
IkReal gconst26=((-1.0)*(x632.value));
IkReal gconst27=(new_r00*x630);
IkReal gconst28=(new_r10*x630);
CheckValue<IkReal> x633 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x633.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x633.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x637 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x637.valid){
continue;
}
IkReal x634=((-1.0)*(x637.value));
IkReal x635=x629;
IkReal x636=((-1.0)*x635);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x634;
IkReal gconst26=x634;
IkReal gconst27=(new_r00*x636);
IkReal gconst28=(new_r10*x636);
IkReal x638=new_r10*new_r10;
IkReal x639=(new_r00*new_r11);
IkReal x640=(x639+(((-1.0)*new_r01*new_r10)));
IkReal x641=x629;
IkReal x642=((1.0)*x641);
j7eval[0]=x640;
j7eval[1]=IKsign(x640);
j7eval[2]=((IKabs(((((-1.0)*new_r00*new_r01*x642))+((new_r00*new_r10*x641)))))+(IKabs((((x639*x641))+(((-1.0)*x638*x642))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x646 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x646.valid){
continue;
}
IkReal x643=((-1.0)*(x646.value));
IkReal x644=x629;
IkReal x645=((-1.0)*x644);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x643;
IkReal gconst26=x643;
IkReal gconst27=(new_r00*x645);
IkReal gconst28=(new_r10*x645);
IkReal x647=new_r10*new_r10;
IkReal x648=((1.0)*new_r00);
CheckValue<IkReal> x651=IKPowWithIntegerCheck((x647+(new_r00*new_r00)),-1);
if(!x651.valid){
continue;
}
IkReal x649=x651.value;
IkReal x650=(x647*x649);
j7eval[0]=((IKabs(((((-1.0)*new_r11*x648))+x650)))+(IKabs((((new_r00*new_r01*x650))+(((-1.0)*new_r10*x648*x649))+((new_r01*x649*(new_r00*new_r00*new_r00)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x655 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x655.valid){
continue;
}
IkReal x652=((-1.0)*(x655.value));
IkReal x653=x629;
IkReal x654=((-1.0)*x653);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x652;
IkReal gconst26=x652;
IkReal gconst27=(new_r00*x654);
IkReal gconst28=(new_r10*x654);
IkReal x656=new_r00*new_r00;
IkReal x657=(new_r00*new_r01);
IkReal x658=(((new_r10*new_r11))+x657);
IkReal x659=x629;
IkReal x660=(new_r00*x659);
j7eval[0]=x658;
j7eval[1]=((IKabs((((new_r10*x660))+((x657*x659)))))+(IKabs((((new_r11*x660))+(((-1.0)*x656*x659))))));
j7eval[2]=IKsign(x658);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x661=((-1.0)*new_r10);
CheckValue<IkReal> x663 = IKatan2WithCheck(IkReal(0),IkReal(x661),IKFAST_ATAN2_MAGTHRESH);
if(!x663.valid){
continue;
}
IkReal x662=((-1.0)*(x663.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x662;
new_r11=0;
new_r00=0;
IkReal gconst26=x662;
IkReal gconst27=0;
IkReal x664 = new_r10*new_r10;
if(IKabs(x664)==0){
continue;
}
IkReal gconst28=(x661*(pow(x664,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x665=IKPowWithIntegerCheck(gconst28,-1);
if(!x665.valid){
continue;
}
cj7array[0]=(new_r10*(x665.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x666=IKsin(j7);
IkReal x667=IKcos(j7);
evalcond[0]=(new_r10*x666);
evalcond[1]=(gconst28*x666);
evalcond[2]=((-1.0)*new_r01*x666);
evalcond[3]=(gconst28+((new_r01*x667)));
evalcond[4]=(((gconst28*x667))+new_r01);
evalcond[5]=(gconst28+(((-1.0)*new_r10*x667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x668=IKPowWithIntegerCheck(new_r10,-1);
if(!x668.valid){
continue;
}
cj7array[0]=(gconst28*(x668.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x669=IKsin(j7);
IkReal x670=IKcos(j7);
IkReal x671=(gconst28*x670);
evalcond[0]=(new_r10*x669);
evalcond[1]=(gconst28*x669);
evalcond[2]=((-1.0)*new_r01*x669);
evalcond[3]=(((new_r01*x670))+gconst28);
evalcond[4]=(x671+new_r01);
evalcond[5]=((((-1.0)*x671))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst27;
evalcond[2]=gconst28;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x672=((-1.0)*new_r10);
CheckValue<IkReal> x674 = IKatan2WithCheck(IkReal(new_r00),IkReal(x672),IKFAST_ATAN2_MAGTHRESH);
if(!x674.valid){
continue;
}
IkReal x673=((-1.0)*(x674.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x673;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst26=x673;
IkReal gconst27=((-1.0)*new_r00);
IkReal gconst28=x672;
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs((new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x675=((-1.0)*new_r10);
CheckValue<IkReal> x677 = IKatan2WithCheck(IkReal(new_r00),IkReal(x675),IKFAST_ATAN2_MAGTHRESH);
if(!x677.valid){
continue;
}
IkReal x676=((-1.0)*(x677.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x676;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst26=x676;
IkReal gconst27=((-1.0)*new_r00);
IkReal gconst28=x675;
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs(new_r10*new_r10))+(IKabs((new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x678=((-1.0)*new_r10);
CheckValue<IkReal> x680 = IKatan2WithCheck(IkReal(new_r00),IkReal(x678),IKFAST_ATAN2_MAGTHRESH);
if(!x680.valid){
continue;
}
IkReal x679=((-1.0)*(x680.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x679;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst26=x679;
IkReal gconst27=((-1.0)*new_r00);
IkReal gconst28=x678;
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(((-1.0)+(new_r10*new_r10))))+(IKabs((new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x681=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst27*gconst27)))+(((-1.0)*(gconst28*gconst28))))),-1);
if(!x681.valid){
continue;
}
CheckValue<IkReal> x682 = IKatan2WithCheck(IkReal((gconst28*new_r00)),IkReal((gconst27*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x682.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x681.value)))+(x682.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x683=IKcos(j7);
IkReal x684=IKsin(j7);
IkReal x685=(gconst27*x683);
IkReal x686=(gconst28*x684);
IkReal x687=(gconst28*x683);
IkReal x688=(gconst27*x684);
IkReal x689=(x686+x685);
evalcond[0]=x689;
evalcond[1]=(gconst27+((new_r00*x683))+((new_r10*x684)));
evalcond[2]=(x689+new_r00);
evalcond[3]=(x687+(((-1.0)*x688)));
evalcond[4]=((((-1.0)*new_r10*x683))+gconst28+((new_r00*x684)));
evalcond[5]=(x688+new_r10+(((-1.0)*x687)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x690 = IKatan2WithCheck(IkReal((gconst27*gconst28)),IkReal(((-1.0)*(gconst28*gconst28))),IKFAST_ATAN2_MAGTHRESH);
if(!x690.valid){
continue;
}
CheckValue<IkReal> x691=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*new_r10))+(((-1.0)*gconst27*new_r00)))),-1);
if(!x691.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x690.value)+(((1.5707963267949)*(x691.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x692=IKcos(j7);
IkReal x693=IKsin(j7);
IkReal x694=(gconst27*x692);
IkReal x695=(gconst28*x693);
IkReal x696=(gconst28*x692);
IkReal x697=(gconst27*x693);
IkReal x698=(x694+x695);
evalcond[0]=x698;
evalcond[1]=(gconst27+((new_r10*x693))+((new_r00*x692)));
evalcond[2]=(x698+new_r00);
evalcond[3]=(x696+(((-1.0)*x697)));
evalcond[4]=(gconst28+((new_r00*x693))+(((-1.0)*new_r10*x692)));
evalcond[5]=(x697+new_r10+(((-1.0)*x696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x699 = IKatan2WithCheck(IkReal((gconst27*gconst28)),IkReal(gconst27*gconst27),IKFAST_ATAN2_MAGTHRESH);
if(!x699.valid){
continue;
}
CheckValue<IkReal> x700=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*new_r10))+(((-1.0)*gconst27*new_r00)))),-1);
if(!x700.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x699.value)+(((1.5707963267949)*(x700.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x701=IKcos(j7);
IkReal x702=IKsin(j7);
IkReal x703=(gconst27*x701);
IkReal x704=(gconst28*x702);
IkReal x705=(gconst28*x701);
IkReal x706=(gconst27*x702);
IkReal x707=(x703+x704);
evalcond[0]=x707;
evalcond[1]=(((new_r00*x701))+gconst27+((new_r10*x702)));
evalcond[2]=(x707+new_r00);
evalcond[3]=((((-1.0)*x706))+x705);
evalcond[4]=(((new_r00*x702))+gconst28+(((-1.0)*new_r10*x701)));
evalcond[5]=((((-1.0)*x705))+x706+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x709 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x709.valid){
continue;
}
IkReal x708=((-1.0)*(x709.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x708;
new_r01=0;
new_r10=0;
IkReal gconst26=x708;
IkReal x710 = new_r00*new_r00;
if(IKabs(x710)==0){
continue;
}
IkReal gconst27=((-1.0)*new_r00*(pow(x710,-0.5)));
IkReal gconst28=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x712 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x712.valid){
continue;
}
IkReal x711=((-1.0)*(x712.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x711;
new_r01=0;
new_r10=0;
IkReal gconst26=x711;
IkReal x713 = new_r00*new_r00;
if(IKabs(x713)==0){
continue;
}
IkReal gconst27=((-1.0)*new_r00*(pow(x713,-0.5)));
IkReal gconst28=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x714=IKPowWithIntegerCheck(gconst27,-1);
if(!x714.valid){
continue;
}
cj7array[0]=((-1.0)*new_r00*(x714.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x715=IKsin(j7);
IkReal x716=IKcos(j7);
evalcond[0]=(new_r00*x715);
evalcond[1]=(new_r11*x715);
evalcond[2]=((-1.0)*gconst27*x715);
evalcond[3]=(gconst27+((new_r11*x716)));
evalcond[4]=(((new_r00*x716))+gconst27);
evalcond[5]=(((gconst27*x716))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x717=IKPowWithIntegerCheck(new_r00,-1);
if(!x717.valid){
continue;
}
cj7array[0]=((-1.0)*gconst27*(x717.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x718=IKsin(j7);
IkReal x719=IKcos(j7);
IkReal x720=(gconst27*x719);
evalcond[0]=(new_r00*x718);
evalcond[1]=(new_r11*x718);
evalcond[2]=((-1.0)*gconst27*x718);
evalcond[3]=(gconst27+((new_r11*x719)));
evalcond[4]=(x720+new_r00);
evalcond[5]=(x720+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x721=IKPowWithIntegerCheck(new_r11,-1);
if(!x721.valid){
continue;
}
cj7array[0]=((-1.0)*gconst27*(x721.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x722=IKsin(j7);
IkReal x723=IKcos(j7);
IkReal x724=(gconst27*x723);
evalcond[0]=(new_r00*x722);
evalcond[1]=(new_r11*x722);
evalcond[2]=((-1.0)*gconst27*x722);
evalcond[3]=(((new_r00*x723))+gconst27);
evalcond[4]=(x724+new_r00);
evalcond[5]=(x724+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x725=((-1.0)*new_r10);
CheckValue<IkReal> x727 = IKatan2WithCheck(IkReal(0),IkReal(x725),IKFAST_ATAN2_MAGTHRESH);
if(!x727.valid){
continue;
}
IkReal x726=((-1.0)*(x727.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x726;
new_r00=0;
IkReal gconst26=x726;
IkReal gconst27=0;
IkReal x728 = new_r10*new_r10;
if(IKabs(x728)==0){
continue;
}
IkReal gconst28=(x725*(pow(x728,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x729=((-1.0)*new_r10);
CheckValue<IkReal> x731 = IKatan2WithCheck(IkReal(0),IkReal(x729),IKFAST_ATAN2_MAGTHRESH);
if(!x731.valid){
continue;
}
IkReal x730=((-1.0)*(x731.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x730;
new_r00=0;
IkReal gconst26=x730;
IkReal gconst27=0;
IkReal x732 = new_r10*new_r10;
if(IKabs(x732)==0){
continue;
}
IkReal gconst28=(x729*(pow(x732,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x733=((-1.0)*new_r10);
CheckValue<IkReal> x735 = IKatan2WithCheck(IkReal(0),IkReal(x733),IKFAST_ATAN2_MAGTHRESH);
if(!x735.valid){
continue;
}
IkReal x734=((-1.0)*(x735.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x734;
new_r00=0;
IkReal gconst26=x734;
IkReal gconst27=0;
IkReal x736 = new_r10*new_r10;
if(IKabs(x736)==0){
continue;
}
IkReal gconst28=(x733*(pow(x736,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x737=IKPowWithIntegerCheck(gconst28,-1);
if(!x737.valid){
continue;
}
CheckValue<IkReal> x738=IKPowWithIntegerCheck(new_r10,-1);
if(!x738.valid){
continue;
}
if( IKabs(((-1.0)*new_r11*(x737.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst28*(x738.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x737.value)))+IKsqr((gconst28*(x738.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r11*(x737.value)), (gconst28*(x738.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x739=IKsin(j7);
IkReal x740=IKcos(j7);
IkReal x741=(gconst28*x739);
IkReal x742=(gconst28*x740);
evalcond[0]=(new_r10*x739);
evalcond[1]=x741;
evalcond[2]=(x741+new_r11);
evalcond[3]=(x742+new_r01);
evalcond[4]=((((-1.0)*new_r10*x740))+gconst28);
evalcond[5]=((((-1.0)*x742))+new_r10);
evalcond[6]=((((-1.0)*new_r01*x739))+((new_r11*x740)));
evalcond[7]=(gconst28+((new_r01*x740))+((new_r11*x739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x743 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x743.valid){
continue;
}
CheckValue<IkReal> x744=IKPowWithIntegerCheck(IKsign(gconst28),-1);
if(!x744.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x743.value)+(((1.5707963267949)*(x744.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x745=IKsin(j7);
IkReal x746=IKcos(j7);
IkReal x747=(gconst28*x745);
IkReal x748=(gconst28*x746);
evalcond[0]=(new_r10*x745);
evalcond[1]=x747;
evalcond[2]=(x747+new_r11);
evalcond[3]=(x748+new_r01);
evalcond[4]=((((-1.0)*new_r10*x746))+gconst28);
evalcond[5]=((((-1.0)*x748))+new_r10);
evalcond[6]=(((new_r11*x746))+(((-1.0)*new_r01*x745)));
evalcond[7]=(gconst28+((new_r01*x746))+((new_r11*x745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x749 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x749.valid){
continue;
}
CheckValue<IkReal> x750=IKPowWithIntegerCheck(IKsign(gconst28),-1);
if(!x750.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x749.value)+(((1.5707963267949)*(x750.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x751=IKsin(j7);
IkReal x752=IKcos(j7);
IkReal x753=(gconst28*x751);
IkReal x754=(gconst28*x752);
evalcond[0]=(new_r10*x751);
evalcond[1]=x753;
evalcond[2]=(x753+new_r11);
evalcond[3]=(x754+new_r01);
evalcond[4]=(gconst28+(((-1.0)*new_r10*x752)));
evalcond[5]=((((-1.0)*x754))+new_r10);
evalcond[6]=(((new_r11*x752))+(((-1.0)*new_r01*x751)));
evalcond[7]=(gconst28+((new_r11*x751))+((new_r01*x752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x756 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x756.valid){
continue;
}
IkReal x755=((-1.0)*(x756.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x755;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst26=x755;
IkReal x757 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x757)==0){
continue;
}
IkReal gconst27=((-1.0)*new_r00*(pow(x757,-0.5)));
IkReal gconst28=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x759 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x759.valid){
continue;
}
IkReal x758=((-1.0)*(x759.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x758;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst26=x758;
IkReal x760 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x760)==0){
continue;
}
IkReal gconst27=((-1.0)*new_r00*(pow(x760,-0.5)));
IkReal gconst28=0;
j7eval[0]=new_r01;
j7eval[1]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x762 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x762.valid){
continue;
}
IkReal x761=((-1.0)*(x762.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst27;
cj9=gconst28;
j9=x761;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst26=x761;
IkReal x763 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x763)==0){
continue;
}
IkReal gconst27=((-1.0)*new_r00*(pow(x763,-0.5)));
IkReal gconst28=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x764=IKPowWithIntegerCheck(gconst27,-1);
if(!x764.valid){
continue;
}
CheckValue<IkReal> x765=IKPowWithIntegerCheck(new_r00,-1);
if(!x765.valid){
continue;
}
if( IKabs((new_r01*(x764.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst27*(x765.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01*(x764.value)))+IKsqr(((-1.0)*gconst27*(x765.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r01*(x764.value)), ((-1.0)*gconst27*(x765.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x766=IKcos(j7);
IkReal x767=IKsin(j7);
IkReal x768=(gconst27*x766);
IkReal x769=((1.0)*x767);
evalcond[0]=(new_r00*x767);
evalcond[1]=(new_r01*x766);
evalcond[2]=x768;
evalcond[3]=(gconst27*x767);
evalcond[4]=(gconst27+((new_r00*x766)));
evalcond[5]=(x768+new_r00);
evalcond[6]=(gconst27+(((-1.0)*new_r01*x769)));
evalcond[7]=((((-1.0)*gconst27*x769))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x770=IKPowWithIntegerCheck(new_r01,-1);
if(!x770.valid){
continue;
}
CheckValue<IkReal> x771=IKPowWithIntegerCheck(new_r00,-1);
if(!x771.valid){
continue;
}
if( IKabs((gconst27*(x770.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst27*(x771.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst27*(x770.value)))+IKsqr(((-1.0)*gconst27*(x771.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst27*(x770.value)), ((-1.0)*gconst27*(x771.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x772=IKcos(j7);
IkReal x773=IKsin(j7);
IkReal x774=(gconst27*x772);
IkReal x775=((1.0)*x773);
evalcond[0]=(new_r00*x773);
evalcond[1]=(new_r01*x772);
evalcond[2]=x774;
evalcond[3]=(gconst27*x773);
evalcond[4]=(gconst27+((new_r00*x772)));
evalcond[5]=(x774+new_r00);
evalcond[6]=((((-1.0)*new_r01*x775))+gconst27);
evalcond[7]=((((-1.0)*gconst27*x775))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x776=IKPowWithIntegerCheck(IKsign(gconst27),-1);
if(!x776.valid){
continue;
}
CheckValue<IkReal> x777 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x777.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x776.value)))+(x777.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x778=IKcos(j7);
IkReal x779=IKsin(j7);
IkReal x780=(gconst27*x778);
IkReal x781=((1.0)*x779);
evalcond[0]=(new_r00*x779);
evalcond[1]=(new_r01*x778);
evalcond[2]=x780;
evalcond[3]=(gconst27*x779);
evalcond[4]=(gconst27+((new_r00*x778)));
evalcond[5]=(x780+new_r00);
evalcond[6]=((((-1.0)*new_r01*x781))+gconst27);
evalcond[7]=((((-1.0)*gconst27*x781))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x782=((1.0)*gconst27);
CheckValue<IkReal> x783 = IKatan2WithCheck(IkReal((((gconst27*new_r00))+(((-1.0)*new_r11*x782)))),IkReal(((((-1.0)*new_r01*x782))+(((-1.0)*new_r10*x782)))),IKFAST_ATAN2_MAGTHRESH);
if(!x783.valid){
continue;
}
CheckValue<IkReal> x784=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x784.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x783.value)+(((1.5707963267949)*(x784.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x785=IKcos(j7);
IkReal x786=IKsin(j7);
IkReal x787=(gconst27*x785);
IkReal x788=(gconst28*x786);
IkReal x789=(gconst28*x785);
IkReal x790=((1.0)*x786);
IkReal x791=(x787+x788);
evalcond[0]=(((new_r10*x786))+gconst27+((new_r00*x785)));
evalcond[1]=(((new_r11*x786))+gconst28+((new_r01*x785)));
evalcond[2]=(x791+new_r00);
evalcond[3]=(x791+new_r11);
evalcond[4]=((((-1.0)*new_r01*x790))+((new_r11*x785))+gconst27);
evalcond[5]=(gconst28+((new_r00*x786))+(((-1.0)*new_r10*x785)));
evalcond[6]=((((-1.0)*gconst27*x790))+x789+new_r01);
evalcond[7]=(((gconst27*x786))+(((-1.0)*x789))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x792=((1.0)*gconst28);
CheckValue<IkReal> x793=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r01*x792))+((gconst27*new_r11)))),-1);
if(!x793.valid){
continue;
}
CheckValue<IkReal> x794 = IKatan2WithCheck(IkReal((((new_r00*new_r01))+(((-1.0)*gconst27*x792)))),IkReal(((gconst28*gconst28)+(((-1.0)*new_r00*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x794.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x793.value)))+(x794.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x795=IKcos(j7);
IkReal x796=IKsin(j7);
IkReal x797=(gconst27*x795);
IkReal x798=(gconst28*x796);
IkReal x799=(gconst28*x795);
IkReal x800=((1.0)*x796);
IkReal x801=(x797+x798);
evalcond[0]=(((new_r10*x796))+gconst27+((new_r00*x795)));
evalcond[1]=(((new_r11*x796))+gconst28+((new_r01*x795)));
evalcond[2]=(new_r00+x801);
evalcond[3]=(new_r11+x801);
evalcond[4]=((((-1.0)*new_r01*x800))+((new_r11*x795))+gconst27);
evalcond[5]=(gconst28+((new_r00*x796))+(((-1.0)*new_r10*x795)));
evalcond[6]=((((-1.0)*gconst27*x800))+x799+new_r01);
evalcond[7]=(((gconst27*x796))+(((-1.0)*x799))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x802=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x802.valid){
continue;
}
CheckValue<IkReal> x803 = IKatan2WithCheck(IkReal((((gconst27*new_r01))+(((-1.0)*gconst28*new_r00)))),IkReal((((gconst28*new_r10))+(((-1.0)*gconst27*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x803.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x802.value)))+(x803.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x804=IKcos(j7);
IkReal x805=IKsin(j7);
IkReal x806=(gconst27*x804);
IkReal x807=(gconst28*x805);
IkReal x808=(gconst28*x804);
IkReal x809=((1.0)*x805);
IkReal x810=(x807+x806);
evalcond[0]=(gconst27+((new_r00*x804))+((new_r10*x805)));
evalcond[1]=(gconst28+((new_r11*x805))+((new_r01*x804)));
evalcond[2]=(new_r00+x810);
evalcond[3]=(new_r11+x810);
evalcond[4]=((((-1.0)*new_r01*x809))+gconst27+((new_r11*x804)));
evalcond[5]=(gconst28+((new_r00*x805))+(((-1.0)*new_r10*x804)));
evalcond[6]=((((-1.0)*gconst27*x809))+new_r01+x808);
evalcond[7]=((((-1.0)*x808))+new_r10+((gconst27*x805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x813 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x813)==0){
continue;
}
IkReal x811=pow(x813,-0.5);
IkReal x812=((1.0)*x811);
CheckValue<IkReal> x814 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x814.valid){
continue;
}
IkReal gconst29=((3.14159265358979)+(((-1.0)*(x814.value))));
IkReal gconst30=(new_r00*x812);
IkReal gconst31=(new_r10*x812);
CheckValue<IkReal> x815 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x815.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x815.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x819 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x819.valid){
continue;
}
IkReal x816=((1.0)*(x819.value));
IkReal x817=x811;
IkReal x818=((1.0)*x817);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x816)));
IkReal gconst29=((3.14159265358979)+(((-1.0)*x816)));
IkReal gconst30=(new_r00*x818);
IkReal gconst31=(new_r10*x818);
IkReal x820=new_r10*new_r10;
IkReal x821=((1.0)*new_r10);
IkReal x822=(new_r00*new_r11);
IkReal x823=((((-1.0)*new_r01*x821))+x822);
IkReal x824=x811;
IkReal x825=(new_r00*x824);
j7eval[0]=x823;
j7eval[1]=((IKabs((((x820*x824))+(((-1.0)*x822*x824)))))+(IKabs((((new_r01*x825))+(((-1.0)*x821*x825))))));
j7eval[2]=IKsign(x823);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x829 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x829.valid){
continue;
}
IkReal x826=((1.0)*(x829.value));
IkReal x827=x811;
IkReal x828=((1.0)*x827);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x826)));
IkReal gconst29=((3.14159265358979)+(((-1.0)*x826)));
IkReal gconst30=(new_r00*x828);
IkReal gconst31=(new_r10*x828);
IkReal x830=new_r10*new_r10;
IkReal x831=new_r00*new_r00*new_r00;
CheckValue<IkReal> x835=IKPowWithIntegerCheck((x830+(new_r00*new_r00)),-1);
if(!x835.valid){
continue;
}
IkReal x832=x835.value;
IkReal x833=((1.0)*x832);
IkReal x834=(x830*x832);
j7eval[0]=((IKabs((((new_r01*x831*x832))+((new_r00*new_r01*x834))+(((-1.0)*new_r00*new_r10*x833)))))+(IKabs(((((-1.0)*new_r11*x831*x833))+(((-1.0)*new_r00*new_r11*x830*x833))+x834))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x839 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x839.valid){
continue;
}
IkReal x836=((1.0)*(x839.value));
IkReal x837=x811;
IkReal x838=((1.0)*x837);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x836)));
IkReal gconst29=((3.14159265358979)+(((-1.0)*x836)));
IkReal gconst30=(new_r00*x838);
IkReal gconst31=(new_r10*x838);
IkReal x840=new_r00*new_r00;
IkReal x841=(new_r00*new_r01);
IkReal x842=(((new_r10*new_r11))+x841);
IkReal x843=x811;
IkReal x844=((1.0)*x843);
j7eval[0]=x842;
j7eval[1]=((IKabs(((((-1.0)*new_r00*new_r11*x844))+((x840*x843)))))+(IKabs(((((-1.0)*x841*x844))+(((-1.0)*new_r00*new_r10*x844))))));
j7eval[2]=IKsign(x842);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x846 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x846.valid){
continue;
}
IkReal x845=((1.0)*(x846.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x845)));
new_r11=0;
new_r00=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x845)));
IkReal gconst30=0;
IkReal x847 = new_r10*new_r10;
if(IKabs(x847)==0){
continue;
}
IkReal gconst31=((1.0)*new_r10*(pow(x847,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x848=IKPowWithIntegerCheck(gconst31,-1);
if(!x848.valid){
continue;
}
cj7array[0]=(new_r10*(x848.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x849=IKsin(j7);
IkReal x850=IKcos(j7);
evalcond[0]=(new_r10*x849);
evalcond[1]=(gconst31*x849);
evalcond[2]=((-1.0)*new_r01*x849);
evalcond[3]=(gconst31+((new_r01*x850)));
evalcond[4]=(new_r01+((gconst31*x850)));
evalcond[5]=(gconst31+(((-1.0)*new_r10*x850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x851=IKPowWithIntegerCheck(new_r10,-1);
if(!x851.valid){
continue;
}
cj7array[0]=(gconst31*(x851.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x852=IKsin(j7);
IkReal x853=IKcos(j7);
IkReal x854=(gconst31*x853);
evalcond[0]=(new_r10*x852);
evalcond[1]=(gconst31*x852);
evalcond[2]=((-1.0)*new_r01*x852);
evalcond[3]=(gconst31+((new_r01*x853)));
evalcond[4]=(new_r01+x854);
evalcond[5]=((((-1.0)*x854))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
evalcond[1]=gconst30;
evalcond[2]=gconst31;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x856 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x856.valid){
continue;
}
IkReal x855=((1.0)*(x856.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x855)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x855)));
IkReal gconst30=((1.0)*new_r00);
IkReal gconst31=((1.0)*new_r10);
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[4];
CheckValue<IkReal> x858 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x858.valid){
continue;
}
IkReal x857=((1.0)*(x858.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x857)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x857)));
IkReal gconst30=((1.0)*new_r00);
IkReal gconst31=((1.0)*new_r10);
j7eval[0]=-1.0;
j7eval[1]=new_r10;
j7eval[2]=1.0;
j7eval[3]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x860 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x860.valid){
continue;
}
IkReal x859=((1.0)*(x860.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x859)));
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x859)));
IkReal gconst30=((1.0)*new_r00);
IkReal gconst31=((1.0)*new_r10);
j7eval[0]=-1.0;
j7eval[1]=((IKabs(((1.0)+(((-1.0)*(new_r10*new_r10))))))+(IKabs(((1.0)*new_r00*new_r10))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x861=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst31*gconst31)))+(((-1.0)*(gconst30*gconst30))))),-1);
if(!x861.valid){
continue;
}
CheckValue<IkReal> x862 = IKatan2WithCheck(IkReal((gconst31*new_r00)),IkReal((gconst30*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x862.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x861.value)))+(x862.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x863=IKcos(j7);
IkReal x864=IKsin(j7);
IkReal x865=(gconst31*x864);
IkReal x866=(gconst30*x863);
IkReal x867=(gconst31*x863);
IkReal x868=(gconst30*x864);
IkReal x869=(x866+x865);
evalcond[0]=x869;
evalcond[1]=(((new_r00*x863))+gconst30+((new_r10*x864)));
evalcond[2]=(new_r00+x869);
evalcond[3]=((((-1.0)*x868))+x867);
evalcond[4]=(((new_r00*x864))+(((-1.0)*new_r10*x863))+gconst31);
evalcond[5]=((((-1.0)*x867))+new_r10+x868);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x870 = IKatan2WithCheck(IkReal((gconst30*gconst31)),IkReal(((-1.0)*(gconst31*gconst31))),IKFAST_ATAN2_MAGTHRESH);
if(!x870.valid){
continue;
}
CheckValue<IkReal> x871=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*new_r10))+(((-1.0)*gconst30*new_r00)))),-1);
if(!x871.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x870.value)+(((1.5707963267949)*(x871.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x872=IKcos(j7);
IkReal x873=IKsin(j7);
IkReal x874=(gconst31*x873);
IkReal x875=(gconst30*x872);
IkReal x876=(gconst31*x872);
IkReal x877=(gconst30*x873);
IkReal x878=(x874+x875);
evalcond[0]=x878;
evalcond[1]=(((new_r00*x872))+gconst30+((new_r10*x873)));
evalcond[2]=(new_r00+x878);
evalcond[3]=((((-1.0)*x877))+x876);
evalcond[4]=(((new_r00*x873))+gconst31+(((-1.0)*new_r10*x872)));
evalcond[5]=((((-1.0)*x876))+new_r10+x877);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x879 = IKatan2WithCheck(IkReal((gconst30*gconst31)),IkReal(gconst30*gconst30),IKFAST_ATAN2_MAGTHRESH);
if(!x879.valid){
continue;
}
CheckValue<IkReal> x880=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst31*new_r10))+(((-1.0)*gconst30*new_r00)))),-1);
if(!x880.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x879.value)+(((1.5707963267949)*(x880.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x881=IKcos(j7);
IkReal x882=IKsin(j7);
IkReal x883=(gconst31*x882);
IkReal x884=(gconst30*x881);
IkReal x885=(gconst31*x881);
IkReal x886=(gconst30*x882);
IkReal x887=(x884+x883);
evalcond[0]=x887;
evalcond[1]=(((new_r10*x882))+((new_r00*x881))+gconst30);
evalcond[2]=(new_r00+x887);
evalcond[3]=((((-1.0)*x886))+x885);
evalcond[4]=((((-1.0)*new_r10*x881))+((new_r00*x882))+gconst31);
evalcond[5]=((((-1.0)*x885))+new_r10+x886);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x889 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x889.valid){
continue;
}
IkReal x888=((1.0)*(x889.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x888)));
new_r01=0;
new_r10=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x888)));
IkReal x890 = new_r00*new_r00;
if(IKabs(x890)==0){
continue;
}
IkReal gconst30=((1.0)*new_r00*(pow(x890,-0.5)));
IkReal gconst31=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x892 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x892.valid){
continue;
}
IkReal x891=((1.0)*(x892.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x891)));
new_r01=0;
new_r10=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x891)));
IkReal x893 = new_r00*new_r00;
if(IKabs(x893)==0){
continue;
}
IkReal gconst30=((1.0)*new_r00*(pow(x893,-0.5)));
IkReal gconst31=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x894=IKPowWithIntegerCheck(gconst30,-1);
if(!x894.valid){
continue;
}
cj7array[0]=((-1.0)*new_r00*(x894.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x895=IKsin(j7);
IkReal x896=IKcos(j7);
evalcond[0]=(new_r00*x895);
evalcond[1]=(new_r11*x895);
evalcond[2]=((-1.0)*gconst30*x895);
evalcond[3]=(((new_r11*x896))+gconst30);
evalcond[4]=(((new_r00*x896))+gconst30);
evalcond[5]=(((gconst30*x896))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x897=IKPowWithIntegerCheck(new_r00,-1);
if(!x897.valid){
continue;
}
cj7array[0]=((-1.0)*gconst30*(x897.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x898=IKsin(j7);
IkReal x899=IKcos(j7);
IkReal x900=(gconst30*x899);
evalcond[0]=(new_r00*x898);
evalcond[1]=(new_r11*x898);
evalcond[2]=((-1.0)*gconst30*x898);
evalcond[3]=(((new_r11*x899))+gconst30);
evalcond[4]=(new_r00+x900);
evalcond[5]=(new_r11+x900);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x901=IKPowWithIntegerCheck(new_r11,-1);
if(!x901.valid){
continue;
}
cj7array[0]=((-1.0)*gconst30*(x901.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x902=IKsin(j7);
IkReal x903=IKcos(j7);
IkReal x904=(gconst30*x903);
evalcond[0]=(new_r00*x902);
evalcond[1]=(new_r11*x902);
evalcond[2]=((-1.0)*gconst30*x902);
evalcond[3]=(gconst30+((new_r00*x903)));
evalcond[4]=(new_r00+x904);
evalcond[5]=(new_r11+x904);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r00);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x906 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x906.valid){
continue;
}
IkReal x905=((1.0)*(x906.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x905)));
new_r00=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x905)));
IkReal gconst30=0;
IkReal x907 = new_r10*new_r10;
if(IKabs(x907)==0){
continue;
}
IkReal gconst31=((1.0)*new_r10*(pow(x907,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x909 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x909.valid){
continue;
}
IkReal x908=((1.0)*(x909.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x908)));
new_r00=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x908)));
IkReal gconst30=0;
IkReal x910 = new_r10*new_r10;
if(IKabs(x910)==0){
continue;
}
IkReal gconst31=((1.0)*new_r10*(pow(x910,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x912 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x912.valid){
continue;
}
IkReal x911=((1.0)*(x912.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x911)));
new_r00=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x911)));
IkReal gconst30=0;
IkReal x913 = new_r10*new_r10;
if(IKabs(x913)==0){
continue;
}
IkReal gconst31=((1.0)*new_r10*(pow(x913,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x914=IKPowWithIntegerCheck(gconst31,-1);
if(!x914.valid){
continue;
}
CheckValue<IkReal> x915=IKPowWithIntegerCheck(new_r10,-1);
if(!x915.valid){
continue;
}
if( IKabs(((-1.0)*new_r11*(x914.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst31*(x915.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11*(x914.value)))+IKsqr((gconst31*(x915.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r11*(x914.value)), (gconst31*(x915.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x916=IKsin(j7);
IkReal x917=IKcos(j7);
IkReal x918=(gconst31*x916);
IkReal x919=(gconst31*x917);
evalcond[0]=(new_r10*x916);
evalcond[1]=x918;
evalcond[2]=(new_r11+x918);
evalcond[3]=(new_r01+x919);
evalcond[4]=(gconst31+(((-1.0)*new_r10*x917)));
evalcond[5]=((((-1.0)*x919))+new_r10);
evalcond[6]=(((new_r11*x917))+(((-1.0)*new_r01*x916)));
evalcond[7]=(gconst31+((new_r11*x916))+((new_r01*x917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x920=IKPowWithIntegerCheck(IKsign(gconst31),-1);
if(!x920.valid){
continue;
}
CheckValue<IkReal> x921 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x921.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x920.value)))+(x921.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x922=IKsin(j7);
IkReal x923=IKcos(j7);
IkReal x924=(gconst31*x922);
IkReal x925=(gconst31*x923);
evalcond[0]=(new_r10*x922);
evalcond[1]=x924;
evalcond[2]=(new_r11+x924);
evalcond[3]=(new_r01+x925);
evalcond[4]=(gconst31+(((-1.0)*new_r10*x923)));
evalcond[5]=((((-1.0)*x925))+new_r10);
evalcond[6]=((((-1.0)*new_r01*x922))+((new_r11*x923)));
evalcond[7]=(gconst31+((new_r01*x923))+((new_r11*x922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x926=IKPowWithIntegerCheck(IKsign(gconst31),-1);
if(!x926.valid){
continue;
}
CheckValue<IkReal> x927 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x927.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x926.value)))+(x927.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x928=IKsin(j7);
IkReal x929=IKcos(j7);
IkReal x930=(gconst31*x928);
IkReal x931=(gconst31*x929);
evalcond[0]=(new_r10*x928);
evalcond[1]=x930;
evalcond[2]=(new_r11+x930);
evalcond[3]=(new_r01+x931);
evalcond[4]=(gconst31+(((-1.0)*new_r10*x929)));
evalcond[5]=((((-1.0)*x931))+new_r10);
evalcond[6]=((((-1.0)*new_r01*x928))+((new_r11*x929)));
evalcond[7]=(gconst31+((new_r01*x929))+((new_r11*x928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x933 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x933.valid){
continue;
}
IkReal x932=((1.0)*(x933.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x932)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x932)));
IkReal x934 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x934)==0){
continue;
}
IkReal gconst30=((1.0)*new_r00*(pow(x934,-0.5)));
IkReal gconst31=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x936 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x936.valid){
continue;
}
IkReal x935=((1.0)*(x936.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x935)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x935)));
IkReal x937 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x937)==0){
continue;
}
IkReal gconst30=((1.0)*new_r00*(pow(x937,-0.5)));
IkReal gconst31=0;
j7eval[0]=new_r01;
j7eval[1]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x939 = IKatan2WithCheck(IkReal(new_r00),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x939.valid){
continue;
}
IkReal x938=((1.0)*(x939.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst30;
cj9=gconst31;
j9=((3.14159265)+(((-1.0)*x938)));
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst29=((3.14159265358979)+(((-1.0)*x938)));
IkReal x940 = ((1.0)+(((-1.0)*(new_r01*new_r01))));
if(IKabs(x940)==0){
continue;
}
IkReal gconst30=((1.0)*new_r00*(pow(x940,-0.5)));
IkReal gconst31=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x941=IKPowWithIntegerCheck(gconst30,-1);
if(!x941.valid){
continue;
}
CheckValue<IkReal> x942=IKPowWithIntegerCheck(new_r00,-1);
if(!x942.valid){
continue;
}
if( IKabs((new_r01*(x941.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst30*(x942.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01*(x941.value)))+IKsqr(((-1.0)*gconst30*(x942.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r01*(x941.value)), ((-1.0)*gconst30*(x942.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x943=IKcos(j7);
IkReal x944=IKsin(j7);
IkReal x945=(gconst30*x943);
IkReal x946=((1.0)*x944);
evalcond[0]=(new_r00*x944);
evalcond[1]=(new_r01*x943);
evalcond[2]=x945;
evalcond[3]=(gconst30*x944);
evalcond[4]=(((new_r00*x943))+gconst30);
evalcond[5]=(new_r00+x945);
evalcond[6]=(gconst30+(((-1.0)*new_r01*x946)));
evalcond[7]=(new_r01+(((-1.0)*gconst30*x946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x947=IKPowWithIntegerCheck(new_r01,-1);
if(!x947.valid){
continue;
}
CheckValue<IkReal> x948=IKPowWithIntegerCheck(new_r00,-1);
if(!x948.valid){
continue;
}
if( IKabs((gconst30*(x947.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst30*(x948.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst30*(x947.value)))+IKsqr(((-1.0)*gconst30*(x948.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst30*(x947.value)), ((-1.0)*gconst30*(x948.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x949=IKcos(j7);
IkReal x950=IKsin(j7);
IkReal x951=(gconst30*x949);
IkReal x952=((1.0)*x950);
evalcond[0]=(new_r00*x950);
evalcond[1]=(new_r01*x949);
evalcond[2]=x951;
evalcond[3]=(gconst30*x950);
evalcond[4]=(((new_r00*x949))+gconst30);
evalcond[5]=(new_r00+x951);
evalcond[6]=(gconst30+(((-1.0)*new_r01*x952)));
evalcond[7]=((((-1.0)*gconst30*x952))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x953=IKPowWithIntegerCheck(IKsign(gconst30),-1);
if(!x953.valid){
continue;
}
CheckValue<IkReal> x954 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x954.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x953.value)))+(x954.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x955=IKcos(j7);
IkReal x956=IKsin(j7);
IkReal x957=(gconst30*x955);
IkReal x958=((1.0)*x956);
evalcond[0]=(new_r00*x956);
evalcond[1]=(new_r01*x955);
evalcond[2]=x957;
evalcond[3]=(gconst30*x956);
evalcond[4]=(((new_r00*x955))+gconst30);
evalcond[5]=(new_r00+x957);
evalcond[6]=(gconst30+(((-1.0)*new_r01*x958)));
evalcond[7]=((((-1.0)*gconst30*x958))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x959=((1.0)*gconst30);
CheckValue<IkReal> x960=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x960.valid){
continue;
}
CheckValue<IkReal> x961 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x959))+((gconst30*new_r00)))),IkReal(((((-1.0)*new_r01*x959))+(((-1.0)*new_r10*x959)))),IKFAST_ATAN2_MAGTHRESH);
if(!x961.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x960.value)))+(x961.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x962=IKcos(j7);
IkReal x963=IKsin(j7);
IkReal x964=(gconst31*x963);
IkReal x965=(gconst30*x962);
IkReal x966=((1.0)*x963);
IkReal x967=(gconst31*x962);
IkReal x968=(x964+x965);
evalcond[0]=(((new_r00*x962))+gconst30+((new_r10*x963)));
evalcond[1]=(((new_r11*x963))+((new_r01*x962))+gconst31);
evalcond[2]=(new_r00+x968);
evalcond[3]=(new_r11+x968);
evalcond[4]=(((new_r11*x962))+gconst30+(((-1.0)*new_r01*x966)));
evalcond[5]=(((new_r00*x963))+gconst31+(((-1.0)*new_r10*x962)));
evalcond[6]=((((-1.0)*gconst30*x966))+new_r01+x967);
evalcond[7]=(((gconst30*x963))+(((-1.0)*x967))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x969=((1.0)*gconst31);
CheckValue<IkReal> x970 = IKatan2WithCheck(IkReal(((((-1.0)*gconst30*x969))+((new_r00*new_r01)))),IkReal(((gconst31*gconst31)+(((-1.0)*new_r00*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x970.valid){
continue;
}
CheckValue<IkReal> x971=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r01*x969))+((gconst30*new_r11)))),-1);
if(!x971.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x970.value)+(((1.5707963267949)*(x971.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x972=IKcos(j7);
IkReal x973=IKsin(j7);
IkReal x974=(gconst31*x973);
IkReal x975=(gconst30*x972);
IkReal x976=((1.0)*x973);
IkReal x977=(gconst31*x972);
IkReal x978=(x975+x974);
evalcond[0]=(gconst30+((new_r10*x973))+((new_r00*x972)));
evalcond[1]=(((new_r01*x972))+gconst31+((new_r11*x973)));
evalcond[2]=(new_r00+x978);
evalcond[3]=(new_r11+x978);
evalcond[4]=(gconst30+(((-1.0)*new_r01*x976))+((new_r11*x972)));
evalcond[5]=(gconst31+(((-1.0)*new_r10*x972))+((new_r00*x973)));
evalcond[6]=((((-1.0)*gconst30*x976))+new_r01+x977);
evalcond[7]=((((-1.0)*x977))+((gconst30*x973))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x979=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x979.valid){
continue;
}
CheckValue<IkReal> x980 = IKatan2WithCheck(IkReal(((((-1.0)*gconst31*new_r00))+((gconst30*new_r01)))),IkReal(((((-1.0)*gconst30*new_r11))+((gconst31*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x980.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x979.value)))+(x980.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x981=IKcos(j7);
IkReal x982=IKsin(j7);
IkReal x983=(gconst31*x982);
IkReal x984=(gconst30*x981);
IkReal x985=((1.0)*x982);
IkReal x986=(gconst31*x981);
IkReal x987=(x984+x983);
evalcond[0]=(((new_r00*x981))+gconst30+((new_r10*x982)));
evalcond[1]=(gconst31+((new_r11*x982))+((new_r01*x981)));
evalcond[2]=(new_r00+x987);
evalcond[3]=(new_r11+x987);
evalcond[4]=(gconst30+(((-1.0)*new_r01*x985))+((new_r11*x981)));
evalcond[5]=(((new_r00*x982))+gconst31+(((-1.0)*new_r10*x981)));
evalcond[6]=((((-1.0)*gconst30*x985))+new_r01+x986);
evalcond[7]=((((-1.0)*x986))+((gconst30*x982))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x988=((-1.0)*new_r11);
IkReal x990 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x990)==0){
continue;
}
IkReal x989=pow(x990,-0.5);
CheckValue<IkReal> x991 = IKatan2WithCheck(IkReal(new_r01),IkReal(x988),IKFAST_ATAN2_MAGTHRESH);
if(!x991.valid){
continue;
}
IkReal gconst32=((-1.0)*(x991.value));
IkReal gconst33=((-1.0)*new_r01*x989);
IkReal gconst34=(x988*x989);
CheckValue<IkReal> x992 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x992.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x992.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x993=((-1.0)*new_r11);
CheckValue<IkReal> x996 = IKatan2WithCheck(IkReal(new_r01),IkReal(x993),IKFAST_ATAN2_MAGTHRESH);
if(!x996.valid){
continue;
}
IkReal x994=((-1.0)*(x996.value));
IkReal x995=x989;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x994;
IkReal gconst32=x994;
IkReal gconst33=((-1.0)*new_r01*x995);
IkReal gconst34=(x993*x995);
IkReal x997=new_r01*new_r01;
IkReal x998=((1.0)*new_r10);
IkReal x999=((((-1.0)*new_r01*x998))+((new_r00*new_r11)));
IkReal x1000=x989;
IkReal x1001=(new_r11*x1000);
j7eval[0]=x999;
j7eval[1]=((IKabs(((((-1.0)*x1000*x997))+((new_r00*x1001)))))+(IKabs(((((-1.0)*x1001*x998))+((new_r01*x1001))))));
j7eval[2]=IKsign(x999);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1002=((-1.0)*new_r11);
CheckValue<IkReal> x1005 = IKatan2WithCheck(IkReal(new_r01),IkReal(x1002),IKFAST_ATAN2_MAGTHRESH);
if(!x1005.valid){
continue;
}
IkReal x1003=((-1.0)*(x1005.value));
IkReal x1004=x989;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1003;
IkReal gconst32=x1003;
IkReal gconst33=((-1.0)*new_r01*x1004);
IkReal gconst34=(x1002*x1004);
IkReal x1006=new_r01*new_r01;
IkReal x1007=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x1008=x989;
IkReal x1009=(new_r01*x1008);
j7eval[0]=x1007;
j7eval[1]=((IKabs(((((-1.0)*new_r00*x1009))+((new_r11*x1009)))))+(IKabs((((new_r10*x1009))+((x1006*x1008))))));
j7eval[2]=IKsign(x1007);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1010=((-1.0)*new_r11);
CheckValue<IkReal> x1013 = IKatan2WithCheck(IkReal(new_r01),IkReal(x1010),IKFAST_ATAN2_MAGTHRESH);
if(!x1013.valid){
continue;
}
IkReal x1011=((-1.0)*(x1013.value));
IkReal x1012=x989;
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1011;
IkReal gconst32=x1011;
IkReal gconst33=((-1.0)*new_r01*x1012);
IkReal gconst34=(x1010*x1012);
IkReal x1014=new_r01*new_r01;
CheckValue<IkReal> x1016=IKPowWithIntegerCheck((x1014+(new_r11*new_r11)),-1);
if(!x1016.valid){
continue;
}
IkReal x1015=x1016.value;
j7eval[0]=((IKabs((((new_r01*new_r11*x1015))+(((-1.0)*new_r00*new_r10)))))+(IKabs(((((-1.0)*x1014*x1015))+(new_r00*new_r00)))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst34;
evalcond[2]=gconst33;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1017=((-1.0)*new_r11);
CheckValue<IkReal> x1019 = IKatan2WithCheck(IkReal(new_r01),IkReal(x1017),IKFAST_ATAN2_MAGTHRESH);
if(!x1019.valid){
continue;
}
IkReal x1018=((-1.0)*(x1019.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1018;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst32=x1018;
IkReal gconst33=((-1.0)*new_r01);
IkReal gconst34=x1017;
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1020=((-1.0)*new_r11);
CheckValue<IkReal> x1022 = IKatan2WithCheck(IkReal(new_r01),IkReal(x1020),IKFAST_ATAN2_MAGTHRESH);
if(!x1022.valid){
continue;
}
IkReal x1021=((-1.0)*(x1022.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1021;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst32=x1021;
IkReal gconst33=((-1.0)*new_r01);
IkReal gconst34=x1020;
j7eval[0]=1.0;
j7eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1023=((-1.0)*new_r11);
CheckValue<IkReal> x1025 = IKatan2WithCheck(IkReal(new_r01),IkReal(x1023),IKFAST_ATAN2_MAGTHRESH);
if(!x1025.valid){
continue;
}
IkReal x1024=((-1.0)*(x1025.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1024;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst32=x1024;
IkReal gconst33=((-1.0)*new_r01);
IkReal gconst34=x1023;
j7eval[0]=1.0;
j7eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1026=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst33*new_r01))+(((-1.0)*gconst34*new_r11)))),-1);
if(!x1026.valid){
continue;
}
CheckValue<IkReal> x1027 = IKatan2WithCheck(IkReal(gconst34*gconst34),IkReal((gconst33*gconst34)),IKFAST_ATAN2_MAGTHRESH);
if(!x1027.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1026.value)))+(x1027.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1028=IKcos(j7);
IkReal x1029=IKsin(j7);
IkReal x1030=(gconst33*x1028);
IkReal x1031=(gconst34*x1029);
IkReal x1032=((1.0)*x1029);
IkReal x1033=(gconst34*x1028);
IkReal x1034=(x1030+x1031);
evalcond[0]=x1034;
evalcond[1]=(((new_r11*x1029))+gconst34+((new_r01*x1028)));
evalcond[2]=(x1034+new_r11);
evalcond[3]=((((-1.0)*x1033))+((gconst33*x1029)));
evalcond[4]=(((new_r11*x1028))+gconst33+(((-1.0)*new_r01*x1032)));
evalcond[5]=(x1033+(((-1.0)*gconst33*x1032))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1035 = IKatan2WithCheck(IkReal((gconst33*new_r01)),IkReal(((-1.0)*gconst34*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1035.valid){
continue;
}
CheckValue<IkReal> x1036=IKPowWithIntegerCheck(IKsign(((gconst34*gconst34)+(gconst33*gconst33))),-1);
if(!x1036.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1035.value)+(((1.5707963267949)*(x1036.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1037=IKcos(j7);
IkReal x1038=IKsin(j7);
IkReal x1039=(gconst33*x1037);
IkReal x1040=(gconst34*x1038);
IkReal x1041=((1.0)*x1038);
IkReal x1042=(gconst34*x1037);
IkReal x1043=(x1040+x1039);
evalcond[0]=x1043;
evalcond[1]=(gconst34+((new_r11*x1038))+((new_r01*x1037)));
evalcond[2]=(x1043+new_r11);
evalcond[3]=((((-1.0)*x1042))+((gconst33*x1038)));
evalcond[4]=(gconst33+((new_r11*x1037))+(((-1.0)*new_r01*x1041)));
evalcond[5]=(x1042+(((-1.0)*gconst33*x1041))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(IKsign((((gconst33*new_r01))+((gconst34*new_r11)))),-1);
if(!x1044.valid){
continue;
}
CheckValue<IkReal> x1045 = IKatan2WithCheck(IkReal(gconst33*gconst33),IkReal(((-1.0)*gconst33*gconst34)),IKFAST_ATAN2_MAGTHRESH);
if(!x1045.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1044.value)))+(x1045.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1046=IKcos(j7);
IkReal x1047=IKsin(j7);
IkReal x1048=(gconst33*x1046);
IkReal x1049=(gconst34*x1047);
IkReal x1050=((1.0)*x1047);
IkReal x1051=(gconst34*x1046);
IkReal x1052=(x1049+x1048);
evalcond[0]=x1052;
evalcond[1]=(gconst34+((new_r11*x1047))+((new_r01*x1046)));
evalcond[2]=(x1052+new_r11);
evalcond[3]=(((gconst33*x1047))+(((-1.0)*x1051)));
evalcond[4]=(gconst33+(((-1.0)*new_r01*x1050))+((new_r11*x1046)));
evalcond[5]=((((-1.0)*gconst33*x1050))+x1051+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x1053=((-1.0)*new_r11);
CheckValue<IkReal> x1055 = IKatan2WithCheck(IkReal(0),IkReal(x1053),IKFAST_ATAN2_MAGTHRESH);
if(!x1055.valid){
continue;
}
IkReal x1054=((-1.0)*(x1055.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1054;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst32=x1054;
IkReal gconst33=0;
IkReal x1056 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1056)==0){
continue;
}
IkReal gconst34=(x1053*(pow(x1056,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1057=((-1.0)*new_r11);
CheckValue<IkReal> x1059 = IKatan2WithCheck(IkReal(0),IkReal(x1057),IKFAST_ATAN2_MAGTHRESH);
if(!x1059.valid){
continue;
}
IkReal x1058=((-1.0)*(x1059.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1058;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst32=x1058;
IkReal gconst33=0;
IkReal x1060 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1060)==0){
continue;
}
IkReal gconst34=(x1057*(pow(x1060,-0.5)));
j7eval[0]=new_r11;
j7eval[1]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1061=((-1.0)*new_r11);
CheckValue<IkReal> x1063 = IKatan2WithCheck(IkReal(0),IkReal(x1061),IKFAST_ATAN2_MAGTHRESH);
if(!x1063.valid){
continue;
}
IkReal x1062=((-1.0)*(x1063.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1062;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst32=x1062;
IkReal gconst33=0;
IkReal x1064 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1064)==0){
continue;
}
IkReal gconst34=(x1061*(pow(x1064,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1065=IKPowWithIntegerCheck(new_r11,-1);
if(!x1065.valid){
continue;
}
CheckValue<IkReal> x1066=IKPowWithIntegerCheck(gconst34,-1);
if(!x1066.valid){
continue;
}
if( IKabs(((-1.0)*gconst34*(x1065.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x1066.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst34*(x1065.value)))+IKsqr((new_r10*(x1066.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst34*(x1065.value)), (new_r10*(x1066.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1067=IKsin(j7);
IkReal x1068=IKcos(j7);
IkReal x1069=(gconst34*x1067);
IkReal x1070=((1.0)*x1068);
evalcond[0]=(new_r11*x1068);
evalcond[1]=(new_r10*x1067);
evalcond[2]=x1069;
evalcond[3]=(gconst34*x1068);
evalcond[4]=(gconst34+((new_r11*x1067)));
evalcond[5]=(x1069+new_r11);
evalcond[6]=(gconst34+(((-1.0)*new_r10*x1070)));
evalcond[7]=((((-1.0)*gconst34*x1070))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1071=IKPowWithIntegerCheck(new_r11,-1);
if(!x1071.valid){
continue;
}
CheckValue<IkReal> x1072=IKPowWithIntegerCheck(new_r10,-1);
if(!x1072.valid){
continue;
}
if( IKabs(((-1.0)*gconst34*(x1071.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst34*(x1072.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst34*(x1071.value)))+IKsqr((gconst34*(x1072.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst34*(x1071.value)), (gconst34*(x1072.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1073=IKsin(j7);
IkReal x1074=IKcos(j7);
IkReal x1075=(gconst34*x1073);
IkReal x1076=((1.0)*x1074);
evalcond[0]=(new_r11*x1074);
evalcond[1]=(new_r10*x1073);
evalcond[2]=x1075;
evalcond[3]=(gconst34*x1074);
evalcond[4]=(gconst34+((new_r11*x1073)));
evalcond[5]=(x1075+new_r11);
evalcond[6]=(gconst34+(((-1.0)*new_r10*x1076)));
evalcond[7]=((((-1.0)*gconst34*x1076))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1077 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1077.valid){
continue;
}
CheckValue<IkReal> x1078=IKPowWithIntegerCheck(IKsign(gconst34),-1);
if(!x1078.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1077.value)+(((1.5707963267949)*(x1078.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1079=IKsin(j7);
IkReal x1080=IKcos(j7);
IkReal x1081=(gconst34*x1079);
IkReal x1082=((1.0)*x1080);
evalcond[0]=(new_r11*x1080);
evalcond[1]=(new_r10*x1079);
evalcond[2]=x1081;
evalcond[3]=(gconst34*x1080);
evalcond[4]=(gconst34+((new_r11*x1079)));
evalcond[5]=(x1081+new_r11);
evalcond[6]=((((-1.0)*new_r10*x1082))+gconst34);
evalcond[7]=((((-1.0)*gconst34*x1082))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1084 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1084.valid){
continue;
}
IkReal x1083=((-1.0)*(x1084.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1083;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst32=x1083;
IkReal x1085 = new_r01*new_r01;
if(IKabs(x1085)==0){
continue;
}
IkReal gconst33=((-1.0)*new_r01*(pow(x1085,-0.5)));
IkReal gconst34=0;
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x1087 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1087.valid){
continue;
}
IkReal x1086=((-1.0)*(x1087.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1086;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst32=x1086;
IkReal x1088 = new_r01*new_r01;
if(IKabs(x1088)==0){
continue;
}
IkReal gconst33=((-1.0)*new_r01*(pow(x1088,-0.5)));
IkReal gconst34=0;
j7eval[0]=new_r01;
j7eval[1]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1090 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1090.valid){
continue;
}
IkReal x1089=((-1.0)*(x1090.value));
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst33;
cj9=gconst34;
j9=x1089;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst32=x1089;
IkReal x1091 = new_r01*new_r01;
if(IKabs(x1091)==0){
continue;
}
IkReal gconst33=((-1.0)*new_r01*(pow(x1091,-0.5)));
IkReal gconst34=0;
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1092=IKPowWithIntegerCheck(gconst33,-1);
if(!x1092.valid){
continue;
}
CheckValue<IkReal> x1093=IKPowWithIntegerCheck(new_r00,-1);
if(!x1093.valid){
continue;
}
if( IKabs((new_r01*(x1092.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst33*(x1093.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r01*(x1092.value)))+IKsqr(((-1.0)*gconst33*(x1093.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r01*(x1092.value)), ((-1.0)*gconst33*(x1093.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1094=IKcos(j7);
IkReal x1095=IKsin(j7);
IkReal x1096=(gconst33*x1094);
IkReal x1097=((1.0)*x1095);
evalcond[0]=(new_r00*x1095);
evalcond[1]=(new_r01*x1094);
evalcond[2]=x1096;
evalcond[3]=(gconst33*x1095);
evalcond[4]=(((new_r00*x1094))+gconst33);
evalcond[5]=(x1096+new_r00);
evalcond[6]=(gconst33+(((-1.0)*new_r01*x1097)));
evalcond[7]=((((-1.0)*gconst33*x1097))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1098=IKPowWithIntegerCheck(new_r01,-1);
if(!x1098.valid){
continue;
}
CheckValue<IkReal> x1099=IKPowWithIntegerCheck(new_r00,-1);
if(!x1099.valid){
continue;
}
if( IKabs((gconst33*(x1098.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst33*(x1099.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst33*(x1098.value)))+IKsqr(((-1.0)*gconst33*(x1099.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst33*(x1098.value)), ((-1.0)*gconst33*(x1099.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1100=IKcos(j7);
IkReal x1101=IKsin(j7);
IkReal x1102=(gconst33*x1100);
IkReal x1103=((1.0)*x1101);
evalcond[0]=(new_r00*x1101);
evalcond[1]=(new_r01*x1100);
evalcond[2]=x1102;
evalcond[3]=(gconst33*x1101);
evalcond[4]=(gconst33+((new_r00*x1100)));
evalcond[5]=(x1102+new_r00);
evalcond[6]=(gconst33+(((-1.0)*new_r01*x1103)));
evalcond[7]=((((-1.0)*gconst33*x1103))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1104 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x1104.valid){
continue;
}
CheckValue<IkReal> x1105=IKPowWithIntegerCheck(IKsign(gconst33),-1);
if(!x1105.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1104.value)+(((1.5707963267949)*(x1105.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1106=IKcos(j7);
IkReal x1107=IKsin(j7);
IkReal x1108=(gconst33*x1106);
IkReal x1109=((1.0)*x1107);
evalcond[0]=(new_r00*x1107);
evalcond[1]=(new_r01*x1106);
evalcond[2]=x1108;
evalcond[3]=(gconst33*x1107);
evalcond[4]=(gconst33+((new_r00*x1106)));
evalcond[5]=(x1108+new_r00);
evalcond[6]=(gconst33+(((-1.0)*new_r01*x1109)));
evalcond[7]=((((-1.0)*gconst33*x1109))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1110=((1.0)*new_r00);
CheckValue<IkReal> x1111=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst34*x1110))+((gconst33*new_r10)))),-1);
if(!x1111.valid){
continue;
}
CheckValue<IkReal> x1112 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst33*gconst33)))+(new_r00*new_r00))),IkReal((((gconst33*gconst34))+(((-1.0)*new_r10*x1110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1112.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1111.value)))+(x1112.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1113=IKcos(j7);
IkReal x1114=IKsin(j7);
IkReal x1115=(gconst33*x1113);
IkReal x1116=(gconst34*x1114);
IkReal x1117=((1.0)*x1114);
IkReal x1118=((1.0)*x1113);
IkReal x1119=(x1115+x1116);
evalcond[0]=(gconst33+((new_r00*x1113))+((new_r10*x1114)));
evalcond[1]=(gconst34+((new_r11*x1114))+((new_r01*x1113)));
evalcond[2]=(x1119+new_r00);
evalcond[3]=(x1119+new_r11);
evalcond[4]=(gconst33+((new_r11*x1113))+(((-1.0)*new_r01*x1117)));
evalcond[5]=(gconst34+((new_r00*x1114))+(((-1.0)*new_r10*x1118)));
evalcond[6]=(((gconst34*x1113))+new_r01+(((-1.0)*gconst33*x1117)));
evalcond[7]=((((-1.0)*gconst34*x1118))+new_r10+((gconst33*x1114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1120=((1.0)*gconst33);
CheckValue<IkReal> x1121 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x1120))+((gconst33*new_r00)))),IkReal(((((-1.0)*new_r10*x1120))+(((-1.0)*new_r01*x1120)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1121.valid){
continue;
}
CheckValue<IkReal> x1122=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1122.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1121.value)+(((1.5707963267949)*(x1122.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1123=IKcos(j7);
IkReal x1124=IKsin(j7);
IkReal x1125=(gconst33*x1123);
IkReal x1126=(gconst34*x1124);
IkReal x1127=((1.0)*x1124);
IkReal x1128=((1.0)*x1123);
IkReal x1129=(x1125+x1126);
evalcond[0]=(gconst33+((new_r10*x1124))+((new_r00*x1123)));
evalcond[1]=(gconst34+((new_r01*x1123))+((new_r11*x1124)));
evalcond[2]=(x1129+new_r00);
evalcond[3]=(x1129+new_r11);
evalcond[4]=(gconst33+(((-1.0)*new_r01*x1127))+((new_r11*x1123)));
evalcond[5]=((((-1.0)*new_r10*x1128))+gconst34+((new_r00*x1124)));
evalcond[6]=(new_r01+(((-1.0)*gconst33*x1127))+((gconst34*x1123)));
evalcond[7]=(((gconst33*x1124))+new_r10+(((-1.0)*gconst34*x1128)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1130 = IKatan2WithCheck(IkReal((((gconst33*new_r01))+(((-1.0)*gconst34*new_r00)))),IkReal(((((-1.0)*gconst33*new_r11))+((gconst34*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1130.valid){
continue;
}
CheckValue<IkReal> x1131=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x1131.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1130.value)+(((1.5707963267949)*(x1131.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1132=IKcos(j7);
IkReal x1133=IKsin(j7);
IkReal x1134=(gconst33*x1132);
IkReal x1135=(gconst34*x1133);
IkReal x1136=((1.0)*x1133);
IkReal x1137=((1.0)*x1132);
IkReal x1138=(x1135+x1134);
evalcond[0]=(gconst33+((new_r00*x1132))+((new_r10*x1133)));
evalcond[1]=(gconst34+((new_r11*x1133))+((new_r01*x1132)));
evalcond[2]=(x1138+new_r00);
evalcond[3]=(x1138+new_r11);
evalcond[4]=(gconst33+(((-1.0)*new_r01*x1136))+((new_r11*x1132)));
evalcond[5]=(gconst34+(((-1.0)*new_r10*x1137))+((new_r00*x1133)));
evalcond[6]=((((-1.0)*gconst33*x1136))+((gconst34*x1132))+new_r01);
evalcond[7]=(((gconst33*x1133))+new_r10+(((-1.0)*gconst34*x1137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1141 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1141)==0){
continue;
}
IkReal x1139=pow(x1141,-0.5);
IkReal x1140=((1.0)*x1139);
CheckValue<IkReal> x1142 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1142.valid){
continue;
}
IkReal gconst35=((3.14159265358979)+(((-1.0)*(x1142.value))));
IkReal gconst36=(new_r01*x1140);
IkReal gconst37=(new_r11*x1140);
CheckValue<IkReal> x1143 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1143.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1143.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x1147 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1147.valid){
continue;
}
IkReal x1144=((1.0)*(x1147.value));
IkReal x1145=x1139;
IkReal x1146=((1.0)*x1145);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst36;
cj9=gconst37;
j9=((3.14159265)+(((-1.0)*x1144)));
IkReal gconst35=((3.14159265358979)+(((-1.0)*x1144)));
IkReal gconst36=(new_r01*x1146);
IkReal gconst37=(new_r11*x1146);
IkReal x1148=new_r01*new_r01;
IkReal x1149=((1.0)*new_r01);
IkReal x1150=(((new_r00*new_r11))+(((-1.0)*new_r10*x1149)));
IkReal x1151=x1139;
IkReal x1152=(new_r11*x1151);
j7eval[0]=x1150;
j7eval[1]=IKsign(x1150);
j7eval[2]=((IKabs((((new_r10*x1152))+(((-1.0)*x1149*x1152)))))+(IKabs(((((-1.0)*new_r00*x1152))+((x1148*x1151))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1156 = IKatan2WithCheck(IkReal(new_r01),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1156.valid){
continue;
}
IkReal x1153=((1.0)*(x1156.value));
IkReal x1154=x1139;
IkReal x1155=((1.0)*x1154);
sj8=1.0;
cj8=0;
j8=1.5707963267949;
sj9=gconst36;
cj9=gconst37;
j9=((3.14159265)+(((-1.0)*x1153)));
IkReal gconst35=((3.14159265358979)+(((-1.0)*x1153)));
IkReal gconst36=(new_r01*x1155);
IkReal gconst37=(new_r11*x1155);
IkReal x1157=new_r01*new_r01;
IkReal x1158=(new_r00*new_r01);
IkReal x1159=(x1158+((new_r10*new_r11)));
IkReal x1160=x1139;
IkReal x1161=((1.0)*new_r01*x1160);
j7eval[0]=x1159;
j7eval[1]=IKsign(x1159);
j7eval[2]=((IKabs(((((-1.0)*new_r10*x1161))+(((-1.0)*x1157*x1160)))))+(IKabs(((((-1.0)*new_r11*x1161))+((x1158*x1160))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1162=((1.0)*new_r00);
CheckValue<IkReal> x1163 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst36*gconst36)))+(new_r00*new_r00))),IkReal(((((-1.0)*new_r10*x1162))+((gconst36*gconst37)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1163.valid){
continue;
}
CheckValue<IkReal> x1164=IKPowWithIntegerCheck(IKsign((((gconst36*new_r10))+(((-1.0)*gconst37*x1162)))),-1);
if(!x1164.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1163.value)+(((1.5707963267949)*(x1164.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1165=IKcos(j7);
IkReal x1166=IKsin(j7);
IkReal x1167=(gconst36*x1165);
IkReal x1168=(gconst37*x1166);
IkReal x1169=((1.0)*x1166);
IkReal x1170=((1.0)*x1165);
IkReal x1171=(x1167+x1168);
evalcond[0]=(gconst36+((new_r10*x1166))+((new_r00*x1165)));
evalcond[1]=(gconst37+((new_r11*x1166))+((new_r01*x1165)));
evalcond[2]=(x1171+new_r00);
evalcond[3]=(x1171+new_r11);
evalcond[4]=(gconst36+((new_r11*x1165))+(((-1.0)*new_r01*x1169)));
evalcond[5]=((((-1.0)*new_r10*x1170))+gconst37+((new_r00*x1166)));
evalcond[6]=(((gconst37*x1165))+(((-1.0)*gconst36*x1169))+new_r01);
evalcond[7]=(((gconst36*x1166))+new_r10+(((-1.0)*gconst37*x1170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1172=((1.0)*gconst36);
CheckValue<IkReal> x1173 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x1172))+((gconst36*new_r00)))),IkReal(((((-1.0)*new_r10*x1172))+(((-1.0)*new_r01*x1172)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1173.valid){
continue;
}
CheckValue<IkReal> x1174=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1174.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1173.value)+(((1.5707963267949)*(x1174.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1175=IKcos(j7);
IkReal x1176=IKsin(j7);
IkReal x1177=(gconst36*x1175);
IkReal x1178=(gconst37*x1176);
IkReal x1179=((1.0)*x1176);
IkReal x1180=((1.0)*x1175);
IkReal x1181=(x1177+x1178);
evalcond[0]=(gconst36+((new_r10*x1176))+((new_r00*x1175)));
evalcond[1]=(gconst37+((new_r11*x1176))+((new_r01*x1175)));
evalcond[2]=(x1181+new_r00);
evalcond[3]=(x1181+new_r11);
evalcond[4]=(gconst36+((new_r11*x1175))+(((-1.0)*new_r01*x1179)));
evalcond[5]=(gconst37+(((-1.0)*new_r10*x1180))+((new_r00*x1176)));
evalcond[6]=((((-1.0)*gconst36*x1179))+new_r01+((gconst37*x1175)));
evalcond[7]=((((-1.0)*gconst37*x1180))+((gconst36*x1176))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1182 = IKatan2WithCheck(IkReal((((gconst36*new_r01))+(((-1.0)*gconst37*new_r00)))),IkReal(((((-1.0)*gconst36*new_r11))+((gconst37*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1182.valid){
continue;
}
CheckValue<IkReal> x1183=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x1183.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1182.value)+(((1.5707963267949)*(x1183.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1184=IKcos(j7);
IkReal x1185=IKsin(j7);
IkReal x1186=(gconst36*x1184);
IkReal x1187=(gconst37*x1185);
IkReal x1188=((1.0)*x1185);
IkReal x1189=((1.0)*x1184);
IkReal x1190=(x1186+x1187);
evalcond[0]=(gconst36+((new_r10*x1185))+((new_r00*x1184)));
evalcond[1]=(gconst37+((new_r01*x1184))+((new_r11*x1185)));
evalcond[2]=(x1190+new_r00);
evalcond[3]=(x1190+new_r11);
evalcond[4]=(gconst36+(((-1.0)*new_r01*x1188))+((new_r11*x1184)));
evalcond[5]=(gconst37+(((-1.0)*new_r10*x1189))+((new_r00*x1185)));
evalcond[6]=(((gconst37*x1184))+new_r01+(((-1.0)*gconst36*x1188)));
evalcond[7]=((((-1.0)*gconst37*x1189))+new_r10+((gconst36*x1185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1192 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1192.valid){
continue;
}
IkReal x1191=x1192.value;
j7array[0]=((-1.0)*x1191);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1191)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r10*(IKcos(j7))))+((new_r00*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j7eval[0]=new_r01;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r01);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j7eval[0]=new_r00;
j7eval[1]=IKsign(new_r00);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j7eval[0]=new_r01;
j7eval[1]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1193=IKPowWithIntegerCheck(new_r01,-1);
if(!x1193.valid){
continue;
}
CheckValue<IkReal> x1194=IKPowWithIntegerCheck(new_r00,-1);
if(!x1194.valid){
continue;
}
if( IKabs((sj9*(x1193.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj9*(x1194.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj9*(x1193.value)))+IKsqr(((-1.0)*sj9*(x1194.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((sj9*(x1193.value)), ((-1.0)*sj9*(x1194.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1195=IKcos(j7);
IkReal x1196=IKsin(j7);
IkReal x1197=(sj9*x1195);
IkReal x1198=(cj9*x1196);
IkReal x1199=(sj9*x1196);
IkReal x1200=(cj9*x1195);
IkReal x1201=(x1198+x1197);
evalcond[0]=(cj9+((new_r00*x1196)));
evalcond[1]=(sj9+((new_r00*x1195)));
evalcond[2]=(cj9+((new_r01*x1195)));
evalcond[3]=(sj9+(((-1.0)*new_r01*x1196)));
evalcond[4]=x1201;
evalcond[5]=(x1201+new_r00);
evalcond[6]=(x1199+(((-1.0)*x1200)));
evalcond[7]=(x1200+new_r01+(((-1.0)*x1199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1202=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x1202.valid){
continue;
}
CheckValue<IkReal> x1203 = IKatan2WithCheck(IkReal(((-1.0)*cj9)),IkReal(((-1.0)*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x1203.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1202.value)))+(x1203.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1204=IKcos(j7);
IkReal x1205=IKsin(j7);
IkReal x1206=(sj9*x1204);
IkReal x1207=(cj9*x1205);
IkReal x1208=(sj9*x1205);
IkReal x1209=(cj9*x1204);
IkReal x1210=(x1207+x1206);
evalcond[0]=(((new_r00*x1205))+cj9);
evalcond[1]=(((new_r00*x1204))+sj9);
evalcond[2]=(cj9+((new_r01*x1204)));
evalcond[3]=((((-1.0)*new_r01*x1205))+sj9);
evalcond[4]=x1210;
evalcond[5]=(x1210+new_r00);
evalcond[6]=(x1208+(((-1.0)*x1209)));
evalcond[7]=(x1209+(((-1.0)*x1208))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1211=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x1211.valid){
continue;
}
CheckValue<IkReal> x1212 = IKatan2WithCheck(IkReal(sj9),IkReal(((-1.0)*cj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x1212.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1211.value)))+(x1212.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1213=IKcos(j7);
IkReal x1214=IKsin(j7);
IkReal x1215=(sj9*x1213);
IkReal x1216=(cj9*x1214);
IkReal x1217=(sj9*x1214);
IkReal x1218=(cj9*x1213);
IkReal x1219=(x1216+x1215);
evalcond[0]=(cj9+((new_r00*x1214)));
evalcond[1]=(sj9+((new_r00*x1213)));
evalcond[2]=(cj9+((new_r01*x1213)));
evalcond[3]=((((-1.0)*new_r01*x1214))+sj9);
evalcond[4]=x1219;
evalcond[5]=(x1219+new_r00);
evalcond[6]=(x1217+(((-1.0)*x1218)));
evalcond[7]=(x1218+new_r01+(((-1.0)*x1217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j7eval[0]=new_r10;
j7eval[1]=IKsign(new_r10);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j7eval[0]=new_r11;
j7eval[1]=IKsign(new_r11);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j7eval[0]=new_r11;
j7eval[1]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1220=IKPowWithIntegerCheck(new_r11,-1);
if(!x1220.valid){
continue;
}
CheckValue<IkReal> x1221=IKPowWithIntegerCheck(new_r10,-1);
if(!x1221.valid){
continue;
}
if( IKabs(((-1.0)*cj9*(x1220.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((cj9*(x1221.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj9*(x1220.value)))+IKsqr((cj9*(x1221.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*cj9*(x1220.value)), (cj9*(x1221.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1222=IKsin(j7);
IkReal x1223=IKcos(j7);
IkReal x1224=(sj9*x1223);
IkReal x1225=(cj9*x1222);
IkReal x1226=(sj9*x1222);
IkReal x1227=(cj9*x1223);
IkReal x1228=(x1225+x1224);
evalcond[0]=(sj9+((new_r11*x1223)));
evalcond[1]=(sj9+((new_r10*x1222)));
evalcond[2]=(cj9+((new_r11*x1222)));
evalcond[3]=((((-1.0)*new_r10*x1223))+cj9);
evalcond[4]=x1228;
evalcond[5]=(x1228+new_r11);
evalcond[6]=(x1227+(((-1.0)*x1226)));
evalcond[7]=(x1226+(((-1.0)*x1227))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1229=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x1229.valid){
continue;
}
CheckValue<IkReal> x1230 = IKatan2WithCheck(IkReal(((-1.0)*cj9)),IkReal(((-1.0)*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x1230.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1229.value)))+(x1230.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1231=IKsin(j7);
IkReal x1232=IKcos(j7);
IkReal x1233=(sj9*x1232);
IkReal x1234=(cj9*x1231);
IkReal x1235=(sj9*x1231);
IkReal x1236=(cj9*x1232);
IkReal x1237=(x1234+x1233);
evalcond[0]=(sj9+((new_r11*x1232)));
evalcond[1]=(sj9+((new_r10*x1231)));
evalcond[2]=(cj9+((new_r11*x1231)));
evalcond[3]=(cj9+(((-1.0)*new_r10*x1232)));
evalcond[4]=x1237;
evalcond[5]=(x1237+new_r11);
evalcond[6]=((((-1.0)*x1235))+x1236);
evalcond[7]=((((-1.0)*x1236))+x1235+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1238=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x1238.valid){
continue;
}
CheckValue<IkReal> x1239 = IKatan2WithCheck(IkReal(((-1.0)*sj9)),IkReal(cj9),IKFAST_ATAN2_MAGTHRESH);
if(!x1239.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1238.value)))+(x1239.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1240=IKsin(j7);
IkReal x1241=IKcos(j7);
IkReal x1242=(sj9*x1241);
IkReal x1243=(cj9*x1240);
IkReal x1244=(sj9*x1240);
IkReal x1245=(cj9*x1241);
IkReal x1246=(x1243+x1242);
evalcond[0]=(sj9+((new_r11*x1241)));
evalcond[1]=(sj9+((new_r10*x1240)));
evalcond[2]=(cj9+((new_r11*x1240)));
evalcond[3]=(cj9+(((-1.0)*new_r10*x1241)));
evalcond[4]=x1246;
evalcond[5]=(x1246+new_r11);
evalcond[6]=(x1245+(((-1.0)*x1244)));
evalcond[7]=(x1244+(((-1.0)*x1245))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=1.0;
cj8=0;
j8=1.5707963267949;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1248 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1248.valid){
continue;
}
IkReal x1247=x1248.value;
j7array[0]=((-1.0)*x1247);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1247)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j7))))+((new_r11*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1249=((1.0)*sj9);
CheckValue<IkReal> x1250=IKPowWithIntegerCheck(IKsign((((cj9*new_r00))+(((-1.0)*new_r10*x1249)))),-1);
if(!x1250.valid){
continue;
}
CheckValue<IkReal> x1251 = IKatan2WithCheck(IkReal(((1.0)+(((-1.0)*(cj9*cj9)))+(((-1.0)*new_r00*new_r11)))),IkReal(((((-1.0)*cj9*x1249))+((new_r10*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1251.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1250.value)))+(x1251.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1252=IKcos(j7);
IkReal x1253=IKsin(j7);
IkReal x1254=(sj9*x1252);
IkReal x1255=(cj9*x1253);
IkReal x1256=(sj9*x1253);
IkReal x1257=(cj9*x1252);
IkReal x1258=(x1254+x1255);
evalcond[0]=(sj9+((new_r00*x1252))+((new_r10*x1253)));
evalcond[1]=(cj9+((new_r01*x1252))+((new_r11*x1253)));
evalcond[2]=(x1258+new_r00);
evalcond[3]=(x1258+new_r11);
evalcond[4]=(sj9+(((-1.0)*new_r01*x1253))+((new_r11*x1252)));
evalcond[5]=(cj9+(((-1.0)*new_r10*x1252))+((new_r00*x1253)));
evalcond[6]=(x1257+new_r01+(((-1.0)*x1256)));
evalcond[7]=(x1256+new_r10+(((-1.0)*x1257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1259=IKPowWithIntegerCheck(IKsign((((cj9*new_r01))+(((-1.0)*new_r11*sj9)))),-1);
if(!x1259.valid){
continue;
}
CheckValue<IkReal> x1260 = IKatan2WithCheck(IkReal((((cj9*sj9))+(((-1.0)*new_r00*new_r01)))),IkReal(((((-1.0)*(cj9*cj9)))+((new_r00*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1260.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1259.value)))+(x1260.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1261=IKcos(j7);
IkReal x1262=IKsin(j7);
IkReal x1263=(sj9*x1261);
IkReal x1264=(cj9*x1262);
IkReal x1265=(sj9*x1262);
IkReal x1266=(cj9*x1261);
IkReal x1267=(x1263+x1264);
evalcond[0]=(sj9+((new_r00*x1261))+((new_r10*x1262)));
evalcond[1]=(cj9+((new_r01*x1261))+((new_r11*x1262)));
evalcond[2]=(x1267+new_r00);
evalcond[3]=(x1267+new_r11);
evalcond[4]=(sj9+(((-1.0)*new_r01*x1262))+((new_r11*x1261)));
evalcond[5]=(cj9+(((-1.0)*new_r10*x1261))+((new_r00*x1262)));
evalcond[6]=(x1266+new_r01+(((-1.0)*x1265)));
evalcond[7]=(x1265+new_r10+(((-1.0)*x1266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1268 = IKatan2WithCheck(IkReal(((((-1.0)*cj9*new_r00))+((new_r01*sj9)))),IkReal((((cj9*new_r10))+(((-1.0)*new_r11*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1268.valid){
continue;
}
CheckValue<IkReal> x1269=IKPowWithIntegerCheck(IKsign((((new_r00*new_r11))+(((-1.0)*new_r01*new_r10)))),-1);
if(!x1269.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1268.value)+(((1.5707963267949)*(x1269.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1270=IKcos(j7);
IkReal x1271=IKsin(j7);
IkReal x1272=(sj9*x1270);
IkReal x1273=(cj9*x1271);
IkReal x1274=(sj9*x1271);
IkReal x1275=(cj9*x1270);
IkReal x1276=(x1272+x1273);
evalcond[0]=(sj9+((new_r00*x1270))+((new_r10*x1271)));
evalcond[1]=(((new_r01*x1270))+cj9+((new_r11*x1271)));
evalcond[2]=(x1276+new_r00);
evalcond[3]=(x1276+new_r11);
evalcond[4]=(sj9+(((-1.0)*new_r01*x1271))+((new_r11*x1270)));
evalcond[5]=(cj9+((new_r00*x1271))+(((-1.0)*new_r10*x1270)));
evalcond[6]=(x1275+(((-1.0)*x1274))+new_r01);
evalcond[7]=(x1274+(((-1.0)*x1275))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
IkReal x1277=(((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)));
j7eval[0]=x1277;
j7eval[1]=IKsign(x1277);
j7eval[2]=((IKabs((((new_r10*sj9))+((cj9*new_r11)))))+(IKabs((((cj9*new_r01))+((new_r00*sj9))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
IkReal x1278=((1.0)*sj9);
IkReal x1279=(((cj9*new_r11))+(((-1.0)*new_r01*x1278)));
j7eval[0]=x1279;
j7eval[1]=IKsign(x1279);
j7eval[2]=((IKabs(((-1.0)+(new_r11*new_r11)+(cj9*cj9))))+(IKabs((((new_r01*new_r11))+(((-1.0)*cj9*x1278))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
IkReal x1280=(((new_r01*sj9))+(((-1.0)*cj9*new_r11)));
j7eval[0]=x1280;
j7eval[1]=IKsign(x1280);
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(cj9*cj9)))+((new_r00*new_r11)))))+(IKabs((((cj9*sj9))+((new_r00*new_r01))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1282 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1282)==0){
continue;
}
IkReal x1281=pow(x1282,-0.5);
CheckValue<IkReal> x1283 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1283.valid){
continue;
}
IkReal gconst38=((-1.0)*(x1283.value));
IkReal gconst39=(new_r11*x1281);
IkReal gconst40=(new_r01*x1281);
CheckValue<IkReal> x1284 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1284.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1284.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x1287 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1287.valid){
continue;
}
IkReal x1285=((-1.0)*(x1287.value));
IkReal x1286=x1281;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1285;
IkReal gconst38=x1285;
IkReal gconst39=(new_r11*x1286);
IkReal gconst40=(new_r01*x1286);
IkReal x1288=new_r01*new_r01;
IkReal x1289=(((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)));
IkReal x1290=x1281;
IkReal x1291=(new_r11*x1290);
j7eval[0]=x1289;
j7eval[1]=IKsign(x1289);
j7eval[2]=((IKabs((((new_r10*x1291))+((new_r01*x1291)))))+(IKabs((((x1288*x1290))+((new_r00*x1291))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1294 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1294.valid){
continue;
}
IkReal x1292=((-1.0)*(x1294.value));
IkReal x1293=x1281;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1292;
IkReal gconst38=x1292;
IkReal gconst39=(new_r11*x1293);
IkReal gconst40=(new_r01*x1293);
IkReal x1295=new_r01*new_r01;
CheckValue<IkReal> x1298=IKPowWithIntegerCheck((x1295+(new_r11*new_r11)),-1);
if(!x1298.valid){
continue;
}
IkReal x1296=x1298.value;
IkReal x1297=(x1295*x1296);
j7eval[0]=((IKabs((x1297+((new_r00*new_r11)))))+(IKabs((((new_r10*x1296*(new_r11*new_r11*new_r11)))+((new_r10*new_r11*x1297))+((new_r01*new_r11*x1296))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1301 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1301.valid){
continue;
}
IkReal x1299=((-1.0)*(x1301.value));
IkReal x1300=x1281;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1299;
IkReal gconst38=x1299;
IkReal gconst39=(new_r11*x1300);
IkReal gconst40=(new_r01*x1300);
IkReal x1302=new_r11*new_r11;
IkReal x1303=(new_r10*new_r11);
IkReal x1304=(x1303+((new_r00*new_r01)));
IkReal x1305=x1281;
IkReal x1306=(new_r11*x1305);
j7eval[0]=x1304;
j7eval[1]=((IKabs((((x1302*x1305))+((new_r00*x1306)))))+(IKabs(((((-1.0)*x1303*x1305))+((new_r01*x1306))))));
j7eval[2]=IKsign(x1304);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1308 = IKatan2WithCheck(IkReal(0),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1308.valid){
continue;
}
IkReal x1307=((-1.0)*(x1308.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1307;
new_r11=0;
new_r00=0;
IkReal gconst38=x1307;
IkReal gconst39=0;
IkReal x1309 = new_r01*new_r01;
if(IKabs(x1309)==0){
continue;
}
IkReal gconst40=(new_r01*(pow(x1309,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1310=IKPowWithIntegerCheck(gconst40,-1);
if(!x1310.valid){
continue;
}
cj7array[0]=(new_r01*(x1310.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1311=IKsin(j7);
IkReal x1312=IKcos(j7);
IkReal x1313=((1.0)*gconst40);
evalcond[0]=(new_r10*x1311);
evalcond[1]=(gconst40*x1311);
evalcond[2]=((-1.0)*new_r01*x1311);
evalcond[3]=(gconst40+(((-1.0)*new_r10*x1312)));
evalcond[4]=(new_r10+(((-1.0)*x1312*x1313)));
evalcond[5]=(((new_r01*x1312))+(((-1.0)*x1313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1314=IKPowWithIntegerCheck(new_r10,-1);
if(!x1314.valid){
continue;
}
cj7array[0]=(gconst40*(x1314.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1315=IKsin(j7);
IkReal x1316=IKcos(j7);
IkReal x1317=((1.0)*gconst40);
IkReal x1318=(x1316*x1317);
evalcond[0]=(new_r10*x1315);
evalcond[1]=(gconst40*x1315);
evalcond[2]=((-1.0)*new_r01*x1315);
evalcond[3]=((((-1.0)*x1318))+new_r01);
evalcond[4]=((((-1.0)*x1318))+new_r10);
evalcond[5]=(((new_r01*x1316))+(((-1.0)*x1317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst40;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x1320 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1320.valid){
continue;
}
IkReal x1319=((-1.0)*(x1320.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1319;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst38=x1319;
IkReal gconst39=new_r11;
IkReal gconst40=new_r01;
j7eval[0]=1.0;
j7eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1322 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1322.valid){
continue;
}
IkReal x1321=((-1.0)*(x1322.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1321;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst38=x1321;
IkReal gconst39=new_r11;
IkReal gconst40=new_r01;
j7eval[0]=1.0;
j7eval[1]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1324 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1324.valid){
continue;
}
IkReal x1323=((-1.0)*(x1324.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1323;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst38=x1323;
IkReal gconst39=new_r11;
IkReal gconst40=new_r01;
j7eval[0]=1.0;
j7eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((-1.0)+(new_r01*new_r01)))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1325 = IKatan2WithCheck(IkReal((gconst40*new_r11)),IkReal(((-1.0)*gconst39*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1325.valid){
continue;
}
CheckValue<IkReal> x1326=IKPowWithIntegerCheck(IKsign(((gconst40*gconst40)+(gconst39*gconst39))),-1);
if(!x1326.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1325.value)+(((1.5707963267949)*(x1326.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1327=IKcos(j7);
IkReal x1328=IKsin(j7);
IkReal x1329=((1.0)*gconst40);
IkReal x1330=(gconst39*x1327);
IkReal x1331=((1.0)*x1328);
IkReal x1332=(((gconst39*x1331))+((x1327*x1329)));
evalcond[0]=((((-1.0)*x1330))+((gconst40*x1328)));
evalcond[1]=((((-1.0)*new_r01*x1331))+gconst39+((new_r11*x1327)));
evalcond[2]=(x1330+(((-1.0)*x1328*x1329))+new_r11);
evalcond[3]=((-1.0)*x1332);
evalcond[4]=(((new_r01*x1327))+(((-1.0)*x1329))+((new_r11*x1328)));
evalcond[5]=(new_r01+(((-1.0)*x1332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1333 = IKatan2WithCheck(IkReal((gconst39*new_r01)),IkReal((gconst40*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1333.valid){
continue;
}
CheckValue<IkReal> x1334=IKPowWithIntegerCheck(IKsign(((gconst40*gconst40)+(gconst39*gconst39))),-1);
if(!x1334.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1333.value)+(((1.5707963267949)*(x1334.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1335=IKcos(j7);
IkReal x1336=IKsin(j7);
IkReal x1337=((1.0)*gconst40);
IkReal x1338=(gconst39*x1335);
IkReal x1339=((1.0)*x1336);
IkReal x1340=(((gconst39*x1339))+((x1335*x1337)));
evalcond[0]=((((-1.0)*x1338))+((gconst40*x1336)));
evalcond[1]=((((-1.0)*new_r01*x1339))+((new_r11*x1335))+gconst39);
evalcond[2]=(x1338+(((-1.0)*x1336*x1337))+new_r11);
evalcond[3]=((-1.0)*x1340);
evalcond[4]=(((new_r11*x1336))+((new_r01*x1335))+(((-1.0)*x1337)));
evalcond[5]=((((-1.0)*x1340))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1341=IKPowWithIntegerCheck(IKsign((((gconst40*new_r01))+((gconst39*new_r11)))),-1);
if(!x1341.valid){
continue;
}
CheckValue<IkReal> x1342 = IKatan2WithCheck(IkReal((gconst39*gconst40)),IkReal(gconst40*gconst40),IKFAST_ATAN2_MAGTHRESH);
if(!x1342.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1341.value)))+(x1342.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1343=IKcos(j7);
IkReal x1344=IKsin(j7);
IkReal x1345=((1.0)*gconst40);
IkReal x1346=(gconst39*x1343);
IkReal x1347=((1.0)*x1344);
IkReal x1348=(((gconst39*x1347))+((x1343*x1345)));
evalcond[0]=(((gconst40*x1344))+(((-1.0)*x1346)));
evalcond[1]=(gconst39+((new_r11*x1343))+(((-1.0)*new_r01*x1347)));
evalcond[2]=(x1346+new_r11+(((-1.0)*x1344*x1345)));
evalcond[3]=((-1.0)*x1348);
evalcond[4]=((((-1.0)*x1345))+((new_r01*x1343))+((new_r11*x1344)));
evalcond[5]=((((-1.0)*x1348))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1349=IKPowWithIntegerCheck(gconst39,-1);
if(!x1349.valid){
continue;
}
cj7array[0]=(new_r00*(x1349.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1350=IKsin(j7);
IkReal x1351=IKcos(j7);
evalcond[0]=(new_r00*x1350);
evalcond[1]=(new_r11*x1350);
evalcond[2]=((-1.0)*gconst39*x1350);
evalcond[3]=(((new_r11*x1351))+gconst39);
evalcond[4]=(((gconst39*x1351))+new_r11);
evalcond[5]=(((new_r00*x1351))+(((-1.0)*gconst39)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1353 = IKatan2WithCheck(IkReal(0),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1353.valid){
continue;
}
IkReal x1352=((-1.0)*(x1353.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1352;
new_r11=0;
IkReal gconst38=x1352;
IkReal gconst39=0;
IkReal x1354 = new_r01*new_r01;
if(IKabs(x1354)==0){
continue;
}
IkReal gconst40=(new_r01*(pow(x1354,-0.5)));
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1356 = IKatan2WithCheck(IkReal(0),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1356.valid){
continue;
}
IkReal x1355=((-1.0)*(x1356.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1355;
new_r11=0;
IkReal gconst38=x1355;
IkReal gconst39=0;
IkReal x1357 = new_r01*new_r01;
if(IKabs(x1357)==0){
continue;
}
IkReal gconst40=(new_r01*(pow(x1357,-0.5)));
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1359 = IKatan2WithCheck(IkReal(0),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1359.valid){
continue;
}
IkReal x1358=((-1.0)*(x1359.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1358;
new_r11=0;
IkReal gconst38=x1358;
IkReal gconst39=0;
IkReal x1360 = new_r01*new_r01;
if(IKabs(x1360)==0){
continue;
}
IkReal gconst40=(new_r01*(pow(x1360,-0.5)));
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1361=IKPowWithIntegerCheck(gconst40,-1);
if(!x1361.valid){
continue;
}
CheckValue<IkReal> x1362=IKPowWithIntegerCheck(new_r01,-1);
if(!x1362.valid){
continue;
}
if( IKabs(((-1.0)*new_r00*(x1361.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst40*(x1362.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00*(x1361.value)))+IKsqr((gconst40*(x1362.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r00*(x1361.value)), (gconst40*(x1362.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1363=IKsin(j7);
IkReal x1364=IKcos(j7);
IkReal x1365=((1.0)*x1364);
IkReal x1366=(gconst40*x1365);
IkReal x1367=((-1.0)*x1363);
evalcond[0]=(new_r01*x1367);
evalcond[1]=(gconst40*x1367);
evalcond[2]=(((gconst40*x1363))+new_r00);
evalcond[3]=(new_r01+(((-1.0)*x1366)));
evalcond[4]=(new_r10+(((-1.0)*x1366)));
evalcond[5]=((((-1.0)*gconst40))+((new_r01*x1364)));
evalcond[6]=(((new_r10*x1363))+((new_r00*x1364)));
evalcond[7]=(gconst40+(((-1.0)*new_r10*x1365))+((new_r00*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1368=IKPowWithIntegerCheck(IKsign(gconst40),-1);
if(!x1368.valid){
continue;
}
CheckValue<IkReal> x1369 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1369.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1368.value)))+(x1369.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1370=IKsin(j7);
IkReal x1371=IKcos(j7);
IkReal x1372=((1.0)*x1371);
IkReal x1373=(gconst40*x1372);
IkReal x1374=((-1.0)*x1370);
evalcond[0]=(new_r01*x1374);
evalcond[1]=(gconst40*x1374);
evalcond[2]=(((gconst40*x1370))+new_r00);
evalcond[3]=((((-1.0)*x1373))+new_r01);
evalcond[4]=((((-1.0)*x1373))+new_r10);
evalcond[5]=((((-1.0)*gconst40))+((new_r01*x1371)));
evalcond[6]=(((new_r10*x1370))+((new_r00*x1371)));
evalcond[7]=(gconst40+((new_r00*x1370))+(((-1.0)*new_r10*x1372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1375=IKPowWithIntegerCheck(IKsign(gconst40),-1);
if(!x1375.valid){
continue;
}
CheckValue<IkReal> x1376 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1376.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1375.value)))+(x1376.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1377=IKsin(j7);
IkReal x1378=IKcos(j7);
IkReal x1379=((1.0)*x1378);
IkReal x1380=(gconst40*x1379);
IkReal x1381=((-1.0)*x1377);
evalcond[0]=(new_r01*x1381);
evalcond[1]=(gconst40*x1381);
evalcond[2]=(((gconst40*x1377))+new_r00);
evalcond[3]=((((-1.0)*x1380))+new_r01);
evalcond[4]=((((-1.0)*x1380))+new_r10);
evalcond[5]=((((-1.0)*gconst40))+((new_r01*x1378)));
evalcond[6]=(((new_r10*x1377))+((new_r00*x1378)));
evalcond[7]=(gconst40+((new_r00*x1377))+(((-1.0)*new_r10*x1379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1383 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1383.valid){
continue;
}
IkReal x1382=((-1.0)*(x1383.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1382;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst38=x1382;
IkReal x1384 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1384)==0){
continue;
}
IkReal gconst39=(new_r11*(pow(x1384,-0.5)));
IkReal gconst40=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1386 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1386.valid){
continue;
}
IkReal x1385=((-1.0)*(x1386.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1385;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst38=x1385;
IkReal x1387 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1387)==0){
continue;
}
IkReal gconst39=(new_r11*(pow(x1387,-0.5)));
IkReal gconst40=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x1389 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1389.valid){
continue;
}
IkReal x1388=((-1.0)*(x1389.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst39;
cj9=gconst40;
j9=x1388;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst38=x1388;
IkReal x1390 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1390)==0){
continue;
}
IkReal gconst39=(new_r11*(pow(x1390,-0.5)));
IkReal gconst40=0;
j7eval[0]=new_r10;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1391=IKPowWithIntegerCheck(new_r10,-1);
if(!x1391.valid){
continue;
}
CheckValue<IkReal> x1392=IKPowWithIntegerCheck(new_r11,-1);
if(!x1392.valid){
continue;
}
if( IKabs((gconst39*(x1391.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst39*(x1392.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst39*(x1391.value)))+IKsqr(((-1.0)*gconst39*(x1392.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst39*(x1391.value)), ((-1.0)*gconst39*(x1392.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1393=IKcos(j7);
IkReal x1394=IKsin(j7);
IkReal x1395=((1.0)*gconst39);
IkReal x1396=((-1.0)*gconst39);
evalcond[0]=(new_r11*x1394);
evalcond[1]=((-1.0)*new_r10*x1393);
evalcond[2]=(x1393*x1396);
evalcond[3]=(x1394*x1396);
evalcond[4]=(((new_r11*x1393))+gconst39);
evalcond[5]=(((gconst39*x1393))+new_r11);
evalcond[6]=((((-1.0)*x1394*x1395))+new_r10);
evalcond[7]=(((new_r10*x1394))+(((-1.0)*x1395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1397=IKPowWithIntegerCheck(gconst39,-1);
if(!x1397.valid){
continue;
}
CheckValue<IkReal> x1398=IKPowWithIntegerCheck(new_r11,-1);
if(!x1398.valid){
continue;
}
if( IKabs((new_r10*(x1397.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst39*(x1398.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x1397.value)))+IKsqr(((-1.0)*gconst39*(x1398.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x1397.value)), ((-1.0)*gconst39*(x1398.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1399=IKcos(j7);
IkReal x1400=IKsin(j7);
IkReal x1401=((1.0)*gconst39);
IkReal x1402=((-1.0)*gconst39);
evalcond[0]=(new_r11*x1400);
evalcond[1]=((-1.0)*new_r10*x1399);
evalcond[2]=(x1399*x1402);
evalcond[3]=(x1400*x1402);
evalcond[4]=(((new_r11*x1399))+gconst39);
evalcond[5]=(((gconst39*x1399))+new_r11);
evalcond[6]=((((-1.0)*x1400*x1401))+new_r10);
evalcond[7]=(((new_r10*x1400))+(((-1.0)*x1401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1403 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1403.valid){
continue;
}
CheckValue<IkReal> x1404=IKPowWithIntegerCheck(IKsign(gconst39),-1);
if(!x1404.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1403.value)+(((1.5707963267949)*(x1404.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1405=IKcos(j7);
IkReal x1406=IKsin(j7);
IkReal x1407=((1.0)*gconst39);
IkReal x1408=((-1.0)*gconst39);
evalcond[0]=(new_r11*x1406);
evalcond[1]=((-1.0)*new_r10*x1405);
evalcond[2]=(x1405*x1408);
evalcond[3]=(x1406*x1408);
evalcond[4]=(gconst39+((new_r11*x1405)));
evalcond[5]=(((gconst39*x1405))+new_r11);
evalcond[6]=((((-1.0)*x1406*x1407))+new_r10);
evalcond[7]=(((new_r10*x1406))+(((-1.0)*x1407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1409 = IKatan2WithCheck(IkReal((((gconst39*new_r11))+((gconst39*new_r00)))),IkReal(((((-1.0)*gconst39*new_r10))+((gconst39*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1409.valid){
continue;
}
CheckValue<IkReal> x1410=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1410.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1409.value)+(((1.5707963267949)*(x1410.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1411=IKsin(j7);
IkReal x1412=IKcos(j7);
IkReal x1413=((1.0)*gconst40);
IkReal x1414=(gconst39*x1412);
IkReal x1415=((1.0)*x1411);
IkReal x1416=(((gconst39*x1415))+((x1412*x1413)));
evalcond[0]=(gconst39+(((-1.0)*new_r01*x1415))+((new_r11*x1412)));
evalcond[1]=(((new_r00*x1411))+gconst40+(((-1.0)*new_r10*x1412)));
evalcond[2]=(((gconst40*x1411))+new_r00+(((-1.0)*x1414)));
evalcond[3]=((((-1.0)*x1411*x1413))+x1414+new_r11);
evalcond[4]=(((new_r00*x1412))+((new_r10*x1411))+(((-1.0)*gconst39)));
evalcond[5]=(((new_r01*x1412))+(((-1.0)*x1413))+((new_r11*x1411)));
evalcond[6]=((((-1.0)*x1416))+new_r01);
evalcond[7]=((((-1.0)*x1416))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1417=IKPowWithIntegerCheck(IKsign((((gconst40*new_r10))+(((-1.0)*gconst39*new_r00)))),-1);
if(!x1417.valid){
continue;
}
CheckValue<IkReal> x1418 = IKatan2WithCheck(IkReal((((new_r10*new_r11))+((gconst39*gconst40)))),IkReal((((new_r00*new_r11))+(gconst40*gconst40))),IKFAST_ATAN2_MAGTHRESH);
if(!x1418.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1417.value)))+(x1418.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1419=IKsin(j7);
IkReal x1420=IKcos(j7);
IkReal x1421=((1.0)*gconst40);
IkReal x1422=(gconst39*x1420);
IkReal x1423=((1.0)*x1419);
IkReal x1424=(((x1420*x1421))+((gconst39*x1423)));
evalcond[0]=((((-1.0)*new_r01*x1423))+gconst39+((new_r11*x1420)));
evalcond[1]=(((new_r00*x1419))+gconst40+(((-1.0)*new_r10*x1420)));
evalcond[2]=(((gconst40*x1419))+(((-1.0)*x1422))+new_r00);
evalcond[3]=((((-1.0)*x1419*x1421))+x1422+new_r11);
evalcond[4]=(((new_r10*x1419))+((new_r00*x1420))+(((-1.0)*gconst39)));
evalcond[5]=(((new_r11*x1419))+((new_r01*x1420))+(((-1.0)*x1421)));
evalcond[6]=(new_r01+(((-1.0)*x1424)));
evalcond[7]=(new_r10+(((-1.0)*x1424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1425=IKPowWithIntegerCheck(IKsign((((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)))),-1);
if(!x1425.valid){
continue;
}
CheckValue<IkReal> x1426 = IKatan2WithCheck(IkReal((((gconst40*new_r11))+((gconst39*new_r10)))),IkReal((((gconst40*new_r01))+((gconst39*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1426.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1425.value)))+(x1426.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1427=IKsin(j7);
IkReal x1428=IKcos(j7);
IkReal x1429=((1.0)*gconst40);
IkReal x1430=(gconst39*x1428);
IkReal x1431=((1.0)*x1427);
IkReal x1432=(((gconst39*x1431))+((x1428*x1429)));
evalcond[0]=(gconst39+(((-1.0)*new_r01*x1431))+((new_r11*x1428)));
evalcond[1]=(gconst40+(((-1.0)*new_r10*x1428))+((new_r00*x1427)));
evalcond[2]=((((-1.0)*x1430))+((gconst40*x1427))+new_r00);
evalcond[3]=((((-1.0)*x1427*x1429))+x1430+new_r11);
evalcond[4]=(((new_r00*x1428))+((new_r10*x1427))+(((-1.0)*gconst39)));
evalcond[5]=(((new_r11*x1427))+((new_r01*x1428))+(((-1.0)*x1429)));
evalcond[6]=((((-1.0)*x1432))+new_r01);
evalcond[7]=((((-1.0)*x1432))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1433=((-1.0)*new_r11);
IkReal x1435 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1435)==0){
continue;
}
IkReal x1434=pow(x1435,-0.5);
CheckValue<IkReal> x1436 = IKatan2WithCheck(IkReal(x1433),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1436.valid){
continue;
}
IkReal gconst41=((3.14159265358979)+(((-1.0)*(x1436.value))));
IkReal gconst42=(x1433*x1434);
IkReal gconst43=((-1.0)*new_r01*x1434);
CheckValue<IkReal> x1437 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1437.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1437.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1438=((-1.0)*new_r11);
CheckValue<IkReal> x1441 = IKatan2WithCheck(IkReal(x1438),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1441.valid){
continue;
}
IkReal x1439=((1.0)*(x1441.value));
IkReal x1440=x1434;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst42;
cj9=gconst43;
j9=((3.14159265)+(((-1.0)*x1439)));
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1439)));
IkReal gconst42=(x1438*x1440);
IkReal gconst43=((-1.0)*new_r01*x1440);
IkReal x1442=new_r01*new_r01;
IkReal x1443=(new_r00*new_r11);
IkReal x1444=((((-1.0)*x1443))+((new_r01*new_r10)));
IkReal x1445=x1434;
IkReal x1446=((1.0)*new_r11*x1445);
j7eval[0]=x1444;
j7eval[1]=IKsign(x1444);
j7eval[2]=((IKabs((((x1442*x1445))+((x1443*x1445)))))+(IKabs(((((-1.0)*new_r10*x1446))+(((-1.0)*new_r01*x1446))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1447=((-1.0)*new_r11);
CheckValue<IkReal> x1450 = IKatan2WithCheck(IkReal(x1447),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1450.valid){
continue;
}
IkReal x1448=((1.0)*(x1450.value));
IkReal x1449=x1434;
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst42;
cj9=gconst43;
j9=((3.14159265)+(((-1.0)*x1448)));
IkReal gconst41=((3.14159265358979)+(((-1.0)*x1448)));
IkReal gconst42=(x1447*x1449);
IkReal gconst43=((-1.0)*new_r01*x1449);
IkReal x1451=new_r11*new_r11;
IkReal x1452=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x1453=x1434;
IkReal x1454=(new_r11*x1453);
j7eval[0]=x1452;
j7eval[1]=IKsign(x1452);
j7eval[2]=((IKabs(((((-1.0)*new_r00*x1454))+(((-1.0)*x1451*x1453)))))+(IKabs((((new_r10*x1454))+(((-1.0)*new_r01*x1454))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1455=((1.0)*gconst43);
CheckValue<IkReal> x1456=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1455))+((gconst42*new_r00)))),-1);
if(!x1456.valid){
continue;
}
CheckValue<IkReal> x1457 = IKatan2WithCheck(IkReal((((new_r00*new_r10))+(((-1.0)*gconst42*x1455)))),IkReal(((((-1.0)*gconst43*x1455))+(new_r00*new_r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x1457.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1456.value)))+(x1457.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1458=IKsin(j7);
IkReal x1459=IKcos(j7);
IkReal x1460=((1.0)*gconst43);
IkReal x1461=((1.0)*gconst42);
IkReal x1462=(((x1459*x1460))+((x1458*x1461)));
evalcond[0]=(gconst42+((new_r11*x1459))+(((-1.0)*new_r01*x1458)));
evalcond[1]=(gconst43+((new_r00*x1458))+(((-1.0)*new_r10*x1459)));
evalcond[2]=(((gconst43*x1458))+(((-1.0)*x1459*x1461))+new_r00);
evalcond[3]=((((-1.0)*x1458*x1460))+((gconst42*x1459))+new_r11);
evalcond[4]=((((-1.0)*x1461))+((new_r00*x1459))+((new_r10*x1458)));
evalcond[5]=((((-1.0)*x1460))+((new_r01*x1459))+((new_r11*x1458)));
evalcond[6]=((((-1.0)*x1462))+new_r01);
evalcond[7]=((((-1.0)*x1462))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1463 = IKatan2WithCheck(IkReal((((gconst42*new_r00))+((gconst42*new_r11)))),IkReal((((gconst42*new_r01))+(((-1.0)*gconst42*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1463.valid){
continue;
}
CheckValue<IkReal> x1464=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1464.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1463.value)+(((1.5707963267949)*(x1464.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1465=IKsin(j7);
IkReal x1466=IKcos(j7);
IkReal x1467=((1.0)*gconst43);
IkReal x1468=((1.0)*gconst42);
IkReal x1469=(((x1465*x1468))+((x1466*x1467)));
evalcond[0]=((((-1.0)*new_r01*x1465))+gconst42+((new_r11*x1466)));
evalcond[1]=((((-1.0)*new_r10*x1466))+((new_r00*x1465))+gconst43);
evalcond[2]=(((gconst43*x1465))+(((-1.0)*x1466*x1468))+new_r00);
evalcond[3]=(((gconst42*x1466))+new_r11+(((-1.0)*x1465*x1467)));
evalcond[4]=(((new_r00*x1466))+(((-1.0)*x1468))+((new_r10*x1465)));
evalcond[5]=(((new_r01*x1466))+(((-1.0)*x1467))+((new_r11*x1465)));
evalcond[6]=((((-1.0)*x1469))+new_r01);
evalcond[7]=((((-1.0)*x1469))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1470 = IKatan2WithCheck(IkReal((((gconst43*new_r11))+((gconst42*new_r10)))),IkReal((((gconst42*new_r00))+((gconst43*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1470.valid){
continue;
}
CheckValue<IkReal> x1471=IKPowWithIntegerCheck(IKsign((((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)))),-1);
if(!x1471.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1470.value)+(((1.5707963267949)*(x1471.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1472=IKsin(j7);
IkReal x1473=IKcos(j7);
IkReal x1474=((1.0)*gconst43);
IkReal x1475=((1.0)*gconst42);
IkReal x1476=(((x1473*x1474))+((x1472*x1475)));
evalcond[0]=(((new_r11*x1473))+gconst42+(((-1.0)*new_r01*x1472)));
evalcond[1]=(gconst43+(((-1.0)*new_r10*x1473))+((new_r00*x1472)));
evalcond[2]=(((gconst43*x1472))+new_r00+(((-1.0)*x1473*x1475)));
evalcond[3]=(((gconst42*x1473))+new_r11+(((-1.0)*x1472*x1474)));
evalcond[4]=(((new_r10*x1472))+((new_r00*x1473))+(((-1.0)*x1475)));
evalcond[5]=(((new_r11*x1472))+((new_r01*x1473))+(((-1.0)*x1474)));
evalcond[6]=((((-1.0)*x1476))+new_r01);
evalcond[7]=((((-1.0)*x1476))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1479 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1479)==0){
continue;
}
IkReal x1477=pow(x1479,-0.5);
IkReal x1478=((-1.0)*x1477);
CheckValue<IkReal> x1480 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1480.valid){
continue;
}
IkReal gconst44=((-1.0)*(x1480.value));
IkReal gconst45=(new_r11*x1478);
IkReal gconst46=(new_r01*x1478);
CheckValue<IkReal> x1481 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1481.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1481.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x1485 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1485.valid){
continue;
}
IkReal x1482=((-1.0)*(x1485.value));
IkReal x1483=x1477;
IkReal x1484=((-1.0)*x1483);
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1482;
IkReal gconst44=x1482;
IkReal gconst45=(new_r11*x1484);
IkReal gconst46=(new_r01*x1484);
IkReal x1486=new_r01*new_r01;
IkReal x1487=(new_r00*new_r11);
IkReal x1488=(((new_r01*new_r10))+(((-1.0)*x1487)));
IkReal x1489=x1477;
IkReal x1490=((1.0)*new_r11*x1489);
j7eval[0]=x1488;
j7eval[1]=IKsign(x1488);
j7eval[2]=((IKabs((((x1487*x1489))+((x1486*x1489)))))+(IKabs(((((-1.0)*new_r01*x1490))+(((-1.0)*new_r10*x1490))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1494 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1494.valid){
continue;
}
IkReal x1491=((-1.0)*(x1494.value));
IkReal x1492=x1477;
IkReal x1493=((-1.0)*x1492);
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1491;
IkReal gconst44=x1491;
IkReal gconst45=(new_r11*x1493);
IkReal gconst46=(new_r01*x1493);
IkReal x1495=new_r11*new_r11;
IkReal x1496=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x1497=x1477;
IkReal x1498=(new_r11*x1497);
j7eval[0]=x1496;
j7eval[1]=((IKabs(((((-1.0)*new_r01*x1498))+((new_r10*x1498)))))+(IKabs(((((-1.0)*new_r00*x1498))+(((-1.0)*x1495*x1497))))));
j7eval[2]=IKsign(x1496);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1502 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1502.valid){
continue;
}
IkReal x1499=((-1.0)*(x1502.value));
IkReal x1500=x1477;
IkReal x1501=((-1.0)*x1500);
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1499;
IkReal gconst44=x1499;
IkReal gconst45=(new_r11*x1501);
IkReal gconst46=(new_r01*x1501);
IkReal x1503=new_r01*new_r01;
CheckValue<IkReal> x1506=IKPowWithIntegerCheck(((new_r11*new_r11)+x1503),-1);
if(!x1506.valid){
continue;
}
IkReal x1504=x1506.value;
IkReal x1505=((1.0)*x1504);
j7eval[0]=((IKabs((((new_r00*new_r10))+(((-1.0)*new_r01*new_r11*x1505)))))+(IKabs(((((-1.0)*x1503*x1505))+(new_r00*new_r00)))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst46;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
IkReal x1507=((-1.0)*new_r01);
CheckValue<IkReal> x1509 = IKatan2WithCheck(IkReal(new_r11),IkReal(x1507),IKFAST_ATAN2_MAGTHRESH);
if(!x1509.valid){
continue;
}
IkReal x1508=((-1.0)*(x1509.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1508;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst44=x1508;
IkReal gconst45=((-1.0)*new_r11);
IkReal gconst46=x1507;
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1510=((-1.0)*new_r01);
CheckValue<IkReal> x1512 = IKatan2WithCheck(IkReal(new_r11),IkReal(x1510),IKFAST_ATAN2_MAGTHRESH);
if(!x1512.valid){
continue;
}
IkReal x1511=((-1.0)*(x1512.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1511;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst44=x1511;
IkReal gconst45=((-1.0)*new_r11);
IkReal gconst46=x1510;
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs(new_r01*new_r01))+(IKabs((new_r01*new_r11))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
IkReal x1513=((-1.0)*new_r01);
CheckValue<IkReal> x1515 = IKatan2WithCheck(IkReal(new_r11),IkReal(x1513),IKFAST_ATAN2_MAGTHRESH);
if(!x1515.valid){
continue;
}
IkReal x1514=((-1.0)*(x1515.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1514;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst44=x1514;
IkReal gconst45=((-1.0)*new_r11);
IkReal gconst46=x1513;
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1516 = IKatan2WithCheck(IkReal((gconst46*new_r11)),IkReal(((-1.0)*gconst45*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1516.valid){
continue;
}
CheckValue<IkReal> x1517=IKPowWithIntegerCheck(IKsign(((gconst45*gconst45)+(gconst46*gconst46))),-1);
if(!x1517.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1516.value)+(((1.5707963267949)*(x1517.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1518=IKcos(j7);
IkReal x1519=IKsin(j7);
IkReal x1520=((1.0)*gconst46);
IkReal x1521=(gconst45*x1518);
IkReal x1522=((1.0)*x1519);
IkReal x1523=(((gconst45*x1522))+((x1518*x1520)));
evalcond[0]=(((gconst46*x1519))+(((-1.0)*x1521)));
evalcond[1]=(gconst45+(((-1.0)*new_r01*x1522))+((new_r11*x1518)));
evalcond[2]=((((-1.0)*x1519*x1520))+x1521+new_r11);
evalcond[3]=((-1.0)*x1523);
evalcond[4]=((((-1.0)*x1520))+((new_r01*x1518))+((new_r11*x1519)));
evalcond[5]=((((-1.0)*x1523))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1524 = IKatan2WithCheck(IkReal((gconst45*new_r01)),IkReal((gconst46*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1524.valid){
continue;
}
CheckValue<IkReal> x1525=IKPowWithIntegerCheck(IKsign(((gconst45*gconst45)+(gconst46*gconst46))),-1);
if(!x1525.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1524.value)+(((1.5707963267949)*(x1525.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1526=IKcos(j7);
IkReal x1527=IKsin(j7);
IkReal x1528=((1.0)*gconst46);
IkReal x1529=(gconst45*x1526);
IkReal x1530=((1.0)*x1527);
IkReal x1531=(((gconst45*x1530))+((x1526*x1528)));
evalcond[0]=(((gconst46*x1527))+(((-1.0)*x1529)));
evalcond[1]=(gconst45+(((-1.0)*new_r01*x1530))+((new_r11*x1526)));
evalcond[2]=(x1529+(((-1.0)*x1527*x1528))+new_r11);
evalcond[3]=((-1.0)*x1531);
evalcond[4]=((((-1.0)*x1528))+((new_r01*x1526))+((new_r11*x1527)));
evalcond[5]=((((-1.0)*x1531))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1532=IKPowWithIntegerCheck(IKsign((((gconst46*new_r01))+((gconst45*new_r11)))),-1);
if(!x1532.valid){
continue;
}
CheckValue<IkReal> x1533 = IKatan2WithCheck(IkReal((gconst45*gconst46)),IkReal(gconst46*gconst46),IKFAST_ATAN2_MAGTHRESH);
if(!x1533.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1532.value)))+(x1533.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1534=IKcos(j7);
IkReal x1535=IKsin(j7);
IkReal x1536=((1.0)*gconst46);
IkReal x1537=(gconst45*x1534);
IkReal x1538=((1.0)*x1535);
IkReal x1539=(((gconst45*x1538))+((x1534*x1536)));
evalcond[0]=((((-1.0)*x1537))+((gconst46*x1535)));
evalcond[1]=(gconst45+(((-1.0)*new_r01*x1538))+((new_r11*x1534)));
evalcond[2]=((((-1.0)*x1535*x1536))+x1537+new_r11);
evalcond[3]=((-1.0)*x1539);
evalcond[4]=((((-1.0)*x1536))+((new_r01*x1534))+((new_r11*x1535)));
evalcond[5]=((((-1.0)*x1539))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1541 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1541.valid){
continue;
}
IkReal x1540=((-1.0)*(x1541.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1540;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst44=x1540;
IkReal x1542 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1542)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x1542,-0.5)));
IkReal gconst46=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1544 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1544.valid){
continue;
}
IkReal x1543=((-1.0)*(x1544.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1543;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst44=x1543;
IkReal x1545 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1545)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x1545,-0.5)));
IkReal gconst46=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x1547 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1547.valid){
continue;
}
IkReal x1546=((-1.0)*(x1547.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1546;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst44=x1546;
IkReal x1548 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1548)==0){
continue;
}
IkReal gconst45=((-1.0)*new_r11*(pow(x1548,-0.5)));
IkReal gconst46=0;
j7eval[0]=new_r10;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1549=IKPowWithIntegerCheck(new_r10,-1);
if(!x1549.valid){
continue;
}
CheckValue<IkReal> x1550=IKPowWithIntegerCheck(new_r11,-1);
if(!x1550.valid){
continue;
}
if( IKabs((gconst45*(x1549.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst45*(x1550.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst45*(x1549.value)))+IKsqr(((-1.0)*gconst45*(x1550.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst45*(x1549.value)), ((-1.0)*gconst45*(x1550.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1551=IKcos(j7);
IkReal x1552=IKsin(j7);
IkReal x1553=((1.0)*gconst45);
IkReal x1554=(gconst45*x1551);
evalcond[0]=(new_r11*x1552);
evalcond[1]=((-1.0)*new_r10*x1551);
evalcond[2]=((-1.0)*x1554);
evalcond[3]=((-1.0)*gconst45*x1552);
evalcond[4]=(gconst45+((new_r11*x1551)));
evalcond[5]=(x1554+new_r11);
evalcond[6]=((((-1.0)*x1552*x1553))+new_r10);
evalcond[7]=(((new_r10*x1552))+(((-1.0)*x1553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1555=IKPowWithIntegerCheck(gconst45,-1);
if(!x1555.valid){
continue;
}
CheckValue<IkReal> x1556=IKPowWithIntegerCheck(new_r11,-1);
if(!x1556.valid){
continue;
}
if( IKabs((new_r10*(x1555.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst45*(x1556.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x1555.value)))+IKsqr(((-1.0)*gconst45*(x1556.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x1555.value)), ((-1.0)*gconst45*(x1556.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1557=IKcos(j7);
IkReal x1558=IKsin(j7);
IkReal x1559=((1.0)*gconst45);
IkReal x1560=(gconst45*x1557);
evalcond[0]=(new_r11*x1558);
evalcond[1]=((-1.0)*new_r10*x1557);
evalcond[2]=((-1.0)*x1560);
evalcond[3]=((-1.0)*gconst45*x1558);
evalcond[4]=(gconst45+((new_r11*x1557)));
evalcond[5]=(x1560+new_r11);
evalcond[6]=((((-1.0)*x1558*x1559))+new_r10);
evalcond[7]=(((new_r10*x1558))+(((-1.0)*x1559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1561 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1561.valid){
continue;
}
CheckValue<IkReal> x1562=IKPowWithIntegerCheck(IKsign(gconst45),-1);
if(!x1562.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1561.value)+(((1.5707963267949)*(x1562.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1563=IKcos(j7);
IkReal x1564=IKsin(j7);
IkReal x1565=((1.0)*gconst45);
IkReal x1566=(gconst45*x1563);
evalcond[0]=(new_r11*x1564);
evalcond[1]=((-1.0)*new_r10*x1563);
evalcond[2]=((-1.0)*x1566);
evalcond[3]=((-1.0)*gconst45*x1564);
evalcond[4]=(((new_r11*x1563))+gconst45);
evalcond[5]=(x1566+new_r11);
evalcond[6]=((((-1.0)*x1564*x1565))+new_r10);
evalcond[7]=(((new_r10*x1564))+(((-1.0)*x1565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
IkReal x1567=((-1.0)*new_r01);
CheckValue<IkReal> x1569 = IKatan2WithCheck(IkReal(0),IkReal(x1567),IKFAST_ATAN2_MAGTHRESH);
if(!x1569.valid){
continue;
}
IkReal x1568=((-1.0)*(x1569.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1568;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst44=x1568;
IkReal gconst45=0;
IkReal x1570 = new_r01*new_r01;
if(IKabs(x1570)==0){
continue;
}
IkReal gconst46=(x1567*(pow(x1570,-0.5)));
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
IkReal x1571=((-1.0)*new_r01);
CheckValue<IkReal> x1573 = IKatan2WithCheck(IkReal(0),IkReal(x1571),IKFAST_ATAN2_MAGTHRESH);
if(!x1573.valid){
continue;
}
IkReal x1572=((-1.0)*(x1573.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1572;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst44=x1572;
IkReal gconst45=0;
IkReal x1574 = new_r01*new_r01;
if(IKabs(x1574)==0){
continue;
}
IkReal gconst46=(x1571*(pow(x1574,-0.5)));
j7eval[0]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
IkReal x1575=((-1.0)*new_r01);
CheckValue<IkReal> x1577 = IKatan2WithCheck(IkReal(0),IkReal(x1575),IKFAST_ATAN2_MAGTHRESH);
if(!x1577.valid){
continue;
}
IkReal x1576=((-1.0)*(x1577.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst45;
cj9=gconst46;
j9=x1576;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
IkReal gconst44=x1576;
IkReal gconst45=0;
IkReal x1578 = new_r01*new_r01;
if(IKabs(x1578)==0){
continue;
}
IkReal gconst46=(x1575*(pow(x1578,-0.5)));
j7eval[0]=new_r00;
j7eval[1]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1579=IKPowWithIntegerCheck(new_r00,-1);
if(!x1579.valid){
continue;
}
CheckValue<IkReal> x1580=IKPowWithIntegerCheck(new_r01,-1);
if(!x1580.valid){
continue;
}
if( IKabs(((-1.0)*gconst46*(x1579.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst46*(x1580.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst46*(x1579.value)))+IKsqr((gconst46*(x1580.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst46*(x1579.value)), (gconst46*(x1580.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1581=IKsin(j7);
IkReal x1582=IKcos(j7);
IkReal x1583=((1.0)*gconst46);
IkReal x1584=((-1.0)*x1581);
evalcond[0]=(new_r00*x1582);
evalcond[1]=(new_r01*x1584);
evalcond[2]=(gconst46*x1584);
evalcond[3]=((-1.0)*gconst46*x1582);
evalcond[4]=(((new_r00*x1581))+gconst46);
evalcond[5]=(((gconst46*x1581))+new_r00);
evalcond[6]=(new_r01+(((-1.0)*x1582*x1583)));
evalcond[7]=((((-1.0)*x1583))+((new_r01*x1582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1585=IKPowWithIntegerCheck(new_r00,-1);
if(!x1585.valid){
continue;
}
CheckValue<IkReal> x1586=IKPowWithIntegerCheck(gconst46,-1);
if(!x1586.valid){
continue;
}
if( IKabs(((-1.0)*gconst46*(x1585.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r01*(x1586.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*gconst46*(x1585.value)))+IKsqr((new_r01*(x1586.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*gconst46*(x1585.value)), (new_r01*(x1586.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1587=IKsin(j7);
IkReal x1588=IKcos(j7);
IkReal x1589=((1.0)*gconst46);
IkReal x1590=((-1.0)*x1587);
evalcond[0]=(new_r00*x1588);
evalcond[1]=(new_r01*x1590);
evalcond[2]=(gconst46*x1590);
evalcond[3]=((-1.0)*gconst46*x1588);
evalcond[4]=(((new_r00*x1587))+gconst46);
evalcond[5]=(((gconst46*x1587))+new_r00);
evalcond[6]=((((-1.0)*x1588*x1589))+new_r01);
evalcond[7]=((((-1.0)*x1589))+((new_r01*x1588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1591 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1591.valid){
continue;
}
CheckValue<IkReal> x1592=IKPowWithIntegerCheck(IKsign(gconst46),-1);
if(!x1592.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1591.value)+(((1.5707963267949)*(x1592.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1593=IKsin(j7);
IkReal x1594=IKcos(j7);
IkReal x1595=((1.0)*gconst46);
IkReal x1596=((-1.0)*x1593);
evalcond[0]=(new_r00*x1594);
evalcond[1]=(new_r01*x1596);
evalcond[2]=(gconst46*x1596);
evalcond[3]=((-1.0)*gconst46*x1594);
evalcond[4]=(((new_r00*x1593))+gconst46);
evalcond[5]=(((gconst46*x1593))+new_r00);
evalcond[6]=((((-1.0)*x1594*x1595))+new_r01);
evalcond[7]=((((-1.0)*x1595))+((new_r01*x1594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1597=((1.0)*gconst46);
CheckValue<IkReal> x1598=IKPowWithIntegerCheck(IKsign(((((-1.0)*new_r10*x1597))+((gconst45*new_r00)))),-1);
if(!x1598.valid){
continue;
}
CheckValue<IkReal> x1599 = IKatan2WithCheck(IkReal(((((-1.0)*gconst45*x1597))+((new_r00*new_r10)))),IkReal(((((-1.0)*gconst46*x1597))+(new_r00*new_r00))),IKFAST_ATAN2_MAGTHRESH);
if(!x1599.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1598.value)))+(x1599.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1600=IKsin(j7);
IkReal x1601=IKcos(j7);
IkReal x1602=((1.0)*gconst45);
IkReal x1603=(gconst45*x1601);
IkReal x1604=((1.0)*x1600);
IkReal x1605=((1.0)*x1601);
IkReal x1606=(((x1600*x1602))+((gconst46*x1605)));
evalcond[0]=((((-1.0)*new_r01*x1604))+gconst45+((new_r11*x1601)));
evalcond[1]=((((-1.0)*new_r10*x1605))+gconst46+((new_r00*x1600)));
evalcond[2]=((((-1.0)*x1601*x1602))+new_r00+((gconst46*x1600)));
evalcond[3]=((((-1.0)*gconst46*x1604))+x1603+new_r11);
evalcond[4]=((((-1.0)*x1602))+((new_r10*x1600))+((new_r00*x1601)));
evalcond[5]=((((-1.0)*gconst46))+((new_r11*x1600))+((new_r01*x1601)));
evalcond[6]=((((-1.0)*x1606))+new_r01);
evalcond[7]=((((-1.0)*x1606))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1607 = IKatan2WithCheck(IkReal((((gconst45*new_r11))+((gconst45*new_r00)))),IkReal(((((-1.0)*gconst45*new_r10))+((gconst45*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1607.valid){
continue;
}
CheckValue<IkReal> x1608=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1608.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1607.value)+(((1.5707963267949)*(x1608.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1609=IKsin(j7);
IkReal x1610=IKcos(j7);
IkReal x1611=((1.0)*gconst45);
IkReal x1612=(gconst45*x1610);
IkReal x1613=((1.0)*x1609);
IkReal x1614=((1.0)*x1610);
IkReal x1615=(((x1609*x1611))+((gconst46*x1614)));
evalcond[0]=((((-1.0)*new_r01*x1613))+((new_r11*x1610))+gconst45);
evalcond[1]=((((-1.0)*new_r10*x1614))+gconst46+((new_r00*x1609)));
evalcond[2]=((((-1.0)*x1610*x1611))+new_r00+((gconst46*x1609)));
evalcond[3]=(x1612+(((-1.0)*gconst46*x1613))+new_r11);
evalcond[4]=((((-1.0)*x1611))+((new_r00*x1610))+((new_r10*x1609)));
evalcond[5]=((((-1.0)*gconst46))+((new_r01*x1610))+((new_r11*x1609)));
evalcond[6]=((((-1.0)*x1615))+new_r01);
evalcond[7]=((((-1.0)*x1615))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1616=IKPowWithIntegerCheck(IKsign((((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)))),-1);
if(!x1616.valid){
continue;
}
CheckValue<IkReal> x1617 = IKatan2WithCheck(IkReal((((gconst46*new_r11))+((gconst45*new_r10)))),IkReal((((gconst46*new_r01))+((gconst45*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1617.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1616.value)))+(x1617.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1618=IKsin(j7);
IkReal x1619=IKcos(j7);
IkReal x1620=((1.0)*gconst45);
IkReal x1621=(gconst45*x1619);
IkReal x1622=((1.0)*x1618);
IkReal x1623=((1.0)*x1619);
IkReal x1624=(((gconst46*x1623))+((x1618*x1620)));
evalcond[0]=(((new_r11*x1619))+gconst45+(((-1.0)*new_r01*x1622)));
evalcond[1]=((((-1.0)*new_r10*x1623))+gconst46+((new_r00*x1618)));
evalcond[2]=((((-1.0)*x1619*x1620))+((gconst46*x1618))+new_r00);
evalcond[3]=((((-1.0)*gconst46*x1622))+x1621+new_r11);
evalcond[4]=(((new_r10*x1618))+(((-1.0)*x1620))+((new_r00*x1619)));
evalcond[5]=((((-1.0)*gconst46))+((new_r11*x1618))+((new_r01*x1619)));
evalcond[6]=((((-1.0)*x1624))+new_r01);
evalcond[7]=((((-1.0)*x1624))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1627 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x1627)==0){
continue;
}
IkReal x1625=pow(x1627,-0.5);
IkReal x1626=((1.0)*x1625);
CheckValue<IkReal> x1628 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1628.valid){
continue;
}
IkReal gconst47=((3.14159265358979)+(((-1.0)*(x1628.value))));
IkReal gconst48=(new_r11*x1626);
IkReal gconst49=(new_r01*x1626);
CheckValue<IkReal> x1629 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1629.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1629.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x1633 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1633.valid){
continue;
}
IkReal x1630=((1.0)*(x1633.value));
IkReal x1631=x1625;
IkReal x1632=((1.0)*x1631);
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1630)));
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1630)));
IkReal gconst48=(new_r11*x1632);
IkReal gconst49=(new_r01*x1632);
IkReal x1634=new_r01*new_r01;
IkReal x1635=(((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)));
IkReal x1636=x1625;
IkReal x1637=(new_r11*x1636);
j7eval[0]=x1635;
j7eval[1]=IKsign(x1635);
j7eval[2]=((IKabs((((new_r00*x1637))+((x1634*x1636)))))+(IKabs((((new_r10*x1637))+((new_r01*x1637))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1641 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1641.valid){
continue;
}
IkReal x1638=((1.0)*(x1641.value));
IkReal x1639=x1625;
IkReal x1640=((1.0)*x1639);
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1638)));
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1638)));
IkReal gconst48=(new_r11*x1640);
IkReal gconst49=(new_r01*x1640);
IkReal x1642=new_r01*new_r01;
IkReal x1643=new_r11*new_r11*new_r11;
CheckValue<IkReal> x1647=IKPowWithIntegerCheck((x1642+(new_r11*new_r11)),-1);
if(!x1647.valid){
continue;
}
IkReal x1644=x1647.value;
IkReal x1645=(x1642*x1644);
IkReal x1646=(x1643*x1644);
j7eval[0]=((IKabs((((new_r10*x1646))+((new_r10*new_r11*x1645))+((new_r01*new_r11*x1644)))))+(IKabs((x1645+((new_r00*new_r11*x1645))+((new_r00*x1646))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1651 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1651.valid){
continue;
}
IkReal x1648=((1.0)*(x1651.value));
IkReal x1649=x1625;
IkReal x1650=((1.0)*x1649);
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1648)));
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1648)));
IkReal gconst48=(new_r11*x1650);
IkReal gconst49=(new_r01*x1650);
IkReal x1652=new_r11*new_r11;
IkReal x1653=(new_r10*new_r11);
IkReal x1654=(x1653+((new_r00*new_r01)));
IkReal x1655=x1625;
IkReal x1656=(new_r11*x1655);
j7eval[0]=x1654;
j7eval[1]=((IKabs((((new_r00*x1656))+((x1652*x1655)))))+(IKabs(((((-1.0)*x1653*x1655))+((new_r01*x1656))))));
j7eval[2]=IKsign(x1654);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1658 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1658.valid){
continue;
}
IkReal x1657=((1.0)*(x1658.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1657)));
new_r11=0;
new_r00=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1657)));
IkReal gconst48=0;
IkReal x1659 = new_r01*new_r01;
if(IKabs(x1659)==0){
continue;
}
IkReal gconst49=((1.0)*new_r01*(pow(x1659,-0.5)));
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1660=IKPowWithIntegerCheck(gconst49,-1);
if(!x1660.valid){
continue;
}
cj7array[0]=(new_r01*(x1660.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1661=IKsin(j7);
IkReal x1662=IKcos(j7);
IkReal x1663=((1.0)*x1662);
evalcond[0]=(new_r10*x1661);
evalcond[1]=(gconst49*x1661);
evalcond[2]=((-1.0)*new_r01*x1661);
evalcond[3]=(gconst49+(((-1.0)*new_r10*x1663)));
evalcond[4]=((((-1.0)*gconst49*x1663))+new_r10);
evalcond[5]=((((-1.0)*gconst49))+((new_r01*x1662)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1664=IKPowWithIntegerCheck(new_r10,-1);
if(!x1664.valid){
continue;
}
cj7array[0]=(gconst49*(x1664.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1665=IKsin(j7);
IkReal x1666=IKcos(j7);
IkReal x1667=((1.0)*gconst49);
IkReal x1668=(x1666*x1667);
evalcond[0]=(new_r10*x1665);
evalcond[1]=(gconst49*x1665);
evalcond[2]=((-1.0)*new_r01*x1665);
evalcond[3]=((((-1.0)*x1668))+new_r01);
evalcond[4]=((((-1.0)*x1668))+new_r10);
evalcond[5]=(((new_r01*x1666))+(((-1.0)*x1667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst49;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[4];
CheckValue<IkReal> x1670 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1670.valid){
continue;
}
IkReal x1669=((1.0)*(x1670.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1669)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1669)));
IkReal gconst48=((1.0)*new_r11);
IkReal gconst49=((1.0)*new_r01);
j7eval[0]=1.0;
j7eval[1]=new_r01;
j7eval[2]=1.0;
j7eval[3]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal j7eval[4];
CheckValue<IkReal> x1672 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1672.valid){
continue;
}
IkReal x1671=((1.0)*(x1672.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1671)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1671)));
IkReal gconst48=((1.0)*new_r11);
IkReal gconst49=((1.0)*new_r01);
j7eval[0]=1.0;
j7eval[1]=new_r01;
j7eval[2]=1.0;
j7eval[3]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  || IKabs(j7eval[3]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x1674 = IKatan2WithCheck(IkReal(new_r11),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1674.valid){
continue;
}
IkReal x1673=((1.0)*(x1674.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1673)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1673)));
IkReal gconst48=((1.0)*new_r11);
IkReal gconst49=((1.0)*new_r01);
j7eval[0]=1.0;
j7eval[1]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal((gconst49*new_r11)),IkReal(((-1.0)*gconst48*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
CheckValue<IkReal> x1676=IKPowWithIntegerCheck(IKsign(((gconst48*gconst48)+(gconst49*gconst49))),-1);
if(!x1676.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1675.value)+(((1.5707963267949)*(x1676.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1677=IKcos(j7);
IkReal x1678=IKsin(j7);
IkReal x1679=((1.0)*x1678);
IkReal x1680=((1.0)*x1677);
IkReal x1681=(((gconst48*x1679))+((gconst49*x1680)));
evalcond[0]=(((gconst49*x1678))+(((-1.0)*gconst48*x1680)));
evalcond[1]=((((-1.0)*new_r01*x1679))+gconst48+((new_r11*x1677)));
evalcond[2]=(((gconst48*x1677))+(((-1.0)*gconst49*x1679))+new_r11);
evalcond[3]=((-1.0)*x1681);
evalcond[4]=((((-1.0)*gconst49))+((new_r01*x1677))+((new_r11*x1678)));
evalcond[5]=((((-1.0)*x1681))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1682=IKPowWithIntegerCheck(IKsign(((gconst48*gconst48)+(gconst49*gconst49))),-1);
if(!x1682.valid){
continue;
}
CheckValue<IkReal> x1683 = IKatan2WithCheck(IkReal((gconst48*new_r01)),IkReal((gconst49*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1683.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1682.value)))+(x1683.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1684=IKcos(j7);
IkReal x1685=IKsin(j7);
IkReal x1686=((1.0)*x1685);
IkReal x1687=((1.0)*x1684);
IkReal x1688=(((gconst48*x1686))+((gconst49*x1687)));
evalcond[0]=((((-1.0)*gconst48*x1687))+((gconst49*x1685)));
evalcond[1]=(gconst48+((new_r11*x1684))+(((-1.0)*new_r01*x1686)));
evalcond[2]=(new_r11+(((-1.0)*gconst49*x1686))+((gconst48*x1684)));
evalcond[3]=((-1.0)*x1688);
evalcond[4]=((((-1.0)*gconst49))+((new_r11*x1685))+((new_r01*x1684)));
evalcond[5]=((((-1.0)*x1688))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1689 = IKatan2WithCheck(IkReal((gconst48*gconst49)),IkReal(gconst49*gconst49),IKFAST_ATAN2_MAGTHRESH);
if(!x1689.valid){
continue;
}
CheckValue<IkReal> x1690=IKPowWithIntegerCheck(IKsign((((gconst49*new_r01))+((gconst48*new_r11)))),-1);
if(!x1690.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1689.value)+(((1.5707963267949)*(x1690.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1691=IKcos(j7);
IkReal x1692=IKsin(j7);
IkReal x1693=((1.0)*x1692);
IkReal x1694=((1.0)*x1691);
IkReal x1695=(((gconst49*x1694))+((gconst48*x1693)));
evalcond[0]=(((gconst49*x1692))+(((-1.0)*gconst48*x1694)));
evalcond[1]=(((new_r11*x1691))+gconst48+(((-1.0)*new_r01*x1693)));
evalcond[2]=(((gconst48*x1691))+new_r11+(((-1.0)*gconst49*x1693)));
evalcond[3]=((-1.0)*x1695);
evalcond[4]=((((-1.0)*gconst49))+((new_r11*x1692))+((new_r01*x1691)));
evalcond[5]=((((-1.0)*x1695))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1696=IKPowWithIntegerCheck(gconst48,-1);
if(!x1696.valid){
continue;
}
cj7array[0]=(new_r00*(x1696.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x1697=IKsin(j7);
IkReal x1698=IKcos(j7);
evalcond[0]=(new_r00*x1697);
evalcond[1]=(new_r11*x1697);
evalcond[2]=((-1.0)*gconst48*x1697);
evalcond[3]=(((new_r11*x1698))+gconst48);
evalcond[4]=(((gconst48*x1698))+new_r11);
evalcond[5]=((((-1.0)*gconst48))+((new_r00*x1698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r11);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1700 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1700.valid){
continue;
}
IkReal x1699=((1.0)*(x1700.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1699)));
new_r11=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1699)));
IkReal gconst48=0;
IkReal x1701 = new_r01*new_r01;
if(IKabs(x1701)==0){
continue;
}
IkReal gconst49=((1.0)*new_r01*(pow(x1701,-0.5)));
j7eval[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1703 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1703.valid){
continue;
}
IkReal x1702=((1.0)*(x1703.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1702)));
new_r11=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1702)));
IkReal gconst48=0;
IkReal x1704 = new_r01*new_r01;
if(IKabs(x1704)==0){
continue;
}
IkReal gconst49=((1.0)*new_r01*(pow(x1704,-0.5)));
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1706 = IKatan2WithCheck(IkReal(0),IkReal(((-1.0)*new_r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1706.valid){
continue;
}
IkReal x1705=((1.0)*(x1706.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1705)));
new_r11=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1705)));
IkReal gconst48=0;
IkReal x1707 = new_r01*new_r01;
if(IKabs(x1707)==0){
continue;
}
IkReal gconst49=((1.0)*new_r01*(pow(x1707,-0.5)));
j7eval[0]=new_r01;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1708=IKPowWithIntegerCheck(gconst49,-1);
if(!x1708.valid){
continue;
}
CheckValue<IkReal> x1709=IKPowWithIntegerCheck(new_r01,-1);
if(!x1709.valid){
continue;
}
if( IKabs(((-1.0)*new_r00*(x1708.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((gconst49*(x1709.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00*(x1708.value)))+IKsqr((gconst49*(x1709.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r00*(x1708.value)), (gconst49*(x1709.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1710=IKsin(j7);
IkReal x1711=IKcos(j7);
IkReal x1712=((1.0)*x1711);
IkReal x1713=(gconst49*x1712);
IkReal x1714=((-1.0)*x1710);
evalcond[0]=(new_r01*x1714);
evalcond[1]=(gconst49*x1714);
evalcond[2]=(((gconst49*x1710))+new_r00);
evalcond[3]=((((-1.0)*x1713))+new_r01);
evalcond[4]=((((-1.0)*x1713))+new_r10);
evalcond[5]=((((-1.0)*gconst49))+((new_r01*x1711)));
evalcond[6]=(((new_r10*x1710))+((new_r00*x1711)));
evalcond[7]=(gconst49+((new_r00*x1710))+(((-1.0)*new_r10*x1712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1715=IKPowWithIntegerCheck(IKsign(gconst49),-1);
if(!x1715.valid){
continue;
}
CheckValue<IkReal> x1716 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1716.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1715.value)))+(x1716.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1717=IKsin(j7);
IkReal x1718=IKcos(j7);
IkReal x1719=((1.0)*x1718);
IkReal x1720=(gconst49*x1719);
IkReal x1721=((-1.0)*x1717);
evalcond[0]=(new_r01*x1721);
evalcond[1]=(gconst49*x1721);
evalcond[2]=(((gconst49*x1717))+new_r00);
evalcond[3]=(new_r01+(((-1.0)*x1720)));
evalcond[4]=(new_r10+(((-1.0)*x1720)));
evalcond[5]=((((-1.0)*gconst49))+((new_r01*x1718)));
evalcond[6]=(((new_r10*x1717))+((new_r00*x1718)));
evalcond[7]=(gconst49+((new_r00*x1717))+(((-1.0)*new_r10*x1719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1722 = IKatan2WithCheck(IkReal(((-1.0)*new_r00)),IkReal(new_r01),IKFAST_ATAN2_MAGTHRESH);
if(!x1722.valid){
continue;
}
CheckValue<IkReal> x1723=IKPowWithIntegerCheck(IKsign(gconst49),-1);
if(!x1723.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1722.value)+(((1.5707963267949)*(x1723.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1724=IKsin(j7);
IkReal x1725=IKcos(j7);
IkReal x1726=((1.0)*x1725);
IkReal x1727=(gconst49*x1726);
IkReal x1728=((-1.0)*x1724);
evalcond[0]=(new_r01*x1728);
evalcond[1]=(gconst49*x1728);
evalcond[2]=(((gconst49*x1724))+new_r00);
evalcond[3]=(new_r01+(((-1.0)*x1727)));
evalcond[4]=(new_r10+(((-1.0)*x1727)));
evalcond[5]=((((-1.0)*gconst49))+((new_r01*x1725)));
evalcond[6]=(((new_r10*x1724))+((new_r00*x1725)));
evalcond[7]=((((-1.0)*new_r10*x1726))+gconst49+((new_r00*x1724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x1730 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1730.valid){
continue;
}
IkReal x1729=((1.0)*(x1730.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1729)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1729)));
IkReal x1731 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1731)==0){
continue;
}
IkReal gconst48=((1.0)*new_r11*(pow(x1731,-0.5)));
IkReal gconst49=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x1733 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1733.valid){
continue;
}
IkReal x1732=((1.0)*(x1733.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1732)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1732)));
IkReal x1734 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1734)==0){
continue;
}
IkReal gconst48=((1.0)*new_r11*(pow(x1734,-0.5)));
IkReal gconst49=0;
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x1736 = IKatan2WithCheck(IkReal(new_r11),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x1736.valid){
continue;
}
IkReal x1735=((1.0)*(x1736.value));
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
sj9=gconst48;
cj9=gconst49;
j9=((3.14159265)+(((-1.0)*x1735)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst47=((3.14159265358979)+(((-1.0)*x1735)));
IkReal x1737 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x1737)==0){
continue;
}
IkReal gconst48=((1.0)*new_r11*(pow(x1737,-0.5)));
IkReal gconst49=0;
j7eval[0]=new_r10;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1738=IKPowWithIntegerCheck(new_r10,-1);
if(!x1738.valid){
continue;
}
CheckValue<IkReal> x1739=IKPowWithIntegerCheck(new_r11,-1);
if(!x1739.valid){
continue;
}
if( IKabs((gconst48*(x1738.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst48*(x1739.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst48*(x1738.value)))+IKsqr(((-1.0)*gconst48*(x1739.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst48*(x1738.value)), ((-1.0)*gconst48*(x1739.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1740=IKcos(j7);
IkReal x1741=IKsin(j7);
IkReal x1742=((1.0)*gconst48);
IkReal x1743=((-1.0)*x1740);
evalcond[0]=(new_r11*x1741);
evalcond[1]=(new_r10*x1743);
evalcond[2]=(gconst48*x1743);
evalcond[3]=((-1.0)*gconst48*x1741);
evalcond[4]=(gconst48+((new_r11*x1740)));
evalcond[5]=(((gconst48*x1740))+new_r11);
evalcond[6]=((((-1.0)*x1741*x1742))+new_r10);
evalcond[7]=((((-1.0)*x1742))+((new_r10*x1741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1744=IKPowWithIntegerCheck(gconst48,-1);
if(!x1744.valid){
continue;
}
CheckValue<IkReal> x1745=IKPowWithIntegerCheck(new_r11,-1);
if(!x1745.valid){
continue;
}
if( IKabs((new_r10*(x1744.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst48*(x1745.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x1744.value)))+IKsqr(((-1.0)*gconst48*(x1745.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x1744.value)), ((-1.0)*gconst48*(x1745.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1746=IKcos(j7);
IkReal x1747=IKsin(j7);
IkReal x1748=((1.0)*gconst48);
IkReal x1749=((-1.0)*x1746);
evalcond[0]=(new_r11*x1747);
evalcond[1]=(new_r10*x1749);
evalcond[2]=(gconst48*x1749);
evalcond[3]=((-1.0)*gconst48*x1747);
evalcond[4]=(gconst48+((new_r11*x1746)));
evalcond[5]=(((gconst48*x1746))+new_r11);
evalcond[6]=((((-1.0)*x1747*x1748))+new_r10);
evalcond[7]=((((-1.0)*x1748))+((new_r10*x1747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1750 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x1750.valid){
continue;
}
CheckValue<IkReal> x1751=IKPowWithIntegerCheck(IKsign(gconst48),-1);
if(!x1751.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1750.value)+(((1.5707963267949)*(x1751.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1752=IKcos(j7);
IkReal x1753=IKsin(j7);
IkReal x1754=((1.0)*gconst48);
IkReal x1755=((-1.0)*x1752);
evalcond[0]=(new_r11*x1753);
evalcond[1]=(new_r10*x1755);
evalcond[2]=(gconst48*x1755);
evalcond[3]=((-1.0)*gconst48*x1753);
evalcond[4]=(gconst48+((new_r11*x1752)));
evalcond[5]=(((gconst48*x1752))+new_r11);
evalcond[6]=((((-1.0)*x1753*x1754))+new_r10);
evalcond[7]=((((-1.0)*x1754))+((new_r10*x1753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1756 = IKatan2WithCheck(IkReal((((gconst48*new_r00))+((gconst48*new_r11)))),IkReal(((((-1.0)*gconst48*new_r10))+((gconst48*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1756.valid){
continue;
}
CheckValue<IkReal> x1757=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x1757.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1756.value)+(((1.5707963267949)*(x1757.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1758=IKsin(j7);
IkReal x1759=IKcos(j7);
IkReal x1760=((1.0)*x1759);
IkReal x1761=((1.0)*x1758);
IkReal x1762=(((gconst49*x1760))+((gconst48*x1761)));
evalcond[0]=(gconst48+(((-1.0)*new_r01*x1761))+((new_r11*x1759)));
evalcond[1]=(gconst49+((new_r00*x1758))+(((-1.0)*new_r10*x1760)));
evalcond[2]=((((-1.0)*gconst48*x1760))+((gconst49*x1758))+new_r00);
evalcond[3]=((((-1.0)*gconst49*x1761))+((gconst48*x1759))+new_r11);
evalcond[4]=((((-1.0)*gconst48))+((new_r00*x1759))+((new_r10*x1758)));
evalcond[5]=((((-1.0)*gconst49))+((new_r01*x1759))+((new_r11*x1758)));
evalcond[6]=((((-1.0)*x1762))+new_r01);
evalcond[7]=((((-1.0)*x1762))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1763=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst48*new_r00))+((gconst49*new_r10)))),-1);
if(!x1763.valid){
continue;
}
CheckValue<IkReal> x1764 = IKatan2WithCheck(IkReal((((gconst48*gconst49))+((new_r10*new_r11)))),IkReal(((gconst49*gconst49)+((new_r00*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1764.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1763.value)))+(x1764.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1765=IKsin(j7);
IkReal x1766=IKcos(j7);
IkReal x1767=((1.0)*x1766);
IkReal x1768=((1.0)*x1765);
IkReal x1769=(((gconst49*x1767))+((gconst48*x1768)));
evalcond[0]=(((new_r11*x1766))+gconst48+(((-1.0)*new_r01*x1768)));
evalcond[1]=(((new_r00*x1765))+gconst49+(((-1.0)*new_r10*x1767)));
evalcond[2]=((((-1.0)*gconst48*x1767))+new_r00+((gconst49*x1765)));
evalcond[3]=((((-1.0)*gconst49*x1768))+new_r11+((gconst48*x1766)));
evalcond[4]=((((-1.0)*gconst48))+((new_r00*x1766))+((new_r10*x1765)));
evalcond[5]=((((-1.0)*gconst49))+((new_r11*x1765))+((new_r01*x1766)));
evalcond[6]=((((-1.0)*x1769))+new_r01);
evalcond[7]=((((-1.0)*x1769))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1770=IKPowWithIntegerCheck(IKsign((((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)))),-1);
if(!x1770.valid){
continue;
}
CheckValue<IkReal> x1771 = IKatan2WithCheck(IkReal((((gconst49*new_r11))+((gconst48*new_r10)))),IkReal((((gconst49*new_r01))+((gconst48*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1771.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1770.value)))+(x1771.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1772=IKsin(j7);
IkReal x1773=IKcos(j7);
IkReal x1774=((1.0)*x1773);
IkReal x1775=((1.0)*x1772);
IkReal x1776=(((gconst48*x1775))+((gconst49*x1774)));
evalcond[0]=(gconst48+(((-1.0)*new_r01*x1775))+((new_r11*x1773)));
evalcond[1]=(((new_r00*x1772))+gconst49+(((-1.0)*new_r10*x1774)));
evalcond[2]=(((gconst49*x1772))+(((-1.0)*gconst48*x1774))+new_r00);
evalcond[3]=(((gconst48*x1773))+(((-1.0)*gconst49*x1775))+new_r11);
evalcond[4]=((((-1.0)*gconst48))+((new_r00*x1773))+((new_r10*x1772)));
evalcond[5]=((((-1.0)*gconst49))+((new_r01*x1773))+((new_r11*x1772)));
evalcond[6]=((((-1.0)*x1776))+new_r01);
evalcond[7]=((((-1.0)*x1776))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1778 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1778.valid){
continue;
}
IkReal x1777=x1778.value;
j7array[0]=((-1.0)*x1777);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1777)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r10*(IKcos(j7))))+((new_r00*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j7eval[0]=new_r00;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r00);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j7eval[0]=new_r01;
j7eval[1]=new_r00;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r11=0;
new_r10=0;
new_r22=0;
new_r02=0;
j7eval[0]=new_r00;
j7eval[1]=sj9;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r00), new_r01);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1779=IKsin(j7);
IkReal x1780=IKcos(j7);
IkReal x1781=((-1.0)*x1779);
evalcond[0]=(new_r00*x1780);
evalcond[1]=(x1779+new_r00);
evalcond[2]=x1781;
evalcond[3]=((-1.0)*x1780);
evalcond[4]=(new_r01*x1781);
evalcond[5]=((1.0)+((new_r00*x1779)));
evalcond[6]=((-1.0)+((new_r01*x1780)));
evalcond[7]=((((-1.0)*x1780))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r00, ((-1.0)*new_r01));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1782=IKcos(j7);
IkReal x1783=IKsin(j7);
evalcond[0]=x1783;
evalcond[1]=x1782;
evalcond[2]=(new_r00*x1782);
evalcond[3]=(x1782+new_r01);
evalcond[4]=((-1.0)*new_r01*x1783);
evalcond[5]=((-1.0)+((new_r00*x1783)));
evalcond[6]=((1.0)+((new_r01*x1782)));
evalcond[7]=((((-1.0)*x1783))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1786=IKPowWithIntegerCheck(new_r00,-1);
if(!x1786.valid){
continue;
}
IkReal x1784=x1786.value;
IkReal x1785=((-1.0)*x1784);
CheckValue<IkReal> x1787=IKPowWithIntegerCheck(sj9,-1);
if(!x1787.valid){
continue;
}
if( IKabs((cj9*x1785)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1785*(cj9*cj9)*(x1787.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj9*x1785))+IKsqr((x1785*(cj9*cj9)*(x1787.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((cj9*x1785), (x1785*(cj9*cj9)*(x1787.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1788=IKsin(j7);
IkReal x1789=IKcos(j7);
IkReal x1790=((1.0)*sj9);
IkReal x1791=((1.0)*cj9);
IkReal x1792=((1.0)*x1788);
IkReal x1793=(((x1789*x1791))+((x1788*x1790)));
evalcond[0]=(cj9+((new_r00*x1788)));
evalcond[1]=(sj9+(((-1.0)*new_r01*x1792)));
evalcond[2]=((((-1.0)*x1790))+((new_r00*x1789)));
evalcond[3]=((((-1.0)*x1791))+((new_r01*x1789)));
evalcond[4]=((((-1.0)*x1788*x1791))+((sj9*x1789)));
evalcond[5]=((((-1.0)*x1789*x1790))+((cj9*x1788))+new_r00);
evalcond[6]=((-1.0)*x1793);
evalcond[7]=((((-1.0)*x1793))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1794=IKPowWithIntegerCheck(new_r01,-1);
if(!x1794.valid){
continue;
}
CheckValue<IkReal> x1795=IKPowWithIntegerCheck(new_r00,-1);
if(!x1795.valid){
continue;
}
if( IKabs((sj9*(x1794.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((sj9*(x1795.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj9*(x1794.value)))+IKsqr((sj9*(x1795.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((sj9*(x1794.value)), (sj9*(x1795.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1796=IKsin(j7);
IkReal x1797=IKcos(j7);
IkReal x1798=((1.0)*sj9);
IkReal x1799=((1.0)*cj9);
IkReal x1800=((1.0)*x1796);
IkReal x1801=(((x1796*x1798))+((x1797*x1799)));
evalcond[0]=(cj9+((new_r00*x1796)));
evalcond[1]=(sj9+(((-1.0)*new_r01*x1800)));
evalcond[2]=((((-1.0)*x1798))+((new_r00*x1797)));
evalcond[3]=((((-1.0)*x1799))+((new_r01*x1797)));
evalcond[4]=((((-1.0)*x1796*x1799))+((sj9*x1797)));
evalcond[5]=(((cj9*x1796))+new_r00+(((-1.0)*x1797*x1798)));
evalcond[6]=((-1.0)*x1801);
evalcond[7]=((((-1.0)*x1801))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1802 = IKatan2WithCheck(IkReal(((-1.0)*cj9)),IkReal(sj9),IKFAST_ATAN2_MAGTHRESH);
if(!x1802.valid){
continue;
}
CheckValue<IkReal> x1803=IKPowWithIntegerCheck(IKsign(new_r00),-1);
if(!x1803.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1802.value)+(((1.5707963267949)*(x1803.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1804=IKsin(j7);
IkReal x1805=IKcos(j7);
IkReal x1806=((1.0)*sj9);
IkReal x1807=((1.0)*cj9);
IkReal x1808=((1.0)*x1804);
IkReal x1809=(((x1805*x1807))+((x1804*x1806)));
evalcond[0]=(((new_r00*x1804))+cj9);
evalcond[1]=(sj9+(((-1.0)*new_r01*x1808)));
evalcond[2]=(((new_r00*x1805))+(((-1.0)*x1806)));
evalcond[3]=((((-1.0)*x1807))+((new_r01*x1805)));
evalcond[4]=((((-1.0)*x1804*x1807))+((sj9*x1805)));
evalcond[5]=((((-1.0)*x1805*x1806))+new_r00+((cj9*x1804)));
evalcond[6]=((-1.0)*x1809);
evalcond[7]=((((-1.0)*x1809))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j7eval[0]=new_r10;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r10);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j7eval[0]=new_r11;
j7eval[1]=IKsign(new_r11);
j7eval[2]=((IKabs(cj9))+(IKabs(sj9)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
j7eval[0]=new_r10;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1810=IKPowWithIntegerCheck(new_r10,-1);
if(!x1810.valid){
continue;
}
CheckValue<IkReal> x1811=IKPowWithIntegerCheck(new_r11,-1);
if(!x1811.valid){
continue;
}
if( IKabs((sj9*(x1810.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj9*(x1811.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj9*(x1810.value)))+IKsqr(((-1.0)*sj9*(x1811.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((sj9*(x1810.value)), ((-1.0)*sj9*(x1811.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1812=IKcos(j7);
IkReal x1813=IKsin(j7);
IkReal x1814=((1.0)*sj9);
IkReal x1815=((1.0)*x1812);
IkReal x1816=(cj9*x1813);
IkReal x1817=(((x1813*x1814))+((cj9*x1815)));
evalcond[0]=(((new_r11*x1812))+sj9);
evalcond[1]=(cj9+(((-1.0)*new_r10*x1815)));
evalcond[2]=((((-1.0)*x1814))+((new_r10*x1813)));
evalcond[3]=(((new_r11*x1813))+(((-1.0)*cj9)));
evalcond[4]=((((-1.0)*x1812*x1814))+x1816);
evalcond[5]=(((sj9*x1812))+new_r11+(((-1.0)*x1816)));
evalcond[6]=((-1.0)*x1817);
evalcond[7]=((((-1.0)*x1817))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1818=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x1818.valid){
continue;
}
CheckValue<IkReal> x1819 = IKatan2WithCheck(IkReal(cj9),IkReal(((-1.0)*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x1819.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1818.value)))+(x1819.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1820=IKcos(j7);
IkReal x1821=IKsin(j7);
IkReal x1822=((1.0)*sj9);
IkReal x1823=((1.0)*x1820);
IkReal x1824=(cj9*x1821);
IkReal x1825=(((cj9*x1823))+((x1821*x1822)));
evalcond[0]=(sj9+((new_r11*x1820)));
evalcond[1]=(cj9+(((-1.0)*new_r10*x1823)));
evalcond[2]=((((-1.0)*x1822))+((new_r10*x1821)));
evalcond[3]=(((new_r11*x1821))+(((-1.0)*cj9)));
evalcond[4]=(x1824+(((-1.0)*x1820*x1822)));
evalcond[5]=(((sj9*x1820))+(((-1.0)*x1824))+new_r11);
evalcond[6]=((-1.0)*x1825);
evalcond[7]=((((-1.0)*x1825))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1826 = IKatan2WithCheck(IkReal(sj9),IkReal(cj9),IKFAST_ATAN2_MAGTHRESH);
if(!x1826.valid){
continue;
}
CheckValue<IkReal> x1827=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x1827.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1826.value)+(((1.5707963267949)*(x1827.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1828=IKcos(j7);
IkReal x1829=IKsin(j7);
IkReal x1830=((1.0)*sj9);
IkReal x1831=((1.0)*x1828);
IkReal x1832=(cj9*x1829);
IkReal x1833=(((cj9*x1831))+((x1829*x1830)));
evalcond[0]=(sj9+((new_r11*x1828)));
evalcond[1]=(cj9+(((-1.0)*new_r10*x1831)));
evalcond[2]=(((new_r10*x1829))+(((-1.0)*x1830)));
evalcond[3]=(((new_r11*x1829))+(((-1.0)*cj9)));
evalcond[4]=((((-1.0)*x1828*x1830))+x1832);
evalcond[5]=((((-1.0)*x1832))+((sj9*x1828))+new_r11);
evalcond[6]=((-1.0)*x1833);
evalcond[7]=((((-1.0)*x1833))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=-1.0;
cj8=0;
j8=-1.5707963267949;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1835 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1835.valid){
continue;
}
IkReal x1834=x1835.value;
j7array[0]=((-1.0)*x1834);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1834)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j7))))+((new_r11*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1836=IKPowWithIntegerCheck(IKsign((((new_r01*sj9))+(((-1.0)*cj9*new_r11)))),-1);
if(!x1836.valid){
continue;
}
CheckValue<IkReal> x1837 = IKatan2WithCheck(IkReal(((1.0)+(((-1.0)*(cj9*cj9)))+((new_r00*new_r11)))),IkReal((((cj9*sj9))+((new_r00*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1837.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1836.value)))+(x1837.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1838=IKsin(j7);
IkReal x1839=IKcos(j7);
IkReal x1840=((1.0)*sj9);
IkReal x1841=((1.0)*x1838);
IkReal x1842=((1.0)*x1839);
IkReal x1843=(((x1838*x1840))+((cj9*x1842)));
evalcond[0]=(sj9+((new_r11*x1839))+(((-1.0)*new_r01*x1841)));
evalcond[1]=((((-1.0)*new_r10*x1842))+cj9+((new_r00*x1838)));
evalcond[2]=(((cj9*x1838))+(((-1.0)*x1839*x1840))+new_r00);
evalcond[3]=((((-1.0)*cj9*x1841))+new_r11+((sj9*x1839)));
evalcond[4]=(((new_r00*x1839))+(((-1.0)*x1840))+((new_r10*x1838)));
evalcond[5]=(((new_r01*x1839))+((new_r11*x1838))+(((-1.0)*cj9)));
evalcond[6]=((((-1.0)*x1843))+new_r01);
evalcond[7]=((((-1.0)*x1843))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x1844=((1.0)*sj9);
CheckValue<IkReal> x1845 = IKatan2WithCheck(IkReal(((-1.0)+(new_r11*new_r11)+(cj9*cj9))),IkReal((((new_r01*new_r11))+(((-1.0)*cj9*x1844)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1845.valid){
continue;
}
CheckValue<IkReal> x1846=IKPowWithIntegerCheck(IKsign((((cj9*new_r11))+(((-1.0)*new_r01*x1844)))),-1);
if(!x1846.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1845.value)+(((1.5707963267949)*(x1846.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1847=IKsin(j7);
IkReal x1848=IKcos(j7);
IkReal x1849=((1.0)*sj9);
IkReal x1850=((1.0)*x1847);
IkReal x1851=((1.0)*x1848);
IkReal x1852=(((cj9*x1851))+((x1847*x1849)));
evalcond[0]=(((new_r11*x1848))+sj9+(((-1.0)*new_r01*x1850)));
evalcond[1]=(cj9+(((-1.0)*new_r10*x1851))+((new_r00*x1847)));
evalcond[2]=(((cj9*x1847))+(((-1.0)*x1848*x1849))+new_r00);
evalcond[3]=(((sj9*x1848))+new_r11+(((-1.0)*cj9*x1850)));
evalcond[4]=((((-1.0)*x1849))+((new_r00*x1848))+((new_r10*x1847)));
evalcond[5]=(((new_r11*x1847))+((new_r01*x1848))+(((-1.0)*cj9)));
evalcond[6]=(new_r01+(((-1.0)*x1852)));
evalcond[7]=(new_r10+(((-1.0)*x1852)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1853 = IKatan2WithCheck(IkReal((((new_r10*sj9))+((cj9*new_r11)))),IkReal((((cj9*new_r01))+((new_r00*sj9)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1853.valid){
continue;
}
CheckValue<IkReal> x1854=IKPowWithIntegerCheck(IKsign((((new_r01*new_r10))+(((-1.0)*new_r00*new_r11)))),-1);
if(!x1854.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x1853.value)+(((1.5707963267949)*(x1854.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1855=IKsin(j7);
IkReal x1856=IKcos(j7);
IkReal x1857=((1.0)*sj9);
IkReal x1858=((1.0)*x1855);
IkReal x1859=((1.0)*x1856);
IkReal x1860=(((cj9*x1859))+((x1855*x1857)));
evalcond[0]=(sj9+((new_r11*x1856))+(((-1.0)*new_r01*x1858)));
evalcond[1]=(((new_r00*x1855))+cj9+(((-1.0)*new_r10*x1859)));
evalcond[2]=(((cj9*x1855))+(((-1.0)*x1856*x1857))+new_r00);
evalcond[3]=(((sj9*x1856))+new_r11+(((-1.0)*cj9*x1858)));
evalcond[4]=(((new_r00*x1856))+((new_r10*x1855))+(((-1.0)*x1857)));
evalcond[5]=(((new_r01*x1856))+((new_r11*x1855))+(((-1.0)*cj9)));
evalcond[6]=(new_r01+(((-1.0)*x1860)));
evalcond[7]=(new_r10+(((-1.0)*x1860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
IkReal x1861=((-1.0)*new_r22);
CheckValue<IkReal> x1863 = IKatan2WithCheck(IkReal((new_r00*x1861)),IkReal((new_r10*x1861)),IKFAST_ATAN2_MAGTHRESH);
if(!x1863.valid){
continue;
}
IkReal x1862=x1863.value;
j7array[0]=((-1.0)*x1862);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1862)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1864=IKcos(j7);
IkReal x1865=IKsin(j7);
IkReal x1866=((1.0)*new_r01);
IkReal x1867=(new_r11*x1865);
evalcond[0]=(((new_r10*x1865))+((new_r00*x1864)));
evalcond[1]=(x1867+((new_r01*x1864)));
evalcond[2]=(((new_r11*x1864))+(((-1.0)*x1865*x1866)));
evalcond[3]=(((new_r00*x1865))+(((-1.0)*new_r10*x1864)));
evalcond[4]=((((-1.0)*new_r22*x1867))+(((-1.0)*new_r22*x1864*x1866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1869 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x1869.valid){
continue;
}
IkReal x1868=x1869.value;
j7array[0]=((-1.0)*x1868);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1868)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1870=IKcos(j7);
IkReal x1871=IKsin(j7);
IkReal x1872=((1.0)*new_r01);
IkReal x1873=(new_r22*x1870);
IkReal x1874=((1.0)*new_r22*x1871);
evalcond[0]=(((new_r10*x1871))+((new_r00*x1870)));
evalcond[1]=((((-1.0)*x1871*x1872))+((new_r11*x1870)));
evalcond[2]=(((new_r00*x1871))+(((-1.0)*new_r10*x1870)));
evalcond[3]=((((-1.0)*new_r10*x1874))+(((-1.0)*new_r00*x1873)));
evalcond[4]=((((-1.0)*new_r11*x1874))+(((-1.0)*x1872*x1873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x1876 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x1876.valid){
continue;
}
IkReal x1875=x1876.value;
j7array[0]=((-1.0)*x1875);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x1875)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x1877=IKcos(j7);
IkReal x1878=IKsin(j7);
IkReal x1879=((1.0)*new_r01);
IkReal x1880=(new_r22*x1877);
IkReal x1881=((1.0)*new_r22*x1878);
evalcond[0]=(((new_r01*x1877))+((new_r11*x1878)));
evalcond[1]=((((-1.0)*x1878*x1879))+((new_r11*x1877)));
evalcond[2]=(((new_r00*x1878))+(((-1.0)*new_r10*x1877)));
evalcond[3]=((((-1.0)*new_r00*x1880))+(((-1.0)*new_r10*x1881)));
evalcond[4]=((((-1.0)*x1879*x1880))+(((-1.0)*new_r11*x1881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1883=IKPowWithIntegerCheck(cj8,-1);
if(!x1883.valid){
continue;
}
IkReal x1882=x1883.value;
CheckValue<IkReal> x1884=IKPowWithIntegerCheck(new_r01,-1);
if(!x1884.valid){
continue;
}
if( IKabs((x1882*(x1884.value)*((((cj8*sj9))+((new_r02*new_r11)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x1882)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1882*(x1884.value)*((((cj8*sj9))+((new_r02*new_r11))))))+IKsqr((new_r02*x1882))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x1882*(x1884.value)*((((cj8*sj9))+((new_r02*new_r11))))), (new_r02*x1882));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[18];
IkReal x1885=IKcos(j7);
IkReal x1886=IKsin(j7);
IkReal x1887=((1.0)*cj9);
IkReal x1888=(sj8*sj9);
IkReal x1889=(cj9*sj8);
IkReal x1890=((1.0)*sj8);
IkReal x1891=(new_r12*x1886);
IkReal x1892=((1.0)*x1886);
IkReal x1893=(new_r02*x1885);
IkReal x1894=((1.0)*x1885);
IkReal x1895=(new_r11*x1886);
IkReal x1896=(new_r10*x1886);
IkReal x1897=(new_r01*x1885);
IkReal x1898=(new_r00*x1885);
evalcond[0]=((((-1.0)*cj8*x1894))+new_r02);
evalcond[1]=((((-1.0)*cj8*x1892))+new_r12);
evalcond[2]=(((new_r12*x1885))+(((-1.0)*new_r02*x1892)));
evalcond[3]=(sj9+((new_r11*x1885))+(((-1.0)*new_r01*x1892)));
evalcond[4]=(cj9+(((-1.0)*new_r10*x1894))+((new_r00*x1886)));
evalcond[5]=(((cj9*x1886))+new_r00+((x1885*x1888)));
evalcond[6]=(((sj9*x1885))+new_r11+((x1886*x1889)));
evalcond[7]=(x1891+x1893+(((-1.0)*cj8)));
evalcond[8]=(x1898+x1896+x1888);
evalcond[9]=(x1895+x1897+x1889);
evalcond[10]=((((-1.0)*sj9*x1892))+new_r01+((x1885*x1889)));
evalcond[11]=(new_r10+(((-1.0)*x1885*x1887))+((x1886*x1888)));
evalcond[12]=(((new_r20*sj8))+((cj8*x1896))+((cj8*x1898)));
evalcond[13]=(((cj8*x1895))+((cj8*x1897))+((new_r21*sj8)));
evalcond[14]=((-1.0)+((new_r22*sj8))+((cj8*x1893))+((cj8*x1891)));
evalcond[15]=(((cj8*new_r22))+(((-1.0)*x1890*x1891))+(((-1.0)*x1890*x1893)));
evalcond[16]=((((-1.0)*sj9))+((cj8*new_r20))+(((-1.0)*x1890*x1896))+(((-1.0)*x1890*x1898)));
evalcond[17]=(((cj8*new_r21))+(((-1.0)*x1890*x1897))+(((-1.0)*x1890*x1895))+(((-1.0)*x1887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1899=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x1899.valid){
continue;
}
CheckValue<IkReal> x1900 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1900.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1899.value)))+(x1900.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[18];
IkReal x1901=IKcos(j7);
IkReal x1902=IKsin(j7);
IkReal x1903=((1.0)*cj9);
IkReal x1904=(sj8*sj9);
IkReal x1905=(cj9*sj8);
IkReal x1906=((1.0)*sj8);
IkReal x1907=(new_r12*x1902);
IkReal x1908=((1.0)*x1902);
IkReal x1909=(new_r02*x1901);
IkReal x1910=((1.0)*x1901);
IkReal x1911=(new_r11*x1902);
IkReal x1912=(new_r10*x1902);
IkReal x1913=(new_r01*x1901);
IkReal x1914=(new_r00*x1901);
evalcond[0]=((((-1.0)*cj8*x1910))+new_r02);
evalcond[1]=((((-1.0)*cj8*x1908))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x1908))+((new_r12*x1901)));
evalcond[3]=(sj9+(((-1.0)*new_r01*x1908))+((new_r11*x1901)));
evalcond[4]=(cj9+(((-1.0)*new_r10*x1910))+((new_r00*x1902)));
evalcond[5]=(((x1901*x1904))+((cj9*x1902))+new_r00);
evalcond[6]=(new_r11+((x1902*x1905))+((sj9*x1901)));
evalcond[7]=(x1909+x1907+(((-1.0)*cj8)));
evalcond[8]=(x1904+x1912+x1914);
evalcond[9]=(x1905+x1911+x1913);
evalcond[10]=(((x1901*x1905))+(((-1.0)*sj9*x1908))+new_r01);
evalcond[11]=((((-1.0)*x1901*x1903))+new_r10+((x1902*x1904)));
evalcond[12]=(((new_r20*sj8))+((cj8*x1912))+((cj8*x1914)));
evalcond[13]=(((cj8*x1913))+((cj8*x1911))+((new_r21*sj8)));
evalcond[14]=((-1.0)+((cj8*x1907))+((cj8*x1909))+((new_r22*sj8)));
evalcond[15]=(((cj8*new_r22))+(((-1.0)*x1906*x1907))+(((-1.0)*x1906*x1909)));
evalcond[16]=((((-1.0)*sj9))+((cj8*new_r20))+(((-1.0)*x1906*x1912))+(((-1.0)*x1906*x1914)));
evalcond[17]=(((cj8*new_r21))+(((-1.0)*x1906*x1913))+(((-1.0)*x1906*x1911))+(((-1.0)*x1903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x1915=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x1915.valid){
continue;
}
CheckValue<IkReal> x1916 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x1916.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1915.value)))+(x1916.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x1917=IKcos(j7);
IkReal x1918=IKsin(j7);
IkReal x1919=((1.0)*new_r02);
IkReal x1920=(cj8*x1917);
IkReal x1921=(new_r12*x1918);
IkReal x1922=(cj8*x1918);
evalcond[0]=((((-1.0)*x1920))+new_r02);
evalcond[1]=((((-1.0)*x1922))+new_r12);
evalcond[2]=(((new_r12*x1917))+(((-1.0)*x1918*x1919)));
evalcond[3]=(((new_r02*x1917))+x1921+(((-1.0)*cj8)));
evalcond[4]=(((new_r20*sj8))+((new_r00*x1920))+((new_r10*x1922)));
evalcond[5]=(((new_r01*x1920))+((new_r21*sj8))+((new_r11*x1922)));
evalcond[6]=((-1.0)+((cj8*x1921))+((new_r02*x1920))+((new_r22*sj8)));
evalcond[7]=(((cj8*new_r22))+(((-1.0)*sj8*x1921))+(((-1.0)*sj8*x1917*x1919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=cj8;
j9eval[1]=IKsign(cj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=cj8;
j9eval[1]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
j9eval[0]=cj8;
j9eval[1]=sj7;
j9eval[2]=sj8;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1923=((1.0)*cj7);
if( IKabs((((new_r01*sj7))+(((-1.0)*new_r00*x1923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x1923))+(((-1.0)*new_r00*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*sj7))+(((-1.0)*new_r00*x1923))))+IKsqr(((((-1.0)*new_r01*x1923))+(((-1.0)*new_r00*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((new_r01*sj7))+(((-1.0)*new_r00*x1923))), ((((-1.0)*new_r01*x1923))+(((-1.0)*new_r00*sj7))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1924=IKsin(j9);
IkReal x1925=IKcos(j9);
IkReal x1926=((1.0)*cj7);
IkReal x1927=(sj7*x1925);
IkReal x1928=(cj7*x1924);
IkReal x1929=(sj7*x1924);
IkReal x1930=(x1927+x1928);
evalcond[0]=(((new_r10*sj7))+x1924+((cj7*new_r00)));
evalcond[1]=(((new_r11*sj7))+x1925+((cj7*new_r01)));
evalcond[2]=((((-1.0)*new_r01*sj7))+x1924+((cj7*new_r11)));
evalcond[3]=(((new_r00*sj7))+x1925+(((-1.0)*new_r10*x1926)));
evalcond[4]=(x1930+new_r00);
evalcond[5]=(x1930+new_r11);
evalcond[6]=(((cj7*x1925))+(((-1.0)*x1929))+new_r01);
evalcond[7]=(x1929+(((-1.0)*x1925*x1926))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r02;
evalcond[2]=new_r12;
evalcond[3]=new_r20;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs((((new_r01*sj7))+((cj7*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r00*sj7))+((cj7*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r01*sj7))+((cj7*new_r00))))+IKsqr(((((-1.0)*new_r00*sj7))+((cj7*new_r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((new_r01*sj7))+((cj7*new_r00))), ((((-1.0)*new_r00*sj7))+((cj7*new_r01))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1931=IKsin(j9);
IkReal x1932=IKcos(j9);
IkReal x1933=((1.0)*cj7);
IkReal x1934=((1.0)*sj7);
IkReal x1935=(((x1932*x1933))+((x1931*x1934)));
evalcond[0]=((((-1.0)*new_r01*x1934))+x1931+((cj7*new_r11)));
evalcond[1]=((((-1.0)*new_r10*x1933))+((new_r00*sj7))+x1932);
evalcond[2]=(((new_r10*sj7))+(((-1.0)*x1931))+((cj7*new_r00)));
evalcond[3]=(((new_r11*sj7))+(((-1.0)*x1932))+((cj7*new_r01)));
evalcond[4]=((((-1.0)*x1931*x1933))+new_r00+((sj7*x1932)));
evalcond[5]=((((-1.0)*x1932*x1934))+((cj7*x1931))+new_r11);
evalcond[6]=(new_r01+(((-1.0)*x1935)));
evalcond[7]=(new_r10+(((-1.0)*x1935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r11))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r11), new_r10);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1936=IKsin(j9);
IkReal x1937=IKcos(j9);
IkReal x1938=((1.0)*cj8);
IkReal x1939=((1.0)*sj8);
evalcond[0]=(x1936+new_r11);
evalcond[1]=(x1937+(((-1.0)*new_r10)));
evalcond[2]=(((sj8*x1936))+new_r00);
evalcond[3]=(((sj8*x1937))+new_r01);
evalcond[4]=(new_r20+(((-1.0)*x1936*x1938)));
evalcond[5]=((((-1.0)*x1937*x1938))+new_r21);
evalcond[6]=(((cj8*new_r20))+(((-1.0)*new_r00*x1939))+(((-1.0)*x1936)));
evalcond[7]=(((cj8*new_r21))+(((-1.0)*new_r01*x1939))+(((-1.0)*x1937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r11)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r11, ((-1.0)*new_r10));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1940=IKsin(j9);
IkReal x1941=IKcos(j9);
IkReal x1942=((1.0)*cj8);
evalcond[0]=(x1941+new_r10);
evalcond[1]=(x1940+(((-1.0)*new_r11)));
evalcond[2]=((((-1.0)*x1940*x1942))+new_r20);
evalcond[3]=((((-1.0)*x1941*x1942))+new_r21);
evalcond[4]=(((sj8*x1940))+(((-1.0)*new_r00)));
evalcond[5]=(((sj8*x1941))+(((-1.0)*new_r01)));
evalcond[6]=(((cj8*new_r20))+((new_r00*sj8))+(((-1.0)*x1940)));
evalcond[7]=(((cj8*new_r21))+((new_r01*sj8))+(((-1.0)*x1941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r20)+IKsqr(new_r21)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r20, new_r21);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1943=IKcos(j9);
IkReal x1944=IKsin(j9);
IkReal x1945=((1.0)*cj7);
IkReal x1946=((1.0)*x1944);
evalcond[0]=((((-1.0)*x1946))+new_r20);
evalcond[1]=((((-1.0)*x1943))+new_r21);
evalcond[2]=(((sj7*x1943))+new_r00);
evalcond[3]=(((cj7*x1944))+new_r11);
evalcond[4]=((((-1.0)*sj7*x1946))+new_r01);
evalcond[5]=((((-1.0)*x1943*x1945))+new_r10);
evalcond[6]=((((-1.0)*new_r01*sj7))+x1944+((cj7*new_r11)));
evalcond[7]=((((-1.0)*new_r10*x1945))+((new_r00*sj7))+x1943);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r20))+IKsqr(((-1.0)*new_r21))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r20), ((-1.0)*new_r21));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x1947=IKcos(j9);
IkReal x1948=IKsin(j9);
IkReal x1949=((1.0)*cj7);
IkReal x1950=((1.0)*sj7);
evalcond[0]=(x1948+new_r20);
evalcond[1]=(x1947+new_r21);
evalcond[2]=(((sj7*x1947))+new_r00);
evalcond[3]=(((cj7*x1948))+new_r11);
evalcond[4]=((((-1.0)*x1948*x1950))+new_r01);
evalcond[5]=((((-1.0)*x1947*x1949))+new_r10);
evalcond[6]=((((-1.0)*new_r01*x1950))+x1948+((cj7*new_r11)));
evalcond[7]=((((-1.0)*new_r10*x1949))+((new_r00*sj7))+x1947);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=IKabs(new_r22);
if( IKabs(j9eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j9]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j9array[2], cj9array[2], sj9array[2], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[2]={true,true};
_nj9 = 2;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x1952=IKPowWithIntegerCheck(cj8,-1);
if(!x1952.valid){
continue;
}
IkReal x1951=x1952.value;
CheckValue<IkReal> x1953=IKPowWithIntegerCheck(sj7,-1);
if(!x1953.valid){
continue;
}
CheckValue<IkReal> x1954=IKPowWithIntegerCheck(sj8,-1);
if(!x1954.valid){
continue;
}
if( IKabs((new_r20*x1951)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1951*(x1953.value)*(x1954.value)*(((((-1.0)*cj8*new_r11))+(((-1.0)*cj7*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x1951))+IKsqr((x1951*(x1953.value)*(x1954.value)*(((((-1.0)*cj8*new_r11))+(((-1.0)*cj7*new_r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r20*x1951), (x1951*(x1953.value)*(x1954.value)*(((((-1.0)*cj8*new_r11))+(((-1.0)*cj7*new_r20))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x1955=IKsin(j9);
IkReal x1956=IKcos(j9);
IkReal x1957=((1.0)*new_r10);
IkReal x1958=(sj7*sj8);
IkReal x1959=(cj7*new_r01);
IkReal x1960=((1.0)*sj8);
IkReal x1961=(cj7*new_r00);
IkReal x1962=(cj7*x1955);
IkReal x1963=(sj8*x1956);
IkReal x1964=((1.0)*x1955);
IkReal x1965=((1.0)*x1956);
evalcond[0]=(new_r20+(((-1.0)*cj8*x1964)));
evalcond[1]=(new_r21+(((-1.0)*cj8*x1965)));
evalcond[2]=((((-1.0)*new_r01*sj7))+x1955+((cj7*new_r11)));
evalcond[3]=((((-1.0)*cj7*x1957))+((new_r00*sj7))+x1956);
evalcond[4]=(((new_r10*sj7))+((sj8*x1955))+x1961);
evalcond[5]=(((new_r11*sj7))+x1963+x1959);
evalcond[6]=(((sj8*x1962))+((sj7*x1956))+new_r00);
evalcond[7]=(x1962+new_r11+((x1956*x1958)));
evalcond[8]=(((cj7*x1963))+new_r01+(((-1.0)*sj7*x1964)));
evalcond[9]=((((-1.0)*cj7*x1965))+((x1955*x1958))+new_r10);
evalcond[10]=(((cj8*new_r20))+(((-1.0)*x1957*x1958))+(((-1.0)*x1964))+(((-1.0)*x1960*x1961)));
evalcond[11]=((((-1.0)*x1959*x1960))+((cj8*new_r21))+(((-1.0)*new_r11*x1958))+(((-1.0)*x1965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x1967=IKPowWithIntegerCheck(cj8,-1);
if(!x1967.valid){
continue;
}
IkReal x1966=x1967.value;
CheckValue<IkReal> x1968=IKPowWithIntegerCheck(sj7,-1);
if(!x1968.valid){
continue;
}
if( IKabs((new_r20*x1966)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1966*(x1968.value)*(((((-1.0)*cj7*new_r20*sj8))+(((-1.0)*cj8*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r20*x1966))+IKsqr((x1966*(x1968.value)*(((((-1.0)*cj7*new_r20*sj8))+(((-1.0)*cj8*new_r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((new_r20*x1966), (x1966*(x1968.value)*(((((-1.0)*cj7*new_r20*sj8))+(((-1.0)*cj8*new_r00))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x1969=IKsin(j9);
IkReal x1970=IKcos(j9);
IkReal x1971=((1.0)*new_r10);
IkReal x1972=(sj7*sj8);
IkReal x1973=(cj7*new_r01);
IkReal x1974=((1.0)*sj8);
IkReal x1975=(cj7*new_r00);
IkReal x1976=(cj7*x1969);
IkReal x1977=(sj8*x1970);
IkReal x1978=((1.0)*x1969);
IkReal x1979=((1.0)*x1970);
evalcond[0]=(new_r20+(((-1.0)*cj8*x1978)));
evalcond[1]=(new_r21+(((-1.0)*cj8*x1979)));
evalcond[2]=((((-1.0)*new_r01*sj7))+x1969+((cj7*new_r11)));
evalcond[3]=(((new_r00*sj7))+(((-1.0)*cj7*x1971))+x1970);
evalcond[4]=(((new_r10*sj7))+((sj8*x1969))+x1975);
evalcond[5]=(((new_r11*sj7))+x1977+x1973);
evalcond[6]=(((sj8*x1976))+((sj7*x1970))+new_r00);
evalcond[7]=(((x1970*x1972))+x1976+new_r11);
evalcond[8]=(((cj7*x1977))+new_r01+(((-1.0)*sj7*x1978)));
evalcond[9]=(((x1969*x1972))+(((-1.0)*cj7*x1979))+new_r10);
evalcond[10]=(((cj8*new_r20))+(((-1.0)*x1974*x1975))+(((-1.0)*x1978))+(((-1.0)*x1971*x1972)));
evalcond[11]=(((cj8*new_r21))+(((-1.0)*x1973*x1974))+(((-1.0)*x1979))+(((-1.0)*new_r11*x1972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x1980=IKPowWithIntegerCheck(IKsign(cj8),-1);
if(!x1980.valid){
continue;
}
CheckValue<IkReal> x1981 = IKatan2WithCheck(IkReal(new_r20),IkReal(new_r21),IKFAST_ATAN2_MAGTHRESH);
if(!x1981.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1980.value)))+(x1981.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x1982=IKsin(j9);
IkReal x1983=IKcos(j9);
IkReal x1984=((1.0)*new_r10);
IkReal x1985=(sj7*sj8);
IkReal x1986=(cj7*new_r01);
IkReal x1987=((1.0)*sj8);
IkReal x1988=(cj7*new_r00);
IkReal x1989=(cj7*x1982);
IkReal x1990=(sj8*x1983);
IkReal x1991=((1.0)*x1982);
IkReal x1992=((1.0)*x1983);
evalcond[0]=(new_r20+(((-1.0)*cj8*x1991)));
evalcond[1]=(new_r21+(((-1.0)*cj8*x1992)));
evalcond[2]=((((-1.0)*new_r01*sj7))+x1982+((cj7*new_r11)));
evalcond[3]=(((new_r00*sj7))+x1983+(((-1.0)*cj7*x1984)));
evalcond[4]=(((new_r10*sj7))+((sj8*x1982))+x1988);
evalcond[5]=(((new_r11*sj7))+x1986+x1990);
evalcond[6]=(((sj8*x1989))+((sj7*x1983))+new_r00);
evalcond[7]=(x1989+new_r11+((x1983*x1985)));
evalcond[8]=(((cj7*x1990))+(((-1.0)*sj7*x1991))+new_r01);
evalcond[9]=((((-1.0)*cj7*x1992))+((x1982*x1985))+new_r10);
evalcond[10]=(((cj8*new_r20))+(((-1.0)*x1984*x1985))+(((-1.0)*x1987*x1988))+(((-1.0)*x1991)));
evalcond[11]=((((-1.0)*x1986*x1987))+((cj8*new_r21))+(((-1.0)*new_r11*x1985))+(((-1.0)*x1992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(10);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
vinfos[7].jointtype = 1;
vinfos[7].foffset = j7;
vinfos[7].indices[0] = _ij7[0];
vinfos[7].indices[1] = _ij7[1];
vinfos[7].maxsolutions = _nj7;
vinfos[8].jointtype = 1;
vinfos[8].foffset = j8;
vinfos[8].indices[0] = _ij8[0];
vinfos[8].indices[1] = _ij8[1];
vinfos[8].maxsolutions = _nj8;
vinfos[9].jointtype = 1;
vinfos[9].foffset = j9;
vinfos[9].indices[0] = _ij9[0];
vinfos[9].indices[1] = _ij9[1];
vinfos[9].maxsolutions = _nj9;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - seednoid (ae2a3334ab520e69feedd1dc2ba6e613)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif

int all_right_ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint,int *NumSolutions)
{
  double Numik;
  IkSolutionList<IkReal> solutions;
  std::vector<IkReal> vfree(GetNumFreeParameters());
  for(std::size_t i = 0; i < vfree.size(); ++i){
    vfree[i] = free_joint[i];
  }
  bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
  if( !bSuccess ) {
      return -1;
  }

  sol_joint.resize(solutions.GetNumSolutions());
  std::vector<IkReal> solvalues(GetNumJoints());
  for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
    sol_joint[i].resize(solvalues.size());
    for( std::size_t j = 0; j < solvalues.size(); ++j){
      if(j==3){
	sol_joint[i][j] = -solvalues[j];
      }
      else if(j==4){//seednoidはアームが伸びきった状態の第2,第4関節が，+90°のため
	sol_joint[i][j] = M_PI/2-solvalues[j];
	//std::cout << "計算" <<std::endl;
      }
      else if(j==5){
	sol_joint[i][j] = -solvalues[j];
      }
      else if(j==7){
	sol_joint[i][j] = -solvalues[j];
      }
      else if(j==8){
	sol_joint[i][j] = -solvalues[j];
      }
      else if(j==9){
	sol_joint[i][j] = -solvalues[j];
      }
      else
	sol_joint[i][j] = solvalues[j];
    }
  }
  *NumSolutions = (int)solutions.GetNumSolutions();
  return 0;
}
